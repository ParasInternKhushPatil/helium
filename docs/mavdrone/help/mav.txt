Help on MAVLink in module pymavlink.dialects.v20.ardupilotmega object:

class MAVLink(builtins.object)
 |  MAVLink protocol handling class
 |  
 |  Methods defined here:
 |  
 |  __init__(self, file, srcSystem=0, srcComponent=0, use_native=False)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  actuator_control_target_encode(self, time_usec, group_mlx, controls)
 |      Set the vehicle attitude and body angular rates.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      group_mlx                 : Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances. (type:uint8_t)
 |      controls                  : Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs. (type:float)
 |  
 |  actuator_control_target_send(self, time_usec, group_mlx, controls, force_mavlink1=False)
 |      Set the vehicle attitude and body angular rates.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      group_mlx                 : Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances. (type:uint8_t)
 |      controls                  : Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs. (type:float)
 |  
 |  actuator_output_status_encode(self, time_usec, active, actuator)
 |      The raw values of the actuator outputs (e.g. on Pixhawk, from MAIN,
 |      AUX ports). This message supersedes SERVO_OUTPUT_RAW.
 |      
 |      time_usec                 : Timestamp (since system boot). [us] (type:uint64_t)
 |      active                    : Active outputs (type:uint32_t)
 |      actuator                  : Servo / motor output array values. Zero values indicate unused channels. (type:float)
 |  
 |  actuator_output_status_send(self, time_usec, active, actuator, force_mavlink1=False)
 |      The raw values of the actuator outputs (e.g. on Pixhawk, from MAIN,
 |      AUX ports). This message supersedes SERVO_OUTPUT_RAW.
 |      
 |      time_usec                 : Timestamp (since system boot). [us] (type:uint64_t)
 |      active                    : Active outputs (type:uint32_t)
 |      actuator                  : Servo / motor output array values. Zero values indicate unused channels. (type:float)
 |  
 |  adap_tuning_encode(self, axis, desired, achieved, error, theta, omega, sigma, theta_dot, omega_dot, sigma_dot, f, f_dot, u)
 |      Adaptive Controller tuning information.
 |      
 |      axis                      : Axis. (type:uint8_t, values:PID_TUNING_AXIS)
 |      desired                   : Desired rate. [deg/s] (type:float)
 |      achieved                  : Achieved rate. [deg/s] (type:float)
 |      error                     : Error between model and vehicle. (type:float)
 |      theta                     : Theta estimated state predictor. (type:float)
 |      omega                     : Omega estimated state predictor. (type:float)
 |      sigma                     : Sigma estimated state predictor. (type:float)
 |      theta_dot                 : Theta derivative. (type:float)
 |      omega_dot                 : Omega derivative. (type:float)
 |      sigma_dot                 : Sigma derivative. (type:float)
 |      f                         : Projection operator value. (type:float)
 |      f_dot                     : Projection operator derivative. (type:float)
 |      u                         : u adaptive controlled output command. (type:float)
 |  
 |  adap_tuning_send(self, axis, desired, achieved, error, theta, omega, sigma, theta_dot, omega_dot, sigma_dot, f, f_dot, u, force_mavlink1=False)
 |      Adaptive Controller tuning information.
 |      
 |      axis                      : Axis. (type:uint8_t, values:PID_TUNING_AXIS)
 |      desired                   : Desired rate. [deg/s] (type:float)
 |      achieved                  : Achieved rate. [deg/s] (type:float)
 |      error                     : Error between model and vehicle. (type:float)
 |      theta                     : Theta estimated state predictor. (type:float)
 |      omega                     : Omega estimated state predictor. (type:float)
 |      sigma                     : Sigma estimated state predictor. (type:float)
 |      theta_dot                 : Theta derivative. (type:float)
 |      omega_dot                 : Omega derivative. (type:float)
 |      sigma_dot                 : Sigma derivative. (type:float)
 |      f                         : Projection operator value. (type:float)
 |      f_dot                     : Projection operator derivative. (type:float)
 |      u                         : u adaptive controlled output command. (type:float)
 |  
 |  adsb_vehicle_encode(self, ICAO_address, lat, lon, altitude_type, altitude, heading, hor_velocity, ver_velocity, callsign, emitter_type, tslc, flags, squawk)
 |      The location and information of an ADSB vehicle
 |      
 |      ICAO_address              : ICAO address (type:uint32_t)
 |      lat                       : Latitude [degE7] (type:int32_t)
 |      lon                       : Longitude [degE7] (type:int32_t)
 |      altitude_type             : ADSB altitude type. (type:uint8_t, values:ADSB_ALTITUDE_TYPE)
 |      altitude                  : Altitude(ASL) [mm] (type:int32_t)
 |      heading                   : Course over ground [cdeg] (type:uint16_t)
 |      hor_velocity              : The horizontal velocity [cm/s] (type:uint16_t)
 |      ver_velocity              : The vertical velocity. Positive is up [cm/s] (type:int16_t)
 |      callsign                  : The callsign, 8+null (type:char)
 |      emitter_type              : ADSB emitter type. (type:uint8_t, values:ADSB_EMITTER_TYPE)
 |      tslc                      : Time since last communication in seconds [s] (type:uint8_t)
 |      flags                     : Bitmap to indicate various statuses including valid data fields (type:uint16_t, values:ADSB_FLAGS)
 |      squawk                    : Squawk code (type:uint16_t)
 |  
 |  adsb_vehicle_send(self, ICAO_address, lat, lon, altitude_type, altitude, heading, hor_velocity, ver_velocity, callsign, emitter_type, tslc, flags, squawk, force_mavlink1=False)
 |      The location and information of an ADSB vehicle
 |      
 |      ICAO_address              : ICAO address (type:uint32_t)
 |      lat                       : Latitude [degE7] (type:int32_t)
 |      lon                       : Longitude [degE7] (type:int32_t)
 |      altitude_type             : ADSB altitude type. (type:uint8_t, values:ADSB_ALTITUDE_TYPE)
 |      altitude                  : Altitude(ASL) [mm] (type:int32_t)
 |      heading                   : Course over ground [cdeg] (type:uint16_t)
 |      hor_velocity              : The horizontal velocity [cm/s] (type:uint16_t)
 |      ver_velocity              : The vertical velocity. Positive is up [cm/s] (type:int16_t)
 |      callsign                  : The callsign, 8+null (type:char)
 |      emitter_type              : ADSB emitter type. (type:uint8_t, values:ADSB_EMITTER_TYPE)
 |      tslc                      : Time since last communication in seconds [s] (type:uint8_t)
 |      flags                     : Bitmap to indicate various statuses including valid data fields (type:uint16_t, values:ADSB_FLAGS)
 |      squawk                    : Squawk code (type:uint16_t)
 |  
 |  ahrs2_encode(self, roll, pitch, yaw, altitude, lat, lng)
 |      Status of secondary AHRS filter if available.
 |      
 |      roll                      : Roll angle. [rad] (type:float)
 |      pitch                     : Pitch angle. [rad] (type:float)
 |      yaw                       : Yaw angle. [rad] (type:float)
 |      altitude                  : Altitude (MSL). [m] (type:float)
 |      lat                       : Latitude. [degE7] (type:int32_t)
 |      lng                       : Longitude. [degE7] (type:int32_t)
 |  
 |  ahrs2_send(self, roll, pitch, yaw, altitude, lat, lng, force_mavlink1=False)
 |      Status of secondary AHRS filter if available.
 |      
 |      roll                      : Roll angle. [rad] (type:float)
 |      pitch                     : Pitch angle. [rad] (type:float)
 |      yaw                       : Yaw angle. [rad] (type:float)
 |      altitude                  : Altitude (MSL). [m] (type:float)
 |      lat                       : Latitude. [degE7] (type:int32_t)
 |      lng                       : Longitude. [degE7] (type:int32_t)
 |  
 |  ahrs3_encode(self, roll, pitch, yaw, altitude, lat, lng, v1, v2, v3, v4)
 |      Status of third AHRS filter if available. This is for ANU research
 |      group (Ali and Sean).
 |      
 |      roll                      : Roll angle. [rad] (type:float)
 |      pitch                     : Pitch angle. [rad] (type:float)
 |      yaw                       : Yaw angle. [rad] (type:float)
 |      altitude                  : Altitude (MSL). [m] (type:float)
 |      lat                       : Latitude. [degE7] (type:int32_t)
 |      lng                       : Longitude. [degE7] (type:int32_t)
 |      v1                        : Test variable1. (type:float)
 |      v2                        : Test variable2. (type:float)
 |      v3                        : Test variable3. (type:float)
 |      v4                        : Test variable4. (type:float)
 |  
 |  ahrs3_send(self, roll, pitch, yaw, altitude, lat, lng, v1, v2, v3, v4, force_mavlink1=False)
 |      Status of third AHRS filter if available. This is for ANU research
 |      group (Ali and Sean).
 |      
 |      roll                      : Roll angle. [rad] (type:float)
 |      pitch                     : Pitch angle. [rad] (type:float)
 |      yaw                       : Yaw angle. [rad] (type:float)
 |      altitude                  : Altitude (MSL). [m] (type:float)
 |      lat                       : Latitude. [degE7] (type:int32_t)
 |      lng                       : Longitude. [degE7] (type:int32_t)
 |      v1                        : Test variable1. (type:float)
 |      v2                        : Test variable2. (type:float)
 |      v3                        : Test variable3. (type:float)
 |      v4                        : Test variable4. (type:float)
 |  
 |  ahrs_encode(self, omegaIx, omegaIy, omegaIz, accel_weight, renorm_val, error_rp, error_yaw)
 |      Status of DCM attitude estimator.
 |      
 |      omegaIx                   : X gyro drift estimate. [rad/s] (type:float)
 |      omegaIy                   : Y gyro drift estimate. [rad/s] (type:float)
 |      omegaIz                   : Z gyro drift estimate. [rad/s] (type:float)
 |      accel_weight              : Average accel_weight. (type:float)
 |      renorm_val                : Average renormalisation value. (type:float)
 |      error_rp                  : Average error_roll_pitch value. (type:float)
 |      error_yaw                 : Average error_yaw value. (type:float)
 |  
 |  ahrs_send(self, omegaIx, omegaIy, omegaIz, accel_weight, renorm_val, error_rp, error_yaw, force_mavlink1=False)
 |      Status of DCM attitude estimator.
 |      
 |      omegaIx                   : X gyro drift estimate. [rad/s] (type:float)
 |      omegaIy                   : Y gyro drift estimate. [rad/s] (type:float)
 |      omegaIz                   : Z gyro drift estimate. [rad/s] (type:float)
 |      accel_weight              : Average accel_weight. (type:float)
 |      renorm_val                : Average renormalisation value. (type:float)
 |      error_rp                  : Average error_roll_pitch value. (type:float)
 |      error_yaw                 : Average error_yaw value. (type:float)
 |  
 |  airspeed_autocal_encode(self, vx, vy, vz, diff_pressure, EAS2TAS, ratio, state_x, state_y, state_z, Pax, Pby, Pcz)
 |      Airspeed auto-calibration.
 |      
 |      vx                        : GPS velocity north. [m/s] (type:float)
 |      vy                        : GPS velocity east. [m/s] (type:float)
 |      vz                        : GPS velocity down. [m/s] (type:float)
 |      diff_pressure             : Differential pressure. [Pa] (type:float)
 |      EAS2TAS                   : Estimated to true airspeed ratio. (type:float)
 |      ratio                     : Airspeed ratio. (type:float)
 |      state_x                   : EKF state x. (type:float)
 |      state_y                   : EKF state y. (type:float)
 |      state_z                   : EKF state z. (type:float)
 |      Pax                       : EKF Pax. (type:float)
 |      Pby                       : EKF Pby. (type:float)
 |      Pcz                       : EKF Pcz. (type:float)
 |  
 |  airspeed_autocal_send(self, vx, vy, vz, diff_pressure, EAS2TAS, ratio, state_x, state_y, state_z, Pax, Pby, Pcz, force_mavlink1=False)
 |      Airspeed auto-calibration.
 |      
 |      vx                        : GPS velocity north. [m/s] (type:float)
 |      vy                        : GPS velocity east. [m/s] (type:float)
 |      vz                        : GPS velocity down. [m/s] (type:float)
 |      diff_pressure             : Differential pressure. [Pa] (type:float)
 |      EAS2TAS                   : Estimated to true airspeed ratio. (type:float)
 |      ratio                     : Airspeed ratio. (type:float)
 |      state_x                   : EKF state x. (type:float)
 |      state_y                   : EKF state y. (type:float)
 |      state_z                   : EKF state z. (type:float)
 |      Pax                       : EKF Pax. (type:float)
 |      Pby                       : EKF Pby. (type:float)
 |      Pcz                       : EKF Pcz. (type:float)
 |  
 |  altitude_encode(self, time_usec, altitude_monotonic, altitude_amsl, altitude_local, altitude_relative, altitude_terrain, bottom_clearance)
 |      The current system altitude.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      altitude_monotonic        : This altitude measure is initialized on system boot and monotonic (it is never reset, but represents the local altitude change). The only guarantee on this field is that it will never be reset and is consistent within a flight. The recommended value for this field is the uncorrected barometric altitude at boot time. This altitude will also drift and vary between flights. [m] (type:float)
 |      altitude_amsl             : This altitude measure is strictly above mean sea level and might be non-monotonic (it might reset on events like GPS lock or when a new QNH value is set). It should be the altitude to which global altitude waypoints are compared to. Note that it is *not* the GPS altitude, however, most GPS modules already output MSL by default and not the WGS84 altitude. [m] (type:float)
 |      altitude_local            : This is the local altitude in the local coordinate frame. It is not the altitude above home, but in reference to the coordinate origin (0, 0, 0). It is up-positive. [m] (type:float)
 |      altitude_relative         : This is the altitude above the home position. It resets on each change of the current home position. [m] (type:float)
 |      altitude_terrain          : This is the altitude above terrain. It might be fed by a terrain database or an altimeter. Values smaller than -1000 should be interpreted as unknown. [m] (type:float)
 |      bottom_clearance          : This is not the altitude, but the clear space below the system according to the fused clearance estimate. It generally should max out at the maximum range of e.g. the laser altimeter. It is generally a moving target. A negative value indicates no measurement available. [m] (type:float)
 |  
 |  altitude_send(self, time_usec, altitude_monotonic, altitude_amsl, altitude_local, altitude_relative, altitude_terrain, bottom_clearance, force_mavlink1=False)
 |      The current system altitude.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      altitude_monotonic        : This altitude measure is initialized on system boot and monotonic (it is never reset, but represents the local altitude change). The only guarantee on this field is that it will never be reset and is consistent within a flight. The recommended value for this field is the uncorrected barometric altitude at boot time. This altitude will also drift and vary between flights. [m] (type:float)
 |      altitude_amsl             : This altitude measure is strictly above mean sea level and might be non-monotonic (it might reset on events like GPS lock or when a new QNH value is set). It should be the altitude to which global altitude waypoints are compared to. Note that it is *not* the GPS altitude, however, most GPS modules already output MSL by default and not the WGS84 altitude. [m] (type:float)
 |      altitude_local            : This is the local altitude in the local coordinate frame. It is not the altitude above home, but in reference to the coordinate origin (0, 0, 0). It is up-positive. [m] (type:float)
 |      altitude_relative         : This is the altitude above the home position. It resets on each change of the current home position. [m] (type:float)
 |      altitude_terrain          : This is the altitude above terrain. It might be fed by a terrain database or an altimeter. Values smaller than -1000 should be interpreted as unknown. [m] (type:float)
 |      bottom_clearance          : This is not the altitude, but the clear space below the system according to the fused clearance estimate. It generally should max out at the maximum range of e.g. the laser altimeter. It is generally a moving target. A negative value indicates no measurement available. [m] (type:float)
 |  
 |  aoa_ssa_encode(self, time_usec, AOA, SSA)
 |      Angle of Attack and Side Slip Angle.
 |      
 |      time_usec                 : Timestamp (since boot or Unix epoch). [us] (type:uint64_t)
 |      AOA                       : Angle of Attack. [deg] (type:float)
 |      SSA                       : Side Slip Angle. [deg] (type:float)
 |  
 |  aoa_ssa_send(self, time_usec, AOA, SSA, force_mavlink1=False)
 |      Angle of Attack and Side Slip Angle.
 |      
 |      time_usec                 : Timestamp (since boot or Unix epoch). [us] (type:uint64_t)
 |      AOA                       : Angle of Attack. [deg] (type:float)
 |      SSA                       : Side Slip Angle. [deg] (type:float)
 |  
 |  ap_adc_encode(self, adc1, adc2, adc3, adc4, adc5, adc6)
 |      Raw ADC output.
 |      
 |      adc1                      : ADC output 1. (type:uint16_t)
 |      adc2                      : ADC output 2. (type:uint16_t)
 |      adc3                      : ADC output 3. (type:uint16_t)
 |      adc4                      : ADC output 4. (type:uint16_t)
 |      adc5                      : ADC output 5. (type:uint16_t)
 |      adc6                      : ADC output 6. (type:uint16_t)
 |  
 |  ap_adc_send(self, adc1, adc2, adc3, adc4, adc5, adc6, force_mavlink1=False)
 |      Raw ADC output.
 |      
 |      adc1                      : ADC output 1. (type:uint16_t)
 |      adc2                      : ADC output 2. (type:uint16_t)
 |      adc3                      : ADC output 3. (type:uint16_t)
 |      adc4                      : ADC output 4. (type:uint16_t)
 |      adc5                      : ADC output 5. (type:uint16_t)
 |      adc6                      : ADC output 6. (type:uint16_t)
 |  
 |  att_pos_mocap_encode(self, time_usec, q, x, y, z, covariance=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
 |      Motion capture attitude and position
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (type:float)
 |      x                         : X position (NED) [m] (type:float)
 |      y                         : Y position (NED) [m] (type:float)
 |      z                         : Z position (NED) [m] (type:float)
 |      covariance                : Row-major representation of a pose 6x6 cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |  
 |  att_pos_mocap_send(self, time_usec, q, x, y, z, covariance=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], force_mavlink1=False)
 |      Motion capture attitude and position
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (type:float)
 |      x                         : X position (NED) [m] (type:float)
 |      y                         : Y position (NED) [m] (type:float)
 |      z                         : Z position (NED) [m] (type:float)
 |      covariance                : Row-major representation of a pose 6x6 cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |  
 |  attitude_encode(self, time_boot_ms, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed)
 |      The attitude in the aeronautical frame (right-handed, Z-down, X-front,
 |      Y-right).
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      roll                      : Roll angle (-pi..+pi) [rad] (type:float)
 |      pitch                     : Pitch angle (-pi..+pi) [rad] (type:float)
 |      yaw                       : Yaw angle (-pi..+pi) [rad] (type:float)
 |      rollspeed                 : Roll angular speed [rad/s] (type:float)
 |      pitchspeed                : Pitch angular speed [rad/s] (type:float)
 |      yawspeed                  : Yaw angular speed [rad/s] (type:float)
 |  
 |  attitude_quaternion_cov_encode(self, time_usec, q, rollspeed, pitchspeed, yawspeed, covariance)
 |      The attitude in the aeronautical frame (right-handed, Z-down, X-front,
 |      Y-right), expressed as quaternion. Quaternion order is
 |      w, x, y, z and a zero rotation would be expressed as
 |      (1 0 0 0).
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      q                         : Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation) (type:float)
 |      rollspeed                 : Roll angular speed [rad/s] (type:float)
 |      pitchspeed                : Pitch angular speed [rad/s] (type:float)
 |      yawspeed                  : Yaw angular speed [rad/s] (type:float)
 |      covariance                : Row-major representation of a 3x3 attitude covariance matrix (states: roll, pitch, yaw; first three entries are the first ROW, next three entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |  
 |  attitude_quaternion_cov_send(self, time_usec, q, rollspeed, pitchspeed, yawspeed, covariance, force_mavlink1=False)
 |      The attitude in the aeronautical frame (right-handed, Z-down, X-front,
 |      Y-right), expressed as quaternion. Quaternion order is
 |      w, x, y, z and a zero rotation would be expressed as
 |      (1 0 0 0).
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      q                         : Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation) (type:float)
 |      rollspeed                 : Roll angular speed [rad/s] (type:float)
 |      pitchspeed                : Pitch angular speed [rad/s] (type:float)
 |      yawspeed                  : Yaw angular speed [rad/s] (type:float)
 |      covariance                : Row-major representation of a 3x3 attitude covariance matrix (states: roll, pitch, yaw; first three entries are the first ROW, next three entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |  
 |  attitude_quaternion_encode(self, time_boot_ms, q1, q2, q3, q4, rollspeed, pitchspeed, yawspeed, repr_offset_q=[0, 0, 0, 0])
 |      The attitude in the aeronautical frame (right-handed, Z-down, X-front,
 |      Y-right), expressed as quaternion. Quaternion order is
 |      w, x, y, z and a zero rotation would be expressed as
 |      (1 0 0 0).
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      q1                        : Quaternion component 1, w (1 in null-rotation) (type:float)
 |      q2                        : Quaternion component 2, x (0 in null-rotation) (type:float)
 |      q3                        : Quaternion component 3, y (0 in null-rotation) (type:float)
 |      q4                        : Quaternion component 4, z (0 in null-rotation) (type:float)
 |      rollspeed                 : Roll angular speed [rad/s] (type:float)
 |      pitchspeed                : Pitch angular speed [rad/s] (type:float)
 |      yawspeed                  : Yaw angular speed [rad/s] (type:float)
 |      repr_offset_q             : Rotation offset by which the attitude quaternion and angular speed vector should be rotated for user display (quaternion with [w, x, y, z] order, zero-rotation is [1, 0, 0, 0], send [0, 0, 0, 0] if field not supported). This field is intended for systems in which the reference attitude may change during flight. For example, tailsitters VTOLs rotate their reference attitude by 90 degrees between hover mode and fixed wing mode, thus repr_offset_q is equal to [1, 0, 0, 0] in hover mode and equal to [0.7071, 0, 0.7071, 0] in fixed wing mode. (type:float)
 |  
 |  attitude_quaternion_send(self, time_boot_ms, q1, q2, q3, q4, rollspeed, pitchspeed, yawspeed, repr_offset_q=[0, 0, 0, 0], force_mavlink1=False)
 |      The attitude in the aeronautical frame (right-handed, Z-down, X-front,
 |      Y-right), expressed as quaternion. Quaternion order is
 |      w, x, y, z and a zero rotation would be expressed as
 |      (1 0 0 0).
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      q1                        : Quaternion component 1, w (1 in null-rotation) (type:float)
 |      q2                        : Quaternion component 2, x (0 in null-rotation) (type:float)
 |      q3                        : Quaternion component 3, y (0 in null-rotation) (type:float)
 |      q4                        : Quaternion component 4, z (0 in null-rotation) (type:float)
 |      rollspeed                 : Roll angular speed [rad/s] (type:float)
 |      pitchspeed                : Pitch angular speed [rad/s] (type:float)
 |      yawspeed                  : Yaw angular speed [rad/s] (type:float)
 |      repr_offset_q             : Rotation offset by which the attitude quaternion and angular speed vector should be rotated for user display (quaternion with [w, x, y, z] order, zero-rotation is [1, 0, 0, 0], send [0, 0, 0, 0] if field not supported). This field is intended for systems in which the reference attitude may change during flight. For example, tailsitters VTOLs rotate their reference attitude by 90 degrees between hover mode and fixed wing mode, thus repr_offset_q is equal to [1, 0, 0, 0] in hover mode and equal to [0.7071, 0, 0.7071, 0] in fixed wing mode. (type:float)
 |  
 |  attitude_send(self, time_boot_ms, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed, force_mavlink1=False)
 |      The attitude in the aeronautical frame (right-handed, Z-down, X-front,
 |      Y-right).
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      roll                      : Roll angle (-pi..+pi) [rad] (type:float)
 |      pitch                     : Pitch angle (-pi..+pi) [rad] (type:float)
 |      yaw                       : Yaw angle (-pi..+pi) [rad] (type:float)
 |      rollspeed                 : Roll angular speed [rad/s] (type:float)
 |      pitchspeed                : Pitch angular speed [rad/s] (type:float)
 |      yawspeed                  : Yaw angular speed [rad/s] (type:float)
 |  
 |  attitude_target_encode(self, time_boot_ms, type_mask, q, body_roll_rate, body_pitch_rate, body_yaw_rate, thrust)
 |      Reports the current commanded attitude of the vehicle as specified by
 |      the autopilot. This should match the commands sent in
 |      a SET_ATTITUDE_TARGET message if the vehicle is being
 |      controlled this way.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      type_mask                 : Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 7: reserved, bit 8: attitude (type:uint8_t)
 |      q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (type:float)
 |      body_roll_rate            : Body roll rate [rad/s] (type:float)
 |      body_pitch_rate           : Body pitch rate [rad/s] (type:float)
 |      body_yaw_rate             : Body yaw rate [rad/s] (type:float)
 |      thrust                    : Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust) (type:float)
 |  
 |  attitude_target_send(self, time_boot_ms, type_mask, q, body_roll_rate, body_pitch_rate, body_yaw_rate, thrust, force_mavlink1=False)
 |      Reports the current commanded attitude of the vehicle as specified by
 |      the autopilot. This should match the commands sent in
 |      a SET_ATTITUDE_TARGET message if the vehicle is being
 |      controlled this way.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      type_mask                 : Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 7: reserved, bit 8: attitude (type:uint8_t)
 |      q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (type:float)
 |      body_roll_rate            : Body roll rate [rad/s] (type:float)
 |      body_pitch_rate           : Body pitch rate [rad/s] (type:float)
 |      body_yaw_rate             : Body yaw rate [rad/s] (type:float)
 |      thrust                    : Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust) (type:float)
 |  
 |  auth_key_encode(self, key)
 |      Emit an encrypted signature / key identifying this system. PLEASE
 |      NOTE: This protocol has been kept simple, so
 |      transmitting the key requires an encrypted channel for
 |      true safety.
 |      
 |      key                       : key (type:char)
 |  
 |  auth_key_send(self, key, force_mavlink1=False)
 |      Emit an encrypted signature / key identifying this system. PLEASE
 |      NOTE: This protocol has been kept simple, so
 |      transmitting the key requires an encrypted channel for
 |      true safety.
 |      
 |      key                       : key (type:char)
 |  
 |  autopilot_version_encode(self, capabilities, flight_sw_version, middleware_sw_version, os_sw_version, board_version, flight_custom_version, middleware_custom_version, os_custom_version, vendor_id, product_id, uid, uid2=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
 |      Version and capability of autopilot software. This should be emitted
 |      in response to a
 |      MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES command.
 |      
 |      capabilities              : Bitmap of capabilities (type:uint64_t, values:MAV_PROTOCOL_CAPABILITY)
 |      flight_sw_version         : Firmware version number (type:uint32_t)
 |      middleware_sw_version        : Middleware version number (type:uint32_t)
 |      os_sw_version             : Operating system version number (type:uint32_t)
 |      board_version             : HW / board version (last 8 bytes should be silicon ID, if any) (type:uint32_t)
 |      flight_custom_version        : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (type:uint8_t)
 |      middleware_custom_version        : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (type:uint8_t)
 |      os_custom_version         : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (type:uint8_t)
 |      vendor_id                 : ID of the board vendor (type:uint16_t)
 |      product_id                : ID of the product (type:uint16_t)
 |      uid                       : UID if provided by hardware (see uid2) (type:uint64_t)
 |      uid2                      : UID if provided by hardware (supersedes the uid field. If this is non-zero, use this field, otherwise use uid) (type:uint8_t)
 |  
 |  autopilot_version_request_encode(self, target_system, target_component)
 |      Request the autopilot version from the system/component.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |  
 |  autopilot_version_request_send(self, target_system, target_component, force_mavlink1=False)
 |      Request the autopilot version from the system/component.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |  
 |  autopilot_version_send(self, capabilities, flight_sw_version, middleware_sw_version, os_sw_version, board_version, flight_custom_version, middleware_custom_version, os_custom_version, vendor_id, product_id, uid, uid2=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], force_mavlink1=False)
 |      Version and capability of autopilot software. This should be emitted
 |      in response to a
 |      MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES command.
 |      
 |      capabilities              : Bitmap of capabilities (type:uint64_t, values:MAV_PROTOCOL_CAPABILITY)
 |      flight_sw_version         : Firmware version number (type:uint32_t)
 |      middleware_sw_version        : Middleware version number (type:uint32_t)
 |      os_sw_version             : Operating system version number (type:uint32_t)
 |      board_version             : HW / board version (last 8 bytes should be silicon ID, if any) (type:uint32_t)
 |      flight_custom_version        : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (type:uint8_t)
 |      middleware_custom_version        : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (type:uint8_t)
 |      os_custom_version         : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (type:uint8_t)
 |      vendor_id                 : ID of the board vendor (type:uint16_t)
 |      product_id                : ID of the product (type:uint16_t)
 |      uid                       : UID if provided by hardware (see uid2) (type:uint64_t)
 |      uid2                      : UID if provided by hardware (supersedes the uid field. If this is non-zero, use this field, otherwise use uid) (type:uint8_t)
 |  
 |  battery2_encode(self, voltage, current_battery)
 |      2nd Battery status
 |      
 |      voltage                   : Voltage. [mV] (type:uint16_t)
 |      current_battery           : Battery current, -1: autopilot does not measure the current. [cA] (type:int16_t)
 |  
 |  battery2_send(self, voltage, current_battery, force_mavlink1=False)
 |      2nd Battery status
 |      
 |      voltage                   : Voltage. [mV] (type:uint16_t)
 |      current_battery           : Battery current, -1: autopilot does not measure the current. [cA] (type:int16_t)
 |  
 |  battery_status_encode(self, id, battery_function, type, temperature, voltages, current_battery, current_consumed, energy_consumed, battery_remaining, time_remaining=0, charge_state=0)
 |      Battery information
 |      
 |      id                        : Battery ID (type:uint8_t)
 |      battery_function          : Function of the battery (type:uint8_t, values:MAV_BATTERY_FUNCTION)
 |      type                      : Type (chemistry) of the battery (type:uint8_t, values:MAV_BATTERY_TYPE)
 |      temperature               : Temperature of the battery. INT16_MAX for unknown temperature. [cdegC] (type:int16_t)
 |      voltages                  : Battery voltage of cells. Cells above the valid cell count for this battery should have the UINT16_MAX value. [mV] (type:uint16_t)
 |      current_battery           : Battery current, -1: autopilot does not measure the current [cA] (type:int16_t)
 |      current_consumed          : Consumed charge, -1: autopilot does not provide consumption estimate [mAh] (type:int32_t)
 |      energy_consumed           : Consumed energy, -1: autopilot does not provide energy consumption estimate [hJ] (type:int32_t)
 |      battery_remaining         : Remaining battery energy. Values: [0-100], -1: autopilot does not estimate the remaining battery. [%] (type:int8_t)
 |      time_remaining            : Remaining battery time, 0: autopilot does not provide remaining battery time estimate [s] (type:int32_t)
 |      charge_state              : State for extent of discharge, provided by autopilot for warning or external reactions (type:uint8_t, values:MAV_BATTERY_CHARGE_STATE)
 |  
 |  battery_status_send(self, id, battery_function, type, temperature, voltages, current_battery, current_consumed, energy_consumed, battery_remaining, time_remaining=0, charge_state=0, force_mavlink1=False)
 |      Battery information
 |      
 |      id                        : Battery ID (type:uint8_t)
 |      battery_function          : Function of the battery (type:uint8_t, values:MAV_BATTERY_FUNCTION)
 |      type                      : Type (chemistry) of the battery (type:uint8_t, values:MAV_BATTERY_TYPE)
 |      temperature               : Temperature of the battery. INT16_MAX for unknown temperature. [cdegC] (type:int16_t)
 |      voltages                  : Battery voltage of cells. Cells above the valid cell count for this battery should have the UINT16_MAX value. [mV] (type:uint16_t)
 |      current_battery           : Battery current, -1: autopilot does not measure the current [cA] (type:int16_t)
 |      current_consumed          : Consumed charge, -1: autopilot does not provide consumption estimate [mAh] (type:int32_t)
 |      energy_consumed           : Consumed energy, -1: autopilot does not provide energy consumption estimate [hJ] (type:int32_t)
 |      battery_remaining         : Remaining battery energy. Values: [0-100], -1: autopilot does not estimate the remaining battery. [%] (type:int8_t)
 |      time_remaining            : Remaining battery time, 0: autopilot does not provide remaining battery time estimate [s] (type:int32_t)
 |      charge_state              : State for extent of discharge, provided by autopilot for warning or external reactions (type:uint8_t, values:MAV_BATTERY_CHARGE_STATE)
 |  
 |  buf_len(self)
 |  
 |  button_change_encode(self, time_boot_ms, last_change_ms, state)
 |      Report button state change.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      last_change_ms            : Time of last change of button state. [ms] (type:uint32_t)
 |      state                     : Bitmap for state of buttons. (type:uint8_t)
 |  
 |  button_change_send(self, time_boot_ms, last_change_ms, state, force_mavlink1=False)
 |      Report button state change.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      last_change_ms            : Time of last change of button state. [ms] (type:uint32_t)
 |      state                     : Bitmap for state of buttons. (type:uint8_t)
 |  
 |  bytes_needed(self)
 |      return number of bytes needed for next parsing stage
 |  
 |  camera_capture_status_encode(self, time_boot_ms, image_status, video_status, image_interval, recording_time_ms, available_capacity)
 |      Information about the status of a capture.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      image_status              : Current status of image capturing (0: idle, 1: capture in progress, 2: interval set but idle, 3: interval set and capture in progress) (type:uint8_t)
 |      video_status              : Current status of video capturing (0: idle, 1: capture in progress) (type:uint8_t)
 |      image_interval            : Image capture interval [s] (type:float)
 |      recording_time_ms         : Time since recording started [ms] (type:uint32_t)
 |      available_capacity        : Available storage capacity. [MiB] (type:float)
 |  
 |  camera_capture_status_send(self, time_boot_ms, image_status, video_status, image_interval, recording_time_ms, available_capacity, force_mavlink1=False)
 |      Information about the status of a capture.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      image_status              : Current status of image capturing (0: idle, 1: capture in progress, 2: interval set but idle, 3: interval set and capture in progress) (type:uint8_t)
 |      video_status              : Current status of video capturing (0: idle, 1: capture in progress) (type:uint8_t)
 |      image_interval            : Image capture interval [s] (type:float)
 |      recording_time_ms         : Time since recording started [ms] (type:uint32_t)
 |      available_capacity        : Available storage capacity. [MiB] (type:float)
 |  
 |  camera_feedback_encode(self, time_usec, target_system, cam_idx, img_idx, lat, lng, alt_msl, alt_rel, roll, pitch, yaw, foc_len, flags, completed_captures=0)
 |      Camera Capture Feedback.
 |      
 |      time_usec                 : Image timestamp (since UNIX epoch), as passed in by CAMERA_STATUS message (or autopilot if no CCB). [us] (type:uint64_t)
 |      target_system             : System ID. (type:uint8_t)
 |      cam_idx                   : Camera ID. (type:uint8_t)
 |      img_idx                   : Image index. (type:uint16_t)
 |      lat                       : Latitude. [degE7] (type:int32_t)
 |      lng                       : Longitude. [degE7] (type:int32_t)
 |      alt_msl                   : Altitude (MSL). [m] (type:float)
 |      alt_rel                   : Altitude (Relative to HOME location). [m] (type:float)
 |      roll                      : Camera Roll angle (earth frame, +-180). [deg] (type:float)
 |      pitch                     : Camera Pitch angle (earth frame, +-180). [deg] (type:float)
 |      yaw                       : Camera Yaw (earth frame, 0-360, true). [deg] (type:float)
 |      foc_len                   : Focal Length. [mm] (type:float)
 |      flags                     : Feedback flags. (type:uint8_t, values:CAMERA_FEEDBACK_FLAGS)
 |      completed_captures        : Completed image captures. (type:uint16_t)
 |  
 |  camera_feedback_send(self, time_usec, target_system, cam_idx, img_idx, lat, lng, alt_msl, alt_rel, roll, pitch, yaw, foc_len, flags, completed_captures=0, force_mavlink1=False)
 |      Camera Capture Feedback.
 |      
 |      time_usec                 : Image timestamp (since UNIX epoch), as passed in by CAMERA_STATUS message (or autopilot if no CCB). [us] (type:uint64_t)
 |      target_system             : System ID. (type:uint8_t)
 |      cam_idx                   : Camera ID. (type:uint8_t)
 |      img_idx                   : Image index. (type:uint16_t)
 |      lat                       : Latitude. [degE7] (type:int32_t)
 |      lng                       : Longitude. [degE7] (type:int32_t)
 |      alt_msl                   : Altitude (MSL). [m] (type:float)
 |      alt_rel                   : Altitude (Relative to HOME location). [m] (type:float)
 |      roll                      : Camera Roll angle (earth frame, +-180). [deg] (type:float)
 |      pitch                     : Camera Pitch angle (earth frame, +-180). [deg] (type:float)
 |      yaw                       : Camera Yaw (earth frame, 0-360, true). [deg] (type:float)
 |      foc_len                   : Focal Length. [mm] (type:float)
 |      flags                     : Feedback flags. (type:uint8_t, values:CAMERA_FEEDBACK_FLAGS)
 |      completed_captures        : Completed image captures. (type:uint16_t)
 |  
 |  camera_image_captured_encode(self, time_boot_ms, time_utc, camera_id, lat, lon, alt, relative_alt, q, image_index, capture_result, file_url)
 |      Information about a captured image
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      time_utc                  : Timestamp (time since UNIX epoch) in UTC. 0 for unknown. [us] (type:uint64_t)
 |      camera_id                 : Camera ID (1 for first, 2 for second, etc.) (type:uint8_t)
 |      lat                       : Latitude where image was taken [degE7] (type:int32_t)
 |      lon                       : Longitude where capture was taken [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL) where image was taken [mm] (type:int32_t)
 |      relative_alt              : Altitude above ground [mm] (type:int32_t)
 |      q                         : Quaternion of camera orientation (w, x, y, z order, zero-rotation is 0, 0, 0, 0) (type:float)
 |      image_index               : Zero based index of this image (image count since armed -1) (type:int32_t)
 |      capture_result            : Boolean indicating success (1) or failure (0) while capturing this image. (type:int8_t)
 |      file_url                  : URL of image taken. Either local storage or http://foo.jpg if camera provides an HTTP interface. (type:char)
 |  
 |  camera_image_captured_send(self, time_boot_ms, time_utc, camera_id, lat, lon, alt, relative_alt, q, image_index, capture_result, file_url, force_mavlink1=False)
 |      Information about a captured image
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      time_utc                  : Timestamp (time since UNIX epoch) in UTC. 0 for unknown. [us] (type:uint64_t)
 |      camera_id                 : Camera ID (1 for first, 2 for second, etc.) (type:uint8_t)
 |      lat                       : Latitude where image was taken [degE7] (type:int32_t)
 |      lon                       : Longitude where capture was taken [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL) where image was taken [mm] (type:int32_t)
 |      relative_alt              : Altitude above ground [mm] (type:int32_t)
 |      q                         : Quaternion of camera orientation (w, x, y, z order, zero-rotation is 0, 0, 0, 0) (type:float)
 |      image_index               : Zero based index of this image (image count since armed -1) (type:int32_t)
 |      capture_result            : Boolean indicating success (1) or failure (0) while capturing this image. (type:int8_t)
 |      file_url                  : URL of image taken. Either local storage or http://foo.jpg if camera provides an HTTP interface. (type:char)
 |  
 |  camera_information_encode(self, time_boot_ms, vendor_name, model_name, firmware_version, focal_length, sensor_size_h, sensor_size_v, resolution_h, resolution_v, lens_id, flags, cam_definition_version, cam_definition_uri)
 |      Information about a camera
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      vendor_name               : Name of the camera vendor (type:uint8_t)
 |      model_name                : Name of the camera model (type:uint8_t)
 |      firmware_version          : Version of the camera firmware (v << 24 & 0xff = Dev, v << 16 & 0xff = Patch, v << 8 & 0xff = Minor, v & 0xff = Major) (type:uint32_t)
 |      focal_length              : Focal length [mm] (type:float)
 |      sensor_size_h             : Image sensor size horizontal [mm] (type:float)
 |      sensor_size_v             : Image sensor size vertical [mm] (type:float)
 |      resolution_h              : Horizontal image resolution [pix] (type:uint16_t)
 |      resolution_v              : Vertical image resolution [pix] (type:uint16_t)
 |      lens_id                   : Reserved for a lens ID (type:uint8_t)
 |      flags                     : Bitmap of camera capability flags. (type:uint32_t, values:CAMERA_CAP_FLAGS)
 |      cam_definition_version        : Camera definition version (iteration) (type:uint16_t)
 |      cam_definition_uri        : Camera definition URI (if any, otherwise only basic functions will be available). HTTP- (http://) and MAVLink FTP- (mavlinkftp://) formatted URIs are allowed (and both must be supported by any GCS that implements the Camera Protocol). (type:char)
 |  
 |  camera_information_send(self, time_boot_ms, vendor_name, model_name, firmware_version, focal_length, sensor_size_h, sensor_size_v, resolution_h, resolution_v, lens_id, flags, cam_definition_version, cam_definition_uri, force_mavlink1=False)
 |      Information about a camera
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      vendor_name               : Name of the camera vendor (type:uint8_t)
 |      model_name                : Name of the camera model (type:uint8_t)
 |      firmware_version          : Version of the camera firmware (v << 24 & 0xff = Dev, v << 16 & 0xff = Patch, v << 8 & 0xff = Minor, v & 0xff = Major) (type:uint32_t)
 |      focal_length              : Focal length [mm] (type:float)
 |      sensor_size_h             : Image sensor size horizontal [mm] (type:float)
 |      sensor_size_v             : Image sensor size vertical [mm] (type:float)
 |      resolution_h              : Horizontal image resolution [pix] (type:uint16_t)
 |      resolution_v              : Vertical image resolution [pix] (type:uint16_t)
 |      lens_id                   : Reserved for a lens ID (type:uint8_t)
 |      flags                     : Bitmap of camera capability flags. (type:uint32_t, values:CAMERA_CAP_FLAGS)
 |      cam_definition_version        : Camera definition version (iteration) (type:uint16_t)
 |      cam_definition_uri        : Camera definition URI (if any, otherwise only basic functions will be available). HTTP- (http://) and MAVLink FTP- (mavlinkftp://) formatted URIs are allowed (and both must be supported by any GCS that implements the Camera Protocol). (type:char)
 |  
 |  camera_settings_encode(self, time_boot_ms, mode_id, zoomLevel=0, focusLevel=0)
 |      Settings of a camera, can be requested using
 |      MAV_CMD_REQUEST_CAMERA_SETTINGS.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      mode_id                   : Camera mode (type:uint8_t, values:CAMERA_MODE)
 |      zoomLevel                 : Current zoom level (0.0 to 100.0, NaN if not known) (type:float)
 |      focusLevel                : Current focus level (0.0 to 100.0, NaN if not known) (type:float)
 |  
 |  camera_settings_send(self, time_boot_ms, mode_id, zoomLevel=0, focusLevel=0, force_mavlink1=False)
 |      Settings of a camera, can be requested using
 |      MAV_CMD_REQUEST_CAMERA_SETTINGS.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      mode_id                   : Camera mode (type:uint8_t, values:CAMERA_MODE)
 |      zoomLevel                 : Current zoom level (0.0 to 100.0, NaN if not known) (type:float)
 |      focusLevel                : Current focus level (0.0 to 100.0, NaN if not known) (type:float)
 |  
 |  camera_status_encode(self, time_usec, target_system, cam_idx, img_idx, event_id, p1, p2, p3, p4)
 |      Camera Event.
 |      
 |      time_usec                 : Image timestamp (since UNIX epoch, according to camera clock). [us] (type:uint64_t)
 |      target_system             : System ID. (type:uint8_t)
 |      cam_idx                   : Camera ID. (type:uint8_t)
 |      img_idx                   : Image index. (type:uint16_t)
 |      event_id                  : Event type. (type:uint8_t, values:CAMERA_STATUS_TYPES)
 |      p1                        : Parameter 1 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (type:float)
 |      p2                        : Parameter 2 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (type:float)
 |      p3                        : Parameter 3 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (type:float)
 |      p4                        : Parameter 4 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (type:float)
 |  
 |  camera_status_send(self, time_usec, target_system, cam_idx, img_idx, event_id, p1, p2, p3, p4, force_mavlink1=False)
 |      Camera Event.
 |      
 |      time_usec                 : Image timestamp (since UNIX epoch, according to camera clock). [us] (type:uint64_t)
 |      target_system             : System ID. (type:uint8_t)
 |      cam_idx                   : Camera ID. (type:uint8_t)
 |      img_idx                   : Image index. (type:uint16_t)
 |      event_id                  : Event type. (type:uint8_t, values:CAMERA_STATUS_TYPES)
 |      p1                        : Parameter 1 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (type:float)
 |      p2                        : Parameter 2 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (type:float)
 |      p3                        : Parameter 3 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (type:float)
 |      p4                        : Parameter 4 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (type:float)
 |  
 |  camera_trigger_encode(self, time_usec, seq)
 |      Camera-IMU triggering and synchronisation message.
 |      
 |      time_usec                 : Timestamp for image frame (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      seq                       : Image frame sequence (type:uint32_t)
 |  
 |  camera_trigger_send(self, time_usec, seq, force_mavlink1=False)
 |      Camera-IMU triggering and synchronisation message.
 |      
 |      time_usec                 : Timestamp for image frame (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      seq                       : Image frame sequence (type:uint32_t)
 |  
 |  change_operator_control_ack_encode(self, gcs_system_id, control_request, ack)
 |      Accept / deny control of this MAV
 |      
 |      gcs_system_id             : ID of the GCS this message (type:uint8_t)
 |      control_request           : 0: request control of this MAV, 1: Release control of this MAV (type:uint8_t)
 |      ack                       : 0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control (type:uint8_t)
 |  
 |  change_operator_control_ack_send(self, gcs_system_id, control_request, ack, force_mavlink1=False)
 |      Accept / deny control of this MAV
 |      
 |      gcs_system_id             : ID of the GCS this message (type:uint8_t)
 |      control_request           : 0: request control of this MAV, 1: Release control of this MAV (type:uint8_t)
 |      ack                       : 0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control (type:uint8_t)
 |  
 |  change_operator_control_encode(self, target_system, control_request, version, passkey)
 |      Request to control this MAV
 |      
 |      target_system             : System the GCS requests control for (type:uint8_t)
 |      control_request           : 0: request control of this MAV, 1: Release control of this MAV (type:uint8_t)
 |      version                   : 0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch. [rad] (type:uint8_t)
 |      passkey                   : Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-" (type:char)
 |  
 |  change_operator_control_send(self, target_system, control_request, version, passkey, force_mavlink1=False)
 |      Request to control this MAV
 |      
 |      target_system             : System the GCS requests control for (type:uint8_t)
 |      control_request           : 0: request control of this MAV, 1: Release control of this MAV (type:uint8_t)
 |      version                   : 0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch. [rad] (type:uint8_t)
 |      passkey                   : Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-" (type:char)
 |  
 |  check_signature(self, msgbuf, srcSystem, srcComponent)
 |      check signature on incoming message
 |  
 |  collision_encode(self, src, id, action, threat_level, time_to_minimum_delta, altitude_minimum_delta, horizontal_minimum_delta)
 |      Information about a potential collision
 |      
 |      src                       : Collision data source (type:uint8_t, values:MAV_COLLISION_SRC)
 |      id                        : Unique identifier, domain based on src field (type:uint32_t)
 |      action                    : Action that is being taken to avoid this collision (type:uint8_t, values:MAV_COLLISION_ACTION)
 |      threat_level              : How concerned the aircraft is about this collision (type:uint8_t, values:MAV_COLLISION_THREAT_LEVEL)
 |      time_to_minimum_delta        : Estimated time until collision occurs [s] (type:float)
 |      altitude_minimum_delta        : Closest vertical distance between vehicle and object [m] (type:float)
 |      horizontal_minimum_delta        : Closest horizontal distance between vehicle and object [m] (type:float)
 |  
 |  collision_send(self, src, id, action, threat_level, time_to_minimum_delta, altitude_minimum_delta, horizontal_minimum_delta, force_mavlink1=False)
 |      Information about a potential collision
 |      
 |      src                       : Collision data source (type:uint8_t, values:MAV_COLLISION_SRC)
 |      id                        : Unique identifier, domain based on src field (type:uint32_t)
 |      action                    : Action that is being taken to avoid this collision (type:uint8_t, values:MAV_COLLISION_ACTION)
 |      threat_level              : How concerned the aircraft is about this collision (type:uint8_t, values:MAV_COLLISION_THREAT_LEVEL)
 |      time_to_minimum_delta        : Estimated time until collision occurs [s] (type:float)
 |      altitude_minimum_delta        : Closest vertical distance between vehicle and object [m] (type:float)
 |      horizontal_minimum_delta        : Closest horizontal distance between vehicle and object [m] (type:float)
 |  
 |  command_ack_encode(self, command, result)
 |      Report status of a command. Includes feedback whether the command was
 |      executed. The command microservice is documented at
 |      https://mavlink.io/en/services/command.html
 |      
 |      command                   : Command ID (of acknowledged command). (type:uint16_t, values:MAV_CMD)
 |      result                    : Result of command. (type:uint8_t, values:MAV_RESULT)
 |  
 |  command_ack_send(self, command, result, force_mavlink1=False)
 |      Report status of a command. Includes feedback whether the command was
 |      executed. The command microservice is documented at
 |      https://mavlink.io/en/services/command.html
 |      
 |      command                   : Command ID (of acknowledged command). (type:uint16_t, values:MAV_CMD)
 |      result                    : Result of command. (type:uint8_t, values:MAV_RESULT)
 |  
 |  command_int_encode(self, target_system, target_component, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z)
 |      Message encoding a command with parameters as scaled integers. Scaling
 |      depends on the actual command value. The command
 |      microservice is documented at
 |      https://mavlink.io/en/services/command.html
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      frame                     : The coordinate system of the COMMAND. (type:uint8_t, values:MAV_FRAME)
 |      command                   : The scheduled action for the mission item. (type:uint16_t, values:MAV_CMD)
 |      current                   : false:0, true:1 (type:uint8_t)
 |      autocontinue              : autocontinue to next wp (type:uint8_t)
 |      param1                    : PARAM1, see MAV_CMD enum (type:float)
 |      param2                    : PARAM2, see MAV_CMD enum (type:float)
 |      param3                    : PARAM3, see MAV_CMD enum (type:float)
 |      param4                    : PARAM4, see MAV_CMD enum (type:float)
 |      x                         : PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7 (type:int32_t)
 |      y                         : PARAM6 / local: y position in meters * 1e4, global: longitude in degrees * 10^7 (type:int32_t)
 |      z                         : PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame). (type:float)
 |  
 |  command_int_send(self, target_system, target_component, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z, force_mavlink1=False)
 |      Message encoding a command with parameters as scaled integers. Scaling
 |      depends on the actual command value. The command
 |      microservice is documented at
 |      https://mavlink.io/en/services/command.html
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      frame                     : The coordinate system of the COMMAND. (type:uint8_t, values:MAV_FRAME)
 |      command                   : The scheduled action for the mission item. (type:uint16_t, values:MAV_CMD)
 |      current                   : false:0, true:1 (type:uint8_t)
 |      autocontinue              : autocontinue to next wp (type:uint8_t)
 |      param1                    : PARAM1, see MAV_CMD enum (type:float)
 |      param2                    : PARAM2, see MAV_CMD enum (type:float)
 |      param3                    : PARAM3, see MAV_CMD enum (type:float)
 |      param4                    : PARAM4, see MAV_CMD enum (type:float)
 |      x                         : PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7 (type:int32_t)
 |      y                         : PARAM6 / local: y position in meters * 1e4, global: longitude in degrees * 10^7 (type:int32_t)
 |      z                         : PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame). (type:float)
 |  
 |  command_long_encode(self, target_system, target_component, command, confirmation, param1, param2, param3, param4, param5, param6, param7)
 |      Send a command with up to seven parameters to the MAV. The command
 |      microservice is documented at
 |      https://mavlink.io/en/services/command.html
 |      
 |      target_system             : System which should execute the command (type:uint8_t)
 |      target_component          : Component which should execute the command, 0 for all components (type:uint8_t)
 |      command                   : Command ID (of command to send). (type:uint16_t, values:MAV_CMD)
 |      confirmation              : 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command) (type:uint8_t)
 |      param1                    : Parameter 1 (for the specific command). (type:float)
 |      param2                    : Parameter 2 (for the specific command). (type:float)
 |      param3                    : Parameter 3 (for the specific command). (type:float)
 |      param4                    : Parameter 4 (for the specific command). (type:float)
 |      param5                    : Parameter 5 (for the specific command). (type:float)
 |      param6                    : Parameter 6 (for the specific command). (type:float)
 |      param7                    : Parameter 7 (for the specific command). (type:float)
 |  
 |  command_long_send(self, target_system, target_component, command, confirmation, param1, param2, param3, param4, param5, param6, param7, force_mavlink1=False)
 |      Send a command with up to seven parameters to the MAV. The command
 |      microservice is documented at
 |      https://mavlink.io/en/services/command.html
 |      
 |      target_system             : System which should execute the command (type:uint8_t)
 |      target_component          : Component which should execute the command, 0 for all components (type:uint8_t)
 |      command                   : Command ID (of command to send). (type:uint16_t, values:MAV_CMD)
 |      confirmation              : 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command) (type:uint8_t)
 |      param1                    : Parameter 1 (for the specific command). (type:float)
 |      param2                    : Parameter 2 (for the specific command). (type:float)
 |      param3                    : Parameter 3 (for the specific command). (type:float)
 |      param4                    : Parameter 4 (for the specific command). (type:float)
 |      param5                    : Parameter 5 (for the specific command). (type:float)
 |      param6                    : Parameter 6 (for the specific command). (type:float)
 |      param7                    : Parameter 7 (for the specific command). (type:float)
 |  
 |  compassmot_status_encode(self, throttle, current, interference, CompensationX, CompensationY, CompensationZ)
 |      Status of compassmot calibration.
 |      
 |      throttle                  : Throttle. [d%] (type:uint16_t)
 |      current                   : Current. [A] (type:float)
 |      interference              : Interference. [%] (type:uint16_t)
 |      CompensationX             : Motor Compensation X. (type:float)
 |      CompensationY             : Motor Compensation Y. (type:float)
 |      CompensationZ             : Motor Compensation Z. (type:float)
 |  
 |  compassmot_status_send(self, throttle, current, interference, CompensationX, CompensationY, CompensationZ, force_mavlink1=False)
 |      Status of compassmot calibration.
 |      
 |      throttle                  : Throttle. [d%] (type:uint16_t)
 |      current                   : Current. [A] (type:float)
 |      interference              : Interference. [%] (type:uint16_t)
 |      CompensationX             : Motor Compensation X. (type:float)
 |      CompensationY             : Motor Compensation Y. (type:float)
 |      CompensationZ             : Motor Compensation Z. (type:float)
 |  
 |  control_system_state_encode(self, time_usec, x_acc, y_acc, z_acc, x_vel, y_vel, z_vel, x_pos, y_pos, z_pos, airspeed, vel_variance, pos_variance, q, roll_rate, pitch_rate, yaw_rate)
 |      The smoothed, monotonic system state used to feed the control loops of
 |      the system.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      x_acc                     : X acceleration in body frame [m/s/s] (type:float)
 |      y_acc                     : Y acceleration in body frame [m/s/s] (type:float)
 |      z_acc                     : Z acceleration in body frame [m/s/s] (type:float)
 |      x_vel                     : X velocity in body frame [m/s] (type:float)
 |      y_vel                     : Y velocity in body frame [m/s] (type:float)
 |      z_vel                     : Z velocity in body frame [m/s] (type:float)
 |      x_pos                     : X position in local frame [m] (type:float)
 |      y_pos                     : Y position in local frame [m] (type:float)
 |      z_pos                     : Z position in local frame [m] (type:float)
 |      airspeed                  : Airspeed, set to -1 if unknown [m/s] (type:float)
 |      vel_variance              : Variance of body velocity estimate (type:float)
 |      pos_variance              : Variance in local position (type:float)
 |      q                         : The attitude, represented as Quaternion (type:float)
 |      roll_rate                 : Angular rate in roll axis [rad/s] (type:float)
 |      pitch_rate                : Angular rate in pitch axis [rad/s] (type:float)
 |      yaw_rate                  : Angular rate in yaw axis [rad/s] (type:float)
 |  
 |  control_system_state_send(self, time_usec, x_acc, y_acc, z_acc, x_vel, y_vel, z_vel, x_pos, y_pos, z_pos, airspeed, vel_variance, pos_variance, q, roll_rate, pitch_rate, yaw_rate, force_mavlink1=False)
 |      The smoothed, monotonic system state used to feed the control loops of
 |      the system.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      x_acc                     : X acceleration in body frame [m/s/s] (type:float)
 |      y_acc                     : Y acceleration in body frame [m/s/s] (type:float)
 |      z_acc                     : Z acceleration in body frame [m/s/s] (type:float)
 |      x_vel                     : X velocity in body frame [m/s] (type:float)
 |      y_vel                     : Y velocity in body frame [m/s] (type:float)
 |      z_vel                     : Z velocity in body frame [m/s] (type:float)
 |      x_pos                     : X position in local frame [m] (type:float)
 |      y_pos                     : Y position in local frame [m] (type:float)
 |      z_pos                     : Z position in local frame [m] (type:float)
 |      airspeed                  : Airspeed, set to -1 if unknown [m/s] (type:float)
 |      vel_variance              : Variance of body velocity estimate (type:float)
 |      pos_variance              : Variance in local position (type:float)
 |      q                         : The attitude, represented as Quaternion (type:float)
 |      roll_rate                 : Angular rate in roll axis [rad/s] (type:float)
 |      pitch_rate                : Angular rate in pitch axis [rad/s] (type:float)
 |      yaw_rate                  : Angular rate in yaw axis [rad/s] (type:float)
 |  
 |  data16_encode(self, type, len, data)
 |      Data packet, size 16.
 |      
 |      type                      : Data type. (type:uint8_t)
 |      len                       : Data length. [bytes] (type:uint8_t)
 |      data                      : Raw data. (type:uint8_t)
 |  
 |  data16_send(self, type, len, data, force_mavlink1=False)
 |      Data packet, size 16.
 |      
 |      type                      : Data type. (type:uint8_t)
 |      len                       : Data length. [bytes] (type:uint8_t)
 |      data                      : Raw data. (type:uint8_t)
 |  
 |  data32_encode(self, type, len, data)
 |      Data packet, size 32.
 |      
 |      type                      : Data type. (type:uint8_t)
 |      len                       : Data length. [bytes] (type:uint8_t)
 |      data                      : Raw data. (type:uint8_t)
 |  
 |  data32_send(self, type, len, data, force_mavlink1=False)
 |      Data packet, size 32.
 |      
 |      type                      : Data type. (type:uint8_t)
 |      len                       : Data length. [bytes] (type:uint8_t)
 |      data                      : Raw data. (type:uint8_t)
 |  
 |  data64_encode(self, type, len, data)
 |      Data packet, size 64.
 |      
 |      type                      : Data type. (type:uint8_t)
 |      len                       : Data length. [bytes] (type:uint8_t)
 |      data                      : Raw data. (type:uint8_t)
 |  
 |  data64_send(self, type, len, data, force_mavlink1=False)
 |      Data packet, size 64.
 |      
 |      type                      : Data type. (type:uint8_t)
 |      len                       : Data length. [bytes] (type:uint8_t)
 |      data                      : Raw data. (type:uint8_t)
 |  
 |  data96_encode(self, type, len, data)
 |      Data packet, size 96.
 |      
 |      type                      : Data type. (type:uint8_t)
 |      len                       : Data length. [bytes] (type:uint8_t)
 |      data                      : Raw data. (type:uint8_t)
 |  
 |  data96_send(self, type, len, data, force_mavlink1=False)
 |      Data packet, size 96.
 |      
 |      type                      : Data type. (type:uint8_t)
 |      len                       : Data length. [bytes] (type:uint8_t)
 |      data                      : Raw data. (type:uint8_t)
 |  
 |  data_stream_encode(self, stream_id, message_rate, on_off)
 |      Data stream status information.
 |      
 |      stream_id                 : The ID of the requested data stream (type:uint8_t)
 |      message_rate              : The message rate [Hz] (type:uint16_t)
 |      on_off                    : 1 stream is enabled, 0 stream is stopped. (type:uint8_t)
 |  
 |  data_stream_send(self, stream_id, message_rate, on_off, force_mavlink1=False)
 |      Data stream status information.
 |      
 |      stream_id                 : The ID of the requested data stream (type:uint8_t)
 |      message_rate              : The message rate [Hz] (type:uint16_t)
 |      on_off                    : 1 stream is enabled, 0 stream is stopped. (type:uint8_t)
 |  
 |  data_transmission_handshake_encode(self, type, size, width, height, packets, payload, jpg_quality)
 |      Handshake message to initiate, control and stop image streaming when
 |      using the Image Transmission Protocol: https://mavlink
 |      .io/en/services/image_transmission.html.
 |      
 |      type                      : Type of requested/acknowledged data. (type:uint8_t, values:MAVLINK_DATA_STREAM_TYPE)
 |      size                      : total data size (set on ACK only). [bytes] (type:uint32_t)
 |      width                     : Width of a matrix or image. (type:uint16_t)
 |      height                    : Height of a matrix or image. (type:uint16_t)
 |      packets                   : Number of packets being sent (set on ACK only). (type:uint16_t)
 |      payload                   : Payload size per packet (normally 253 byte, see DATA field size in message ENCAPSULATED_DATA) (set on ACK only). [bytes] (type:uint8_t)
 |      jpg_quality               : JPEG quality. Values: [1-100]. [%] (type:uint8_t)
 |  
 |  data_transmission_handshake_send(self, type, size, width, height, packets, payload, jpg_quality, force_mavlink1=False)
 |      Handshake message to initiate, control and stop image streaming when
 |      using the Image Transmission Protocol: https://mavlink
 |      .io/en/services/image_transmission.html.
 |      
 |      type                      : Type of requested/acknowledged data. (type:uint8_t, values:MAVLINK_DATA_STREAM_TYPE)
 |      size                      : total data size (set on ACK only). [bytes] (type:uint32_t)
 |      width                     : Width of a matrix or image. (type:uint16_t)
 |      height                    : Height of a matrix or image. (type:uint16_t)
 |      packets                   : Number of packets being sent (set on ACK only). (type:uint16_t)
 |      payload                   : Payload size per packet (normally 253 byte, see DATA field size in message ENCAPSULATED_DATA) (set on ACK only). [bytes] (type:uint8_t)
 |      jpg_quality               : JPEG quality. Values: [1-100]. [%] (type:uint8_t)
 |  
 |  debug_encode(self, time_boot_ms, ind, value)
 |      Send a debug value. The index is used to discriminate between values.
 |      These values show up in the plot of QGroundControl as
 |      DEBUG N.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      ind                       : index of debug variable (type:uint8_t)
 |      value                     : DEBUG value (type:float)
 |  
 |  debug_float_array_encode(self, time_usec, name, array_id, data=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
 |      Large debug/prototyping array. The message uses the maximum available
 |      payload for data. The array_id and name fields are
 |      used to discriminate between messages in code and in
 |      user interfaces (respectively). Do not use in
 |      production code.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      name                      : Name, for human-friendly display in a Ground Control Station (type:char)
 |      array_id                  : Unique ID used to discriminate between arrays (type:uint16_t)
 |      data                      : data (type:float)
 |  
 |  debug_float_array_send(self, time_usec, name, array_id, data=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], force_mavlink1=False)
 |      Large debug/prototyping array. The message uses the maximum available
 |      payload for data. The array_id and name fields are
 |      used to discriminate between messages in code and in
 |      user interfaces (respectively). Do not use in
 |      production code.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      name                      : Name, for human-friendly display in a Ground Control Station (type:char)
 |      array_id                  : Unique ID used to discriminate between arrays (type:uint16_t)
 |      data                      : data (type:float)
 |  
 |  debug_send(self, time_boot_ms, ind, value, force_mavlink1=False)
 |      Send a debug value. The index is used to discriminate between values.
 |      These values show up in the plot of QGroundControl as
 |      DEBUG N.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      ind                       : index of debug variable (type:uint8_t)
 |      value                     : DEBUG value (type:float)
 |  
 |  debug_vect_encode(self, name, time_usec, x, y, z)
 |      To debug something using a named 3D vector.
 |      
 |      name                      : Name (type:char)
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      x                         : x (type:float)
 |      y                         : y (type:float)
 |      z                         : z (type:float)
 |  
 |  debug_vect_send(self, name, time_usec, x, y, z, force_mavlink1=False)
 |      To debug something using a named 3D vector.
 |      
 |      name                      : Name (type:char)
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      x                         : x (type:float)
 |      y                         : y (type:float)
 |      z                         : z (type:float)
 |  
 |  decode(self, msgbuf)
 |      decode a buffer as a MAVLink message
 |  
 |  deepstall_encode(self, landing_lat, landing_lon, path_lat, path_lon, arc_entry_lat, arc_entry_lon, altitude, expected_travel_distance, cross_track_error, stage)
 |      Deepstall path planning.
 |      
 |      landing_lat               : Landing latitude. [degE7] (type:int32_t)
 |      landing_lon               : Landing longitude. [degE7] (type:int32_t)
 |      path_lat                  : Final heading start point, latitude. [degE7] (type:int32_t)
 |      path_lon                  : Final heading start point, longitude. [degE7] (type:int32_t)
 |      arc_entry_lat             : Arc entry point, latitude. [degE7] (type:int32_t)
 |      arc_entry_lon             : Arc entry point, longitude. [degE7] (type:int32_t)
 |      altitude                  : Altitude. [m] (type:float)
 |      expected_travel_distance        : Distance the aircraft expects to travel during the deepstall. [m] (type:float)
 |      cross_track_error         : Deepstall cross track error (only valid when in DEEPSTALL_STAGE_LAND). [m] (type:float)
 |      stage                     : Deepstall stage. (type:uint8_t, values:DEEPSTALL_STAGE)
 |  
 |  deepstall_send(self, landing_lat, landing_lon, path_lat, path_lon, arc_entry_lat, arc_entry_lon, altitude, expected_travel_distance, cross_track_error, stage, force_mavlink1=False)
 |      Deepstall path planning.
 |      
 |      landing_lat               : Landing latitude. [degE7] (type:int32_t)
 |      landing_lon               : Landing longitude. [degE7] (type:int32_t)
 |      path_lat                  : Final heading start point, latitude. [degE7] (type:int32_t)
 |      path_lon                  : Final heading start point, longitude. [degE7] (type:int32_t)
 |      arc_entry_lat             : Arc entry point, latitude. [degE7] (type:int32_t)
 |      arc_entry_lon             : Arc entry point, longitude. [degE7] (type:int32_t)
 |      altitude                  : Altitude. [m] (type:float)
 |      expected_travel_distance        : Distance the aircraft expects to travel during the deepstall. [m] (type:float)
 |      cross_track_error         : Deepstall cross track error (only valid when in DEEPSTALL_STAGE_LAND). [m] (type:float)
 |      stage                     : Deepstall stage. (type:uint8_t, values:DEEPSTALL_STAGE)
 |  
 |  device_op_read_encode(self, target_system, target_component, request_id, bustype, bus, address, busname, regstart, count)
 |      Read registers for a device.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      request_id                : Request ID - copied to reply. (type:uint32_t)
 |      bustype                   : The bus type. (type:uint8_t, values:DEVICE_OP_BUSTYPE)
 |      bus                       : Bus number. (type:uint8_t)
 |      address                   : Bus address. (type:uint8_t)
 |      busname                   : Name of device on bus (for SPI). (type:char)
 |      regstart                  : First register to read. (type:uint8_t)
 |      count                     : Count of registers to read. (type:uint8_t)
 |  
 |  device_op_read_reply_encode(self, request_id, result, regstart, count, data)
 |      Read registers reply.
 |      
 |      request_id                : Request ID - copied from request. (type:uint32_t)
 |      result                    : 0 for success, anything else is failure code. (type:uint8_t)
 |      regstart                  : Starting register. (type:uint8_t)
 |      count                     : Count of bytes read. (type:uint8_t)
 |      data                      : Reply data. (type:uint8_t)
 |  
 |  device_op_read_reply_send(self, request_id, result, regstart, count, data, force_mavlink1=False)
 |      Read registers reply.
 |      
 |      request_id                : Request ID - copied from request. (type:uint32_t)
 |      result                    : 0 for success, anything else is failure code. (type:uint8_t)
 |      regstart                  : Starting register. (type:uint8_t)
 |      count                     : Count of bytes read. (type:uint8_t)
 |      data                      : Reply data. (type:uint8_t)
 |  
 |  device_op_read_send(self, target_system, target_component, request_id, bustype, bus, address, busname, regstart, count, force_mavlink1=False)
 |      Read registers for a device.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      request_id                : Request ID - copied to reply. (type:uint32_t)
 |      bustype                   : The bus type. (type:uint8_t, values:DEVICE_OP_BUSTYPE)
 |      bus                       : Bus number. (type:uint8_t)
 |      address                   : Bus address. (type:uint8_t)
 |      busname                   : Name of device on bus (for SPI). (type:char)
 |      regstart                  : First register to read. (type:uint8_t)
 |      count                     : Count of registers to read. (type:uint8_t)
 |  
 |  device_op_write_encode(self, target_system, target_component, request_id, bustype, bus, address, busname, regstart, count, data)
 |      Write registers for a device.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      request_id                : Request ID - copied to reply. (type:uint32_t)
 |      bustype                   : The bus type. (type:uint8_t, values:DEVICE_OP_BUSTYPE)
 |      bus                       : Bus number. (type:uint8_t)
 |      address                   : Bus address. (type:uint8_t)
 |      busname                   : Name of device on bus (for SPI). (type:char)
 |      regstart                  : First register to write. (type:uint8_t)
 |      count                     : Count of registers to write. (type:uint8_t)
 |      data                      : Write data. (type:uint8_t)
 |  
 |  device_op_write_reply_encode(self, request_id, result)
 |      Write registers reply.
 |      
 |      request_id                : Request ID - copied from request. (type:uint32_t)
 |      result                    : 0 for success, anything else is failure code. (type:uint8_t)
 |  
 |  device_op_write_reply_send(self, request_id, result, force_mavlink1=False)
 |      Write registers reply.
 |      
 |      request_id                : Request ID - copied from request. (type:uint32_t)
 |      result                    : 0 for success, anything else is failure code. (type:uint8_t)
 |  
 |  device_op_write_send(self, target_system, target_component, request_id, bustype, bus, address, busname, regstart, count, data, force_mavlink1=False)
 |      Write registers for a device.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      request_id                : Request ID - copied to reply. (type:uint32_t)
 |      bustype                   : The bus type. (type:uint8_t, values:DEVICE_OP_BUSTYPE)
 |      bus                       : Bus number. (type:uint8_t)
 |      address                   : Bus address. (type:uint8_t)
 |      busname                   : Name of device on bus (for SPI). (type:char)
 |      regstart                  : First register to write. (type:uint8_t)
 |      count                     : Count of registers to write. (type:uint8_t)
 |      data                      : Write data. (type:uint8_t)
 |  
 |  digicam_configure_encode(self, target_system, target_component, mode, shutter_speed, aperture, iso, exposure_type, command_id, engine_cut_off, extra_param, extra_value)
 |      Configure on-board Camera Control System.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      mode                      : Mode enumeration from 1 to N //P, TV, AV, M, etc. (0 means ignore). (type:uint8_t)
 |      shutter_speed             : Divisor number //e.g. 1000 means 1/1000 (0 means ignore). (type:uint16_t)
 |      aperture                  : F stop number x 10 //e.g. 28 means 2.8 (0 means ignore). (type:uint8_t)
 |      iso                       : ISO enumeration from 1 to N //e.g. 80, 100, 200, Etc (0 means ignore). (type:uint8_t)
 |      exposure_type             : Exposure type enumeration from 1 to N (0 means ignore). (type:uint8_t)
 |      command_id                : Command Identity (incremental loop: 0 to 255). //A command sent multiple times will be executed or pooled just once. (type:uint8_t)
 |      engine_cut_off            : Main engine cut-off time before camera trigger (0 means no cut-off). [ds] (type:uint8_t)
 |      extra_param               : Extra parameters enumeration (0 means ignore). (type:uint8_t)
 |      extra_value               : Correspondent value to given extra_param. (type:float)
 |  
 |  digicam_configure_send(self, target_system, target_component, mode, shutter_speed, aperture, iso, exposure_type, command_id, engine_cut_off, extra_param, extra_value, force_mavlink1=False)
 |      Configure on-board Camera Control System.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      mode                      : Mode enumeration from 1 to N //P, TV, AV, M, etc. (0 means ignore). (type:uint8_t)
 |      shutter_speed             : Divisor number //e.g. 1000 means 1/1000 (0 means ignore). (type:uint16_t)
 |      aperture                  : F stop number x 10 //e.g. 28 means 2.8 (0 means ignore). (type:uint8_t)
 |      iso                       : ISO enumeration from 1 to N //e.g. 80, 100, 200, Etc (0 means ignore). (type:uint8_t)
 |      exposure_type             : Exposure type enumeration from 1 to N (0 means ignore). (type:uint8_t)
 |      command_id                : Command Identity (incremental loop: 0 to 255). //A command sent multiple times will be executed or pooled just once. (type:uint8_t)
 |      engine_cut_off            : Main engine cut-off time before camera trigger (0 means no cut-off). [ds] (type:uint8_t)
 |      extra_param               : Extra parameters enumeration (0 means ignore). (type:uint8_t)
 |      extra_value               : Correspondent value to given extra_param. (type:float)
 |  
 |  digicam_control_encode(self, target_system, target_component, session, zoom_pos, zoom_step, focus_lock, shot, command_id, extra_param, extra_value)
 |      Control on-board Camera Control System to take shots.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      session                   : 0: stop, 1: start or keep it up //Session control e.g. show/hide lens. (type:uint8_t)
 |      zoom_pos                  : 1 to N //Zoom's absolute position (0 means ignore). (type:uint8_t)
 |      zoom_step                 : -100 to 100 //Zooming step value to offset zoom from the current position. (type:int8_t)
 |      focus_lock                : 0: unlock focus or keep unlocked, 1: lock focus or keep locked, 3: re-lock focus. (type:uint8_t)
 |      shot                      : 0: ignore, 1: shot or start filming. (type:uint8_t)
 |      command_id                : Command Identity (incremental loop: 0 to 255)//A command sent multiple times will be executed or pooled just once. (type:uint8_t)
 |      extra_param               : Extra parameters enumeration (0 means ignore). (type:uint8_t)
 |      extra_value               : Correspondent value to given extra_param. (type:float)
 |  
 |  digicam_control_send(self, target_system, target_component, session, zoom_pos, zoom_step, focus_lock, shot, command_id, extra_param, extra_value, force_mavlink1=False)
 |      Control on-board Camera Control System to take shots.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      session                   : 0: stop, 1: start or keep it up //Session control e.g. show/hide lens. (type:uint8_t)
 |      zoom_pos                  : 1 to N //Zoom's absolute position (0 means ignore). (type:uint8_t)
 |      zoom_step                 : -100 to 100 //Zooming step value to offset zoom from the current position. (type:int8_t)
 |      focus_lock                : 0: unlock focus or keep unlocked, 1: lock focus or keep locked, 3: re-lock focus. (type:uint8_t)
 |      shot                      : 0: ignore, 1: shot or start filming. (type:uint8_t)
 |      command_id                : Command Identity (incremental loop: 0 to 255)//A command sent multiple times will be executed or pooled just once. (type:uint8_t)
 |      extra_param               : Extra parameters enumeration (0 means ignore). (type:uint8_t)
 |      extra_value               : Correspondent value to given extra_param. (type:float)
 |  
 |  distance_sensor_encode(self, time_boot_ms, min_distance, max_distance, current_distance, type, id, orientation, covariance, horizontal_fov=0, vertical_fov=0, quaternion=[0, 0, 0, 0])
 |      Distance sensor information for an onboard rangefinder.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      min_distance              : Minimum distance the sensor can measure [cm] (type:uint16_t)
 |      max_distance              : Maximum distance the sensor can measure [cm] (type:uint16_t)
 |      current_distance          : Current distance reading [cm] (type:uint16_t)
 |      type                      : Type of distance sensor. (type:uint8_t, values:MAV_DISTANCE_SENSOR)
 |      id                        : Onboard ID of the sensor (type:uint8_t)
 |      orientation               : Direction the sensor faces. downward-facing: ROTATION_PITCH_270, upward-facing: ROTATION_PITCH_90, backward-facing: ROTATION_PITCH_180, forward-facing: ROTATION_NONE, left-facing: ROTATION_YAW_90, right-facing: ROTATION_YAW_270 (type:uint8_t, values:MAV_SENSOR_ORIENTATION)
 |      covariance                : Measurement variance. Max standard deviation is 6cm. 255 if unknown. [cm^2] (type:uint8_t)
 |      horizontal_fov            : Horizontal Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0. [rad] (type:float)
 |      vertical_fov              : Vertical Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0. [rad] (type:float)
 |      quaternion                : Quaternion of the sensor orientation in vehicle body frame (w, x, y, z order, zero-rotation is 1, 0, 0, 0). Zero-rotation is along the vehicle body x-axis. This field is required if the orientation is set to MAV_SENSOR_ROTATION_CUSTOM. Set it to 0 if invalid." (type:float)
 |  
 |  distance_sensor_send(self, time_boot_ms, min_distance, max_distance, current_distance, type, id, orientation, covariance, horizontal_fov=0, vertical_fov=0, quaternion=[0, 0, 0, 0], force_mavlink1=False)
 |      Distance sensor information for an onboard rangefinder.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      min_distance              : Minimum distance the sensor can measure [cm] (type:uint16_t)
 |      max_distance              : Maximum distance the sensor can measure [cm] (type:uint16_t)
 |      current_distance          : Current distance reading [cm] (type:uint16_t)
 |      type                      : Type of distance sensor. (type:uint8_t, values:MAV_DISTANCE_SENSOR)
 |      id                        : Onboard ID of the sensor (type:uint8_t)
 |      orientation               : Direction the sensor faces. downward-facing: ROTATION_PITCH_270, upward-facing: ROTATION_PITCH_90, backward-facing: ROTATION_PITCH_180, forward-facing: ROTATION_NONE, left-facing: ROTATION_YAW_90, right-facing: ROTATION_YAW_270 (type:uint8_t, values:MAV_SENSOR_ORIENTATION)
 |      covariance                : Measurement variance. Max standard deviation is 6cm. 255 if unknown. [cm^2] (type:uint8_t)
 |      horizontal_fov            : Horizontal Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0. [rad] (type:float)
 |      vertical_fov              : Vertical Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0. [rad] (type:float)
 |      quaternion                : Quaternion of the sensor orientation in vehicle body frame (w, x, y, z order, zero-rotation is 1, 0, 0, 0). Zero-rotation is along the vehicle body x-axis. This field is required if the orientation is set to MAV_SENSOR_ROTATION_CUSTOM. Set it to 0 if invalid." (type:float)
 |  
 |  efi_status_encode(self, health, ecu_index, rpm, fuel_consumed, fuel_flow, engine_load, throttle_position, spark_dwell_time, barometric_pressure, intake_manifold_pressure, intake_manifold_temperature, cylinder_head_temperature, ignition_timing, injection_time, exhaust_gas_temperature=0, throttle_out=0, pt_compensation=0)
 |      EFI Status Output
 |      
 |      health                    : EFI Health status (type:uint8_t)
 |      ecu_index                 : ECU Index (type:float)
 |      rpm                       : RPM (type:float)
 |      fuel_consumed             : Fuel Consumed [g] (type:float)
 |      fuel_flow                 : Fuel Flow Rate [g/min] (type:float)
 |      engine_load               : Engine Load [%] (type:float)
 |      throttle_position         : Throttle Position [%] (type:float)
 |      spark_dwell_time          : Spark Dwell Time [ms] (type:float)
 |      barometric_pressure        : Barometric Pressure [kPa] (type:float)
 |      intake_manifold_pressure        : Intake Manifold Pressure( [kPa] (type:float)
 |      intake_manifold_temperature        : Intake Manifold Temperature [degC] (type:float)
 |      cylinder_head_temperature        : cylinder_head_temperature [degC] (type:float)
 |      ignition_timing           : Ignition timing (Crank Angle degrees) [deg] (type:float)
 |      injection_time            : Injection time [ms] (type:float)
 |      exhaust_gas_temperature        : exhaust gas temperature [degC] (type:float)
 |      throttle_out              : output throttle [%] (type:float)
 |      pt_compensation           : pressure/temperature compensation (type:float)
 |  
 |  efi_status_send(self, health, ecu_index, rpm, fuel_consumed, fuel_flow, engine_load, throttle_position, spark_dwell_time, barometric_pressure, intake_manifold_pressure, intake_manifold_temperature, cylinder_head_temperature, ignition_timing, injection_time, exhaust_gas_temperature=0, throttle_out=0, pt_compensation=0, force_mavlink1=False)
 |      EFI Status Output
 |      
 |      health                    : EFI Health status (type:uint8_t)
 |      ecu_index                 : ECU Index (type:float)
 |      rpm                       : RPM (type:float)
 |      fuel_consumed             : Fuel Consumed [g] (type:float)
 |      fuel_flow                 : Fuel Flow Rate [g/min] (type:float)
 |      engine_load               : Engine Load [%] (type:float)
 |      throttle_position         : Throttle Position [%] (type:float)
 |      spark_dwell_time          : Spark Dwell Time [ms] (type:float)
 |      barometric_pressure        : Barometric Pressure [kPa] (type:float)
 |      intake_manifold_pressure        : Intake Manifold Pressure( [kPa] (type:float)
 |      intake_manifold_temperature        : Intake Manifold Temperature [degC] (type:float)
 |      cylinder_head_temperature        : cylinder_head_temperature [degC] (type:float)
 |      ignition_timing           : Ignition timing (Crank Angle degrees) [deg] (type:float)
 |      injection_time            : Injection time [ms] (type:float)
 |      exhaust_gas_temperature        : exhaust gas temperature [degC] (type:float)
 |      throttle_out              : output throttle [%] (type:float)
 |      pt_compensation           : pressure/temperature compensation (type:float)
 |  
 |  ekf_status_report_encode(self, flags, velocity_variance, pos_horiz_variance, pos_vert_variance, compass_variance, terrain_alt_variance, airspeed_variance=0)
 |      EKF Status message including flags and variances.
 |      
 |      flags                     : Flags. (type:uint16_t, values:EKF_STATUS_FLAGS)
 |      velocity_variance         : Velocity variance. (type:float)
 |      pos_horiz_variance        : Horizontal Position variance. (type:float)
 |      pos_vert_variance         : Vertical Position variance. (type:float)
 |      compass_variance          : Compass variance. (type:float)
 |      terrain_alt_variance        : Terrain Altitude variance. (type:float)
 |      airspeed_variance         : Airspeed variance. (type:float)
 |  
 |  ekf_status_report_send(self, flags, velocity_variance, pos_horiz_variance, pos_vert_variance, compass_variance, terrain_alt_variance, airspeed_variance=0, force_mavlink1=False)
 |      EKF Status message including flags and variances.
 |      
 |      flags                     : Flags. (type:uint16_t, values:EKF_STATUS_FLAGS)
 |      velocity_variance         : Velocity variance. (type:float)
 |      pos_horiz_variance        : Horizontal Position variance. (type:float)
 |      pos_vert_variance         : Vertical Position variance. (type:float)
 |      compass_variance          : Compass variance. (type:float)
 |      terrain_alt_variance        : Terrain Altitude variance. (type:float)
 |      airspeed_variance         : Airspeed variance. (type:float)
 |  
 |  encapsulated_data_encode(self, seqnr, data)
 |      Data packet for images sent using the Image Transmission Protocol:
 |      https://mavlink.io/en/services/image_transmission.html
 |      .
 |      
 |      seqnr                     : sequence number (starting with 0 on every transmission) (type:uint16_t)
 |      data                      : image data bytes (type:uint8_t)
 |  
 |  encapsulated_data_send(self, seqnr, data, force_mavlink1=False)
 |      Data packet for images sent using the Image Transmission Protocol:
 |      https://mavlink.io/en/services/image_transmission.html
 |      .
 |      
 |      seqnr                     : sequence number (starting with 0 on every transmission) (type:uint16_t)
 |      data                      : image data bytes (type:uint8_t)
 |  
 |  esc_telemetry_1_to_4_encode(self, temperature, voltage, current, totalcurrent, rpm, count)
 |      ESC Telemetry Data for ESCs 1 to 4, matching data sent by BLHeli ESCs.
 |      
 |      temperature               : Temperature. [degC] (type:uint8_t)
 |      voltage                   : Voltage. [cV] (type:uint16_t)
 |      current                   : Current. [cA] (type:uint16_t)
 |      totalcurrent              : Total current. [mAh] (type:uint16_t)
 |      rpm                       : RPM (eRPM). [rpm] (type:uint16_t)
 |      count                     : count of telemetry packets received (wraps at 65535). (type:uint16_t)
 |  
 |  esc_telemetry_1_to_4_send(self, temperature, voltage, current, totalcurrent, rpm, count, force_mavlink1=False)
 |      ESC Telemetry Data for ESCs 1 to 4, matching data sent by BLHeli ESCs.
 |      
 |      temperature               : Temperature. [degC] (type:uint8_t)
 |      voltage                   : Voltage. [cV] (type:uint16_t)
 |      current                   : Current. [cA] (type:uint16_t)
 |      totalcurrent              : Total current. [mAh] (type:uint16_t)
 |      rpm                       : RPM (eRPM). [rpm] (type:uint16_t)
 |      count                     : count of telemetry packets received (wraps at 65535). (type:uint16_t)
 |  
 |  esc_telemetry_5_to_8_encode(self, temperature, voltage, current, totalcurrent, rpm, count)
 |      ESC Telemetry Data for ESCs 5 to 8, matching data sent by BLHeli ESCs.
 |      
 |      temperature               : Temperature. [degC] (type:uint8_t)
 |      voltage                   : Voltage. [cV] (type:uint16_t)
 |      current                   : Current. [cA] (type:uint16_t)
 |      totalcurrent              : Total current. [mAh] (type:uint16_t)
 |      rpm                       : RPM (eRPM). [rpm] (type:uint16_t)
 |      count                     : count of telemetry packets received (wraps at 65535). (type:uint16_t)
 |  
 |  esc_telemetry_5_to_8_send(self, temperature, voltage, current, totalcurrent, rpm, count, force_mavlink1=False)
 |      ESC Telemetry Data for ESCs 5 to 8, matching data sent by BLHeli ESCs.
 |      
 |      temperature               : Temperature. [degC] (type:uint8_t)
 |      voltage                   : Voltage. [cV] (type:uint16_t)
 |      current                   : Current. [cA] (type:uint16_t)
 |      totalcurrent              : Total current. [mAh] (type:uint16_t)
 |      rpm                       : RPM (eRPM). [rpm] (type:uint16_t)
 |      count                     : count of telemetry packets received (wraps at 65535). (type:uint16_t)
 |  
 |  esc_telemetry_9_to_12_encode(self, temperature, voltage, current, totalcurrent, rpm, count)
 |      ESC Telemetry Data for ESCs 9 to 12, matching data sent by BLHeli
 |      ESCs.
 |      
 |      temperature               : Temperature. [degC] (type:uint8_t)
 |      voltage                   : Voltage. [cV] (type:uint16_t)
 |      current                   : Current. [cA] (type:uint16_t)
 |      totalcurrent              : Total current. [mAh] (type:uint16_t)
 |      rpm                       : RPM (eRPM). [rpm] (type:uint16_t)
 |      count                     : count of telemetry packets received (wraps at 65535). (type:uint16_t)
 |  
 |  esc_telemetry_9_to_12_send(self, temperature, voltage, current, totalcurrent, rpm, count, force_mavlink1=False)
 |      ESC Telemetry Data for ESCs 9 to 12, matching data sent by BLHeli
 |      ESCs.
 |      
 |      temperature               : Temperature. [degC] (type:uint8_t)
 |      voltage                   : Voltage. [cV] (type:uint16_t)
 |      current                   : Current. [cA] (type:uint16_t)
 |      totalcurrent              : Total current. [mAh] (type:uint16_t)
 |      rpm                       : RPM (eRPM). [rpm] (type:uint16_t)
 |      count                     : count of telemetry packets received (wraps at 65535). (type:uint16_t)
 |  
 |  estimator_status_encode(self, time_usec, flags, vel_ratio, pos_horiz_ratio, pos_vert_ratio, mag_ratio, hagl_ratio, tas_ratio, pos_horiz_accuracy, pos_vert_accuracy)
 |      Estimator status message including flags, innovation test ratios and
 |      estimated accuracies. The flags message is an integer
 |      bitmask containing information on which EKF outputs
 |      are valid. See the ESTIMATOR_STATUS_FLAGS enum
 |      definition for further information. The innovation
 |      test ratios show the magnitude of the sensor
 |      innovation divided by the innovation check threshold.
 |      Under normal operation the innovation test ratios
 |      should be below 0.5 with occasional values up to 1.0.
 |      Values greater than 1.0 should be rare under normal
 |      operation and indicate that a measurement has been
 |      rejected by the filter. The user should be notified if
 |      an innovation test ratio greater than 1.0 is recorded.
 |      Notifications for values in the range between 0.5 and
 |      1.0 should be optional and controllable by the user.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      flags                     : Bitmap indicating which EKF outputs are valid. (type:uint16_t, values:ESTIMATOR_STATUS_FLAGS)
 |      vel_ratio                 : Velocity innovation test ratio (type:float)
 |      pos_horiz_ratio           : Horizontal position innovation test ratio (type:float)
 |      pos_vert_ratio            : Vertical position innovation test ratio (type:float)
 |      mag_ratio                 : Magnetometer innovation test ratio (type:float)
 |      hagl_ratio                : Height above terrain innovation test ratio (type:float)
 |      tas_ratio                 : True airspeed innovation test ratio (type:float)
 |      pos_horiz_accuracy        : Horizontal position 1-STD accuracy relative to the EKF local origin [m] (type:float)
 |      pos_vert_accuracy         : Vertical position 1-STD accuracy relative to the EKF local origin [m] (type:float)
 |  
 |  estimator_status_send(self, time_usec, flags, vel_ratio, pos_horiz_ratio, pos_vert_ratio, mag_ratio, hagl_ratio, tas_ratio, pos_horiz_accuracy, pos_vert_accuracy, force_mavlink1=False)
 |      Estimator status message including flags, innovation test ratios and
 |      estimated accuracies. The flags message is an integer
 |      bitmask containing information on which EKF outputs
 |      are valid. See the ESTIMATOR_STATUS_FLAGS enum
 |      definition for further information. The innovation
 |      test ratios show the magnitude of the sensor
 |      innovation divided by the innovation check threshold.
 |      Under normal operation the innovation test ratios
 |      should be below 0.5 with occasional values up to 1.0.
 |      Values greater than 1.0 should be rare under normal
 |      operation and indicate that a measurement has been
 |      rejected by the filter. The user should be notified if
 |      an innovation test ratio greater than 1.0 is recorded.
 |      Notifications for values in the range between 0.5 and
 |      1.0 should be optional and controllable by the user.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      flags                     : Bitmap indicating which EKF outputs are valid. (type:uint16_t, values:ESTIMATOR_STATUS_FLAGS)
 |      vel_ratio                 : Velocity innovation test ratio (type:float)
 |      pos_horiz_ratio           : Horizontal position innovation test ratio (type:float)
 |      pos_vert_ratio            : Vertical position innovation test ratio (type:float)
 |      mag_ratio                 : Magnetometer innovation test ratio (type:float)
 |      hagl_ratio                : Height above terrain innovation test ratio (type:float)
 |      tas_ratio                 : True airspeed innovation test ratio (type:float)
 |      pos_horiz_accuracy        : Horizontal position 1-STD accuracy relative to the EKF local origin [m] (type:float)
 |      pos_vert_accuracy         : Vertical position 1-STD accuracy relative to the EKF local origin [m] (type:float)
 |  
 |  extended_sys_state_encode(self, vtol_state, landed_state)
 |      Provides state for additional features
 |      
 |      vtol_state                : The VTOL state if applicable. Is set to MAV_VTOL_STATE_UNDEFINED if UAV is not in VTOL configuration. (type:uint8_t, values:MAV_VTOL_STATE)
 |      landed_state              : The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown. (type:uint8_t, values:MAV_LANDED_STATE)
 |  
 |  extended_sys_state_send(self, vtol_state, landed_state, force_mavlink1=False)
 |      Provides state for additional features
 |      
 |      vtol_state                : The VTOL state if applicable. Is set to MAV_VTOL_STATE_UNDEFINED if UAV is not in VTOL configuration. (type:uint8_t, values:MAV_VTOL_STATE)
 |      landed_state              : The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown. (type:uint8_t, values:MAV_LANDED_STATE)
 |  
 |  fence_fetch_point_encode(self, target_system, target_component, idx)
 |      Request a current fence point from MAV.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      idx                       : Point index (first point is 1, 0 is for return point). (type:uint8_t)
 |  
 |  fence_fetch_point_send(self, target_system, target_component, idx, force_mavlink1=False)
 |      Request a current fence point from MAV.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      idx                       : Point index (first point is 1, 0 is for return point). (type:uint8_t)
 |  
 |  fence_point_encode(self, target_system, target_component, idx, count, lat, lng)
 |      A fence point. Used to set a point when from GCS -> MAV. Also used to
 |      return a point from MAV -> GCS.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      idx                       : Point index (first point is 1, 0 is for return point). (type:uint8_t)
 |      count                     : Total number of points (for sanity checking). (type:uint8_t)
 |      lat                       : Latitude of point. [deg] (type:float)
 |      lng                       : Longitude of point. [deg] (type:float)
 |  
 |  fence_point_send(self, target_system, target_component, idx, count, lat, lng, force_mavlink1=False)
 |      A fence point. Used to set a point when from GCS -> MAV. Also used to
 |      return a point from MAV -> GCS.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      idx                       : Point index (first point is 1, 0 is for return point). (type:uint8_t)
 |      count                     : Total number of points (for sanity checking). (type:uint8_t)
 |      lat                       : Latitude of point. [deg] (type:float)
 |      lng                       : Longitude of point. [deg] (type:float)
 |  
 |  fence_status_encode(self, breach_status, breach_count, breach_type, breach_time, breach_mitigation=0)
 |      Status of geo-fencing. Sent in extended status stream when fencing
 |      enabled.
 |      
 |      breach_status             : Breach status (0 if currently inside fence, 1 if outside). (type:uint8_t)
 |      breach_count              : Number of fence breaches. (type:uint16_t)
 |      breach_type               : Last breach type. (type:uint8_t, values:FENCE_BREACH)
 |      breach_time               : Time (since boot) of last breach. [ms] (type:uint32_t)
 |      breach_mitigation         : Active action to prevent fence breach (type:uint8_t, values:FENCE_MITIGATE)
 |  
 |  fence_status_send(self, breach_status, breach_count, breach_type, breach_time, breach_mitigation=0, force_mavlink1=False)
 |      Status of geo-fencing. Sent in extended status stream when fencing
 |      enabled.
 |      
 |      breach_status             : Breach status (0 if currently inside fence, 1 if outside). (type:uint8_t)
 |      breach_count              : Number of fence breaches. (type:uint16_t)
 |      breach_type               : Last breach type. (type:uint8_t, values:FENCE_BREACH)
 |      breach_time               : Time (since boot) of last breach. [ms] (type:uint32_t)
 |      breach_mitigation         : Active action to prevent fence breach (type:uint8_t, values:FENCE_MITIGATE)
 |  
 |  file_transfer_protocol_encode(self, target_network, target_system, target_component, payload)
 |      File transfer message
 |      
 |      target_network            : Network ID (0 for broadcast) (type:uint8_t)
 |      target_system             : System ID (0 for broadcast) (type:uint8_t)
 |      target_component          : Component ID (0 for broadcast) (type:uint8_t)
 |      payload                   : Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as part of the mavlink specification. (type:uint8_t)
 |  
 |  file_transfer_protocol_send(self, target_network, target_system, target_component, payload, force_mavlink1=False)
 |      File transfer message
 |      
 |      target_network            : Network ID (0 for broadcast) (type:uint8_t)
 |      target_system             : System ID (0 for broadcast) (type:uint8_t)
 |      target_component          : Component ID (0 for broadcast) (type:uint8_t)
 |      payload                   : Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as part of the mavlink specification. (type:uint8_t)
 |  
 |  flight_information_encode(self, time_boot_ms, arming_time_utc, takeoff_time_utc, flight_uuid)
 |      Information about flight since last arming.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      arming_time_utc           : Timestamp at arming (time since UNIX epoch) in UTC, 0 for unknown [us] (type:uint64_t)
 |      takeoff_time_utc          : Timestamp at takeoff (time since UNIX epoch) in UTC, 0 for unknown [us] (type:uint64_t)
 |      flight_uuid               : Universally unique identifier (UUID) of flight, should correspond to name of log files (type:uint64_t)
 |  
 |  flight_information_send(self, time_boot_ms, arming_time_utc, takeoff_time_utc, flight_uuid, force_mavlink1=False)
 |      Information about flight since last arming.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      arming_time_utc           : Timestamp at arming (time since UNIX epoch) in UTC, 0 for unknown [us] (type:uint64_t)
 |      takeoff_time_utc          : Timestamp at takeoff (time since UNIX epoch) in UTC, 0 for unknown [us] (type:uint64_t)
 |      flight_uuid               : Universally unique identifier (UUID) of flight, should correspond to name of log files (type:uint64_t)
 |  
 |  follow_target_encode(self, timestamp, est_capabilities, lat, lon, alt, vel, acc, attitude_q, rates, position_cov, custom_state)
 |      Current motion information from a designated system
 |      
 |      timestamp                 : Timestamp (time since system boot). [ms] (type:uint64_t)
 |      est_capabilities          : bit positions for tracker reporting capabilities (POS = 0, VEL = 1, ACCEL = 2, ATT + RATES = 3) (type:uint8_t)
 |      lat                       : Latitude (WGS84) [degE7] (type:int32_t)
 |      lon                       : Longitude (WGS84) [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL) [m] (type:float)
 |      vel                       : target velocity (0,0,0) for unknown [m/s] (type:float)
 |      acc                       : linear target acceleration (0,0,0) for unknown [m/s/s] (type:float)
 |      attitude_q                : (1 0 0 0 for unknown) (type:float)
 |      rates                     : (0 0 0 for unknown) (type:float)
 |      position_cov              : eph epv (type:float)
 |      custom_state              : button states or switches of a tracker device (type:uint64_t)
 |  
 |  follow_target_send(self, timestamp, est_capabilities, lat, lon, alt, vel, acc, attitude_q, rates, position_cov, custom_state, force_mavlink1=False)
 |      Current motion information from a designated system
 |      
 |      timestamp                 : Timestamp (time since system boot). [ms] (type:uint64_t)
 |      est_capabilities          : bit positions for tracker reporting capabilities (POS = 0, VEL = 1, ACCEL = 2, ATT + RATES = 3) (type:uint8_t)
 |      lat                       : Latitude (WGS84) [degE7] (type:int32_t)
 |      lon                       : Longitude (WGS84) [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL) [m] (type:float)
 |      vel                       : target velocity (0,0,0) for unknown [m/s] (type:float)
 |      acc                       : linear target acceleration (0,0,0) for unknown [m/s/s] (type:float)
 |      attitude_q                : (1 0 0 0 for unknown) (type:float)
 |      rates                     : (0 0 0 for unknown) (type:float)
 |      position_cov              : eph epv (type:float)
 |      custom_state              : button states or switches of a tracker device (type:uint64_t)
 |  
 |  gimbal_control_encode(self, target_system, target_component, demanded_rate_x, demanded_rate_y, demanded_rate_z)
 |      Control message for rate gimbal.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      demanded_rate_x           : Demanded angular rate X. [rad/s] (type:float)
 |      demanded_rate_y           : Demanded angular rate Y. [rad/s] (type:float)
 |      demanded_rate_z           : Demanded angular rate Z. [rad/s] (type:float)
 |  
 |  gimbal_control_send(self, target_system, target_component, demanded_rate_x, demanded_rate_y, demanded_rate_z, force_mavlink1=False)
 |      Control message for rate gimbal.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      demanded_rate_x           : Demanded angular rate X. [rad/s] (type:float)
 |      demanded_rate_y           : Demanded angular rate Y. [rad/s] (type:float)
 |      demanded_rate_z           : Demanded angular rate Z. [rad/s] (type:float)
 |  
 |  gimbal_report_encode(self, target_system, target_component, delta_time, delta_angle_x, delta_angle_y, delta_angle_z, delta_velocity_x, delta_velocity_y, delta_velocity_z, joint_roll, joint_el, joint_az)
 |      3 axis gimbal measurements.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      delta_time                : Time since last update. [s] (type:float)
 |      delta_angle_x             : Delta angle X. [rad] (type:float)
 |      delta_angle_y             : Delta angle Y. [rad] (type:float)
 |      delta_angle_z             : Delta angle X. [rad] (type:float)
 |      delta_velocity_x          : Delta velocity X. [m/s] (type:float)
 |      delta_velocity_y          : Delta velocity Y. [m/s] (type:float)
 |      delta_velocity_z          : Delta velocity Z. [m/s] (type:float)
 |      joint_roll                : Joint ROLL. [rad] (type:float)
 |      joint_el                  : Joint EL. [rad] (type:float)
 |      joint_az                  : Joint AZ. [rad] (type:float)
 |  
 |  gimbal_report_send(self, target_system, target_component, delta_time, delta_angle_x, delta_angle_y, delta_angle_z, delta_velocity_x, delta_velocity_y, delta_velocity_z, joint_roll, joint_el, joint_az, force_mavlink1=False)
 |      3 axis gimbal measurements.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      delta_time                : Time since last update. [s] (type:float)
 |      delta_angle_x             : Delta angle X. [rad] (type:float)
 |      delta_angle_y             : Delta angle Y. [rad] (type:float)
 |      delta_angle_z             : Delta angle X. [rad] (type:float)
 |      delta_velocity_x          : Delta velocity X. [m/s] (type:float)
 |      delta_velocity_y          : Delta velocity Y. [m/s] (type:float)
 |      delta_velocity_z          : Delta velocity Z. [m/s] (type:float)
 |      joint_roll                : Joint ROLL. [rad] (type:float)
 |      joint_el                  : Joint EL. [rad] (type:float)
 |      joint_az                  : Joint AZ. [rad] (type:float)
 |  
 |  gimbal_torque_cmd_report_encode(self, target_system, target_component, rl_torque_cmd, el_torque_cmd, az_torque_cmd)
 |      100 Hz gimbal torque command telemetry.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      rl_torque_cmd             : Roll Torque Command. (type:int16_t)
 |      el_torque_cmd             : Elevation Torque Command. (type:int16_t)
 |      az_torque_cmd             : Azimuth Torque Command. (type:int16_t)
 |  
 |  gimbal_torque_cmd_report_send(self, target_system, target_component, rl_torque_cmd, el_torque_cmd, az_torque_cmd, force_mavlink1=False)
 |      100 Hz gimbal torque command telemetry.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      rl_torque_cmd             : Roll Torque Command. (type:int16_t)
 |      el_torque_cmd             : Elevation Torque Command. (type:int16_t)
 |      az_torque_cmd             : Azimuth Torque Command. (type:int16_t)
 |  
 |  global_position_int_cov_encode(self, time_usec, estimator_type, lat, lon, alt, relative_alt, vx, vy, vz, covariance)
 |      The filtered global position (e.g. fused GPS and accelerometers). The
 |      position is in GPS-frame (right-handed, Z-up). It  is
 |      designed as scaled integer message since the
 |      resolution of float is not sufficient. NOTE: This
 |      message is intended for onboard networks / companion
 |      computers and higher-bandwidth links and optimized for
 |      accuracy and completeness. Please use the
 |      GLOBAL_POSITION_INT message for a minimal subset.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      estimator_type            : Class id of the estimator this estimate originated from. (type:uint8_t, values:MAV_ESTIMATOR_TYPE)
 |      lat                       : Latitude [degE7] (type:int32_t)
 |      lon                       : Longitude [degE7] (type:int32_t)
 |      alt                       : Altitude in meters above MSL [mm] (type:int32_t)
 |      relative_alt              : Altitude above ground [mm] (type:int32_t)
 |      vx                        : Ground X Speed (Latitude) [m/s] (type:float)
 |      vy                        : Ground Y Speed (Longitude) [m/s] (type:float)
 |      vz                        : Ground Z Speed (Altitude) [m/s] (type:float)
 |      covariance                : Row-major representation of a 6x6 position and velocity 6x6 cross-covariance matrix (states: lat, lon, alt, vx, vy, vz; first six entries are the first ROW, next six entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |  
 |  global_position_int_cov_send(self, time_usec, estimator_type, lat, lon, alt, relative_alt, vx, vy, vz, covariance, force_mavlink1=False)
 |      The filtered global position (e.g. fused GPS and accelerometers). The
 |      position is in GPS-frame (right-handed, Z-up). It  is
 |      designed as scaled integer message since the
 |      resolution of float is not sufficient. NOTE: This
 |      message is intended for onboard networks / companion
 |      computers and higher-bandwidth links and optimized for
 |      accuracy and completeness. Please use the
 |      GLOBAL_POSITION_INT message for a minimal subset.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      estimator_type            : Class id of the estimator this estimate originated from. (type:uint8_t, values:MAV_ESTIMATOR_TYPE)
 |      lat                       : Latitude [degE7] (type:int32_t)
 |      lon                       : Longitude [degE7] (type:int32_t)
 |      alt                       : Altitude in meters above MSL [mm] (type:int32_t)
 |      relative_alt              : Altitude above ground [mm] (type:int32_t)
 |      vx                        : Ground X Speed (Latitude) [m/s] (type:float)
 |      vy                        : Ground Y Speed (Longitude) [m/s] (type:float)
 |      vz                        : Ground Z Speed (Altitude) [m/s] (type:float)
 |      covariance                : Row-major representation of a 6x6 position and velocity 6x6 cross-covariance matrix (states: lat, lon, alt, vx, vy, vz; first six entries are the first ROW, next six entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |  
 |  global_position_int_encode(self, time_boot_ms, lat, lon, alt, relative_alt, vx, vy, vz, hdg)
 |      The filtered global position (e.g. fused GPS and accelerometers). The
 |      position is in GPS-frame (right-handed, Z-up). It
 |      is designed as scaled integer message since the
 |      resolution of float is not sufficient.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      lat                       : Latitude, expressed [degE7] (type:int32_t)
 |      lon                       : Longitude, expressed [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL). Note that virtually all GPS modules provide both WGS84 and MSL. [mm] (type:int32_t)
 |      relative_alt              : Altitude above ground [mm] (type:int32_t)
 |      vx                        : Ground X Speed (Latitude, positive north) [cm/s] (type:int16_t)
 |      vy                        : Ground Y Speed (Longitude, positive east) [cm/s] (type:int16_t)
 |      vz                        : Ground Z Speed (Altitude, positive down) [cm/s] (type:int16_t)
 |      hdg                       : Vehicle heading (yaw angle), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX [cdeg] (type:uint16_t)
 |  
 |  global_position_int_send(self, time_boot_ms, lat, lon, alt, relative_alt, vx, vy, vz, hdg, force_mavlink1=False)
 |      The filtered global position (e.g. fused GPS and accelerometers). The
 |      position is in GPS-frame (right-handed, Z-up). It
 |      is designed as scaled integer message since the
 |      resolution of float is not sufficient.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      lat                       : Latitude, expressed [degE7] (type:int32_t)
 |      lon                       : Longitude, expressed [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL). Note that virtually all GPS modules provide both WGS84 and MSL. [mm] (type:int32_t)
 |      relative_alt              : Altitude above ground [mm] (type:int32_t)
 |      vx                        : Ground X Speed (Latitude, positive north) [cm/s] (type:int16_t)
 |      vy                        : Ground Y Speed (Longitude, positive east) [cm/s] (type:int16_t)
 |      vz                        : Ground Z Speed (Altitude, positive down) [cm/s] (type:int16_t)
 |      hdg                       : Vehicle heading (yaw angle), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX [cdeg] (type:uint16_t)
 |  
 |  global_vision_position_estimate_encode(self, usec, x, y, z, roll, pitch, yaw, covariance=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], reset_counter=0)
 |      Global position/attitude estimate from a vision source.
 |      
 |      usec                      : Timestamp (UNIX time or since system boot) [us] (type:uint64_t)
 |      x                         : Global X position [m] (type:float)
 |      y                         : Global Y position [m] (type:float)
 |      z                         : Global Z position [m] (type:float)
 |      roll                      : Roll angle [rad] (type:float)
 |      pitch                     : Pitch angle [rad] (type:float)
 |      yaw                       : Yaw angle [rad] (type:float)
 |      covariance                : Row-major representation of pose 6x6 cross-covariance matrix upper right triangle (states: x_global, y_global, z_global, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |      reset_counter             : Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps. (type:uint8_t)
 |  
 |  global_vision_position_estimate_send(self, usec, x, y, z, roll, pitch, yaw, covariance=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], reset_counter=0, force_mavlink1=False)
 |      Global position/attitude estimate from a vision source.
 |      
 |      usec                      : Timestamp (UNIX time or since system boot) [us] (type:uint64_t)
 |      x                         : Global X position [m] (type:float)
 |      y                         : Global Y position [m] (type:float)
 |      z                         : Global Z position [m] (type:float)
 |      roll                      : Roll angle [rad] (type:float)
 |      pitch                     : Pitch angle [rad] (type:float)
 |      yaw                       : Yaw angle [rad] (type:float)
 |      covariance                : Row-major representation of pose 6x6 cross-covariance matrix upper right triangle (states: x_global, y_global, z_global, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |      reset_counter             : Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps. (type:uint8_t)
 |  
 |  gopro_get_request_encode(self, target_system, target_component, cmd_id)
 |      Request a GOPRO_COMMAND response from the GoPro.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      cmd_id                    : Command ID. (type:uint8_t, values:GOPRO_COMMAND)
 |  
 |  gopro_get_request_send(self, target_system, target_component, cmd_id, force_mavlink1=False)
 |      Request a GOPRO_COMMAND response from the GoPro.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      cmd_id                    : Command ID. (type:uint8_t, values:GOPRO_COMMAND)
 |  
 |  gopro_get_response_encode(self, cmd_id, status, value)
 |      Response from a GOPRO_COMMAND get request.
 |      
 |      cmd_id                    : Command ID. (type:uint8_t, values:GOPRO_COMMAND)
 |      status                    : Status. (type:uint8_t, values:GOPRO_REQUEST_STATUS)
 |      value                     : Value. (type:uint8_t)
 |  
 |  gopro_get_response_send(self, cmd_id, status, value, force_mavlink1=False)
 |      Response from a GOPRO_COMMAND get request.
 |      
 |      cmd_id                    : Command ID. (type:uint8_t, values:GOPRO_COMMAND)
 |      status                    : Status. (type:uint8_t, values:GOPRO_REQUEST_STATUS)
 |      value                     : Value. (type:uint8_t)
 |  
 |  gopro_heartbeat_encode(self, status, capture_mode, flags)
 |      Heartbeat from a HeroBus attached GoPro.
 |      
 |      status                    : Status. (type:uint8_t, values:GOPRO_HEARTBEAT_STATUS)
 |      capture_mode              : Current capture mode. (type:uint8_t, values:GOPRO_CAPTURE_MODE)
 |      flags                     : Additional status bits. (type:uint8_t, values:GOPRO_HEARTBEAT_FLAGS)
 |  
 |  gopro_heartbeat_send(self, status, capture_mode, flags, force_mavlink1=False)
 |      Heartbeat from a HeroBus attached GoPro.
 |      
 |      status                    : Status. (type:uint8_t, values:GOPRO_HEARTBEAT_STATUS)
 |      capture_mode              : Current capture mode. (type:uint8_t, values:GOPRO_CAPTURE_MODE)
 |      flags                     : Additional status bits. (type:uint8_t, values:GOPRO_HEARTBEAT_FLAGS)
 |  
 |  gopro_set_request_encode(self, target_system, target_component, cmd_id, value)
 |      Request to set a GOPRO_COMMAND with a desired.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      cmd_id                    : Command ID. (type:uint8_t, values:GOPRO_COMMAND)
 |      value                     : Value. (type:uint8_t)
 |  
 |  gopro_set_request_send(self, target_system, target_component, cmd_id, value, force_mavlink1=False)
 |      Request to set a GOPRO_COMMAND with a desired.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      cmd_id                    : Command ID. (type:uint8_t, values:GOPRO_COMMAND)
 |      value                     : Value. (type:uint8_t)
 |  
 |  gopro_set_response_encode(self, cmd_id, status)
 |      Response from a GOPRO_COMMAND set request.
 |      
 |      cmd_id                    : Command ID. (type:uint8_t, values:GOPRO_COMMAND)
 |      status                    : Status. (type:uint8_t, values:GOPRO_REQUEST_STATUS)
 |  
 |  gopro_set_response_send(self, cmd_id, status, force_mavlink1=False)
 |      Response from a GOPRO_COMMAND set request.
 |      
 |      cmd_id                    : Command ID. (type:uint8_t, values:GOPRO_COMMAND)
 |      status                    : Status. (type:uint8_t, values:GOPRO_REQUEST_STATUS)
 |  
 |  gps2_raw_encode(self, time_usec, fix_type, lat, lon, alt, eph, epv, vel, cog, satellites_visible, dgps_numch, dgps_age, yaw=0)
 |      Second GPS data.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      fix_type                  : GPS fix type. (type:uint8_t, values:GPS_FIX_TYPE)
 |      lat                       : Latitude (WGS84) [degE7] (type:int32_t)
 |      lon                       : Longitude (WGS84) [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL). Positive for up. [mm] (type:int32_t)
 |      eph                       : GPS HDOP horizontal dilution of position. If unknown, set to: UINT16_MAX [cm] (type:uint16_t)
 |      epv                       : GPS VDOP vertical dilution of position. If unknown, set to: UINT16_MAX [cm] (type:uint16_t)
 |      vel                       : GPS ground speed. If unknown, set to: UINT16_MAX [cm/s] (type:uint16_t)
 |      cog                       : Course over ground (NOT heading, but direction of movement): 0.0..359.99 degrees. If unknown, set to: UINT16_MAX [cdeg] (type:uint16_t)
 |      satellites_visible        : Number of satellites visible. If unknown, set to 255 (type:uint8_t)
 |      dgps_numch                : Number of DGPS satellites (type:uint8_t)
 |      dgps_age                  : Age of DGPS info [ms] (type:uint32_t)
 |      yaw                       : Yaw in earth frame from north. Use 0 if this GPS does not provide yaw. Use 65535 if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north. [cdeg] (type:uint16_t)
 |  
 |  gps2_raw_send(self, time_usec, fix_type, lat, lon, alt, eph, epv, vel, cog, satellites_visible, dgps_numch, dgps_age, yaw=0, force_mavlink1=False)
 |      Second GPS data.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      fix_type                  : GPS fix type. (type:uint8_t, values:GPS_FIX_TYPE)
 |      lat                       : Latitude (WGS84) [degE7] (type:int32_t)
 |      lon                       : Longitude (WGS84) [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL). Positive for up. [mm] (type:int32_t)
 |      eph                       : GPS HDOP horizontal dilution of position. If unknown, set to: UINT16_MAX [cm] (type:uint16_t)
 |      epv                       : GPS VDOP vertical dilution of position. If unknown, set to: UINT16_MAX [cm] (type:uint16_t)
 |      vel                       : GPS ground speed. If unknown, set to: UINT16_MAX [cm/s] (type:uint16_t)
 |      cog                       : Course over ground (NOT heading, but direction of movement): 0.0..359.99 degrees. If unknown, set to: UINT16_MAX [cdeg] (type:uint16_t)
 |      satellites_visible        : Number of satellites visible. If unknown, set to 255 (type:uint8_t)
 |      dgps_numch                : Number of DGPS satellites (type:uint8_t)
 |      dgps_age                  : Age of DGPS info [ms] (type:uint32_t)
 |      yaw                       : Yaw in earth frame from north. Use 0 if this GPS does not provide yaw. Use 65535 if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north. [cdeg] (type:uint16_t)
 |  
 |  gps2_rtk_encode(self, time_last_baseline_ms, rtk_receiver_id, wn, tow, rtk_health, rtk_rate, nsats, baseline_coords_type, baseline_a_mm, baseline_b_mm, baseline_c_mm, accuracy, iar_num_hypotheses)
 |      RTK GPS data. Gives information on the relative baseline calculation
 |      the GPS is reporting
 |      
 |      time_last_baseline_ms        : Time since boot of last baseline message received. [ms] (type:uint32_t)
 |      rtk_receiver_id           : Identification of connected RTK receiver. (type:uint8_t)
 |      wn                        : GPS Week Number of last baseline (type:uint16_t)
 |      tow                       : GPS Time of Week of last baseline [ms] (type:uint32_t)
 |      rtk_health                : GPS-specific health report for RTK data. (type:uint8_t)
 |      rtk_rate                  : Rate of baseline messages being received by GPS [Hz] (type:uint8_t)
 |      nsats                     : Current number of sats used for RTK calculation. (type:uint8_t)
 |      baseline_coords_type        : Coordinate system of baseline (type:uint8_t, values:RTK_BASELINE_COORDINATE_SYSTEM)
 |      baseline_a_mm             : Current baseline in ECEF x or NED north component. [mm] (type:int32_t)
 |      baseline_b_mm             : Current baseline in ECEF y or NED east component. [mm] (type:int32_t)
 |      baseline_c_mm             : Current baseline in ECEF z or NED down component. [mm] (type:int32_t)
 |      accuracy                  : Current estimate of baseline accuracy. (type:uint32_t)
 |      iar_num_hypotheses        : Current number of integer ambiguity hypotheses. (type:int32_t)
 |  
 |  gps2_rtk_send(self, time_last_baseline_ms, rtk_receiver_id, wn, tow, rtk_health, rtk_rate, nsats, baseline_coords_type, baseline_a_mm, baseline_b_mm, baseline_c_mm, accuracy, iar_num_hypotheses, force_mavlink1=False)
 |      RTK GPS data. Gives information on the relative baseline calculation
 |      the GPS is reporting
 |      
 |      time_last_baseline_ms        : Time since boot of last baseline message received. [ms] (type:uint32_t)
 |      rtk_receiver_id           : Identification of connected RTK receiver. (type:uint8_t)
 |      wn                        : GPS Week Number of last baseline (type:uint16_t)
 |      tow                       : GPS Time of Week of last baseline [ms] (type:uint32_t)
 |      rtk_health                : GPS-specific health report for RTK data. (type:uint8_t)
 |      rtk_rate                  : Rate of baseline messages being received by GPS [Hz] (type:uint8_t)
 |      nsats                     : Current number of sats used for RTK calculation. (type:uint8_t)
 |      baseline_coords_type        : Coordinate system of baseline (type:uint8_t, values:RTK_BASELINE_COORDINATE_SYSTEM)
 |      baseline_a_mm             : Current baseline in ECEF x or NED north component. [mm] (type:int32_t)
 |      baseline_b_mm             : Current baseline in ECEF y or NED east component. [mm] (type:int32_t)
 |      baseline_c_mm             : Current baseline in ECEF z or NED down component. [mm] (type:int32_t)
 |      accuracy                  : Current estimate of baseline accuracy. (type:uint32_t)
 |      iar_num_hypotheses        : Current number of integer ambiguity hypotheses. (type:int32_t)
 |  
 |  gps_global_origin_encode(self, latitude, longitude, altitude, time_usec=0)
 |      Publishes the GPS co-ordinates of the vehicle local origin (0,0,0)
 |      position. Emitted whenever a new GPS-Local position
 |      mapping is requested or set - e.g. following
 |      SET_GPS_GLOBAL_ORIGIN message.
 |      
 |      latitude                  : Latitude (WGS84) [degE7] (type:int32_t)
 |      longitude                 : Longitude (WGS84) [degE7] (type:int32_t)
 |      altitude                  : Altitude (MSL). Positive for up. [mm] (type:int32_t)
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |  
 |  gps_global_origin_send(self, latitude, longitude, altitude, time_usec=0, force_mavlink1=False)
 |      Publishes the GPS co-ordinates of the vehicle local origin (0,0,0)
 |      position. Emitted whenever a new GPS-Local position
 |      mapping is requested or set - e.g. following
 |      SET_GPS_GLOBAL_ORIGIN message.
 |      
 |      latitude                  : Latitude (WGS84) [degE7] (type:int32_t)
 |      longitude                 : Longitude (WGS84) [degE7] (type:int32_t)
 |      altitude                  : Altitude (MSL). Positive for up. [mm] (type:int32_t)
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |  
 |  gps_inject_data_encode(self, target_system, target_component, len, data)
 |      Data for injecting into the onboard GPS (used for DGPS)
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      len                       : Data length [bytes] (type:uint8_t)
 |      data                      : Raw data (110 is enough for 12 satellites of RTCMv2) (type:uint8_t)
 |  
 |  gps_inject_data_send(self, target_system, target_component, len, data, force_mavlink1=False)
 |      Data for injecting into the onboard GPS (used for DGPS)
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      len                       : Data length [bytes] (type:uint8_t)
 |      data                      : Raw data (110 is enough for 12 satellites of RTCMv2) (type:uint8_t)
 |  
 |  gps_input_encode(self, time_usec, gps_id, ignore_flags, time_week_ms, time_week, fix_type, lat, lon, alt, hdop, vdop, vn, ve, vd, speed_accuracy, horiz_accuracy, vert_accuracy, satellites_visible, yaw=0)
 |      GPS sensor input message.  This is a raw sensor value sent by the GPS.
 |      This is NOT the global position estimate of the
 |      system.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      gps_id                    : ID of the GPS for multiple GPS inputs (type:uint8_t)
 |      ignore_flags              : Bitmap indicating which GPS input flags fields to ignore.  All other fields must be provided. (type:uint16_t, values:GPS_INPUT_IGNORE_FLAGS)
 |      time_week_ms              : GPS time (from start of GPS week) [ms] (type:uint32_t)
 |      time_week                 : GPS week number (type:uint16_t)
 |      fix_type                  : 0-1: no fix, 2: 2D fix, 3: 3D fix. 4: 3D with DGPS. 5: 3D with RTK (type:uint8_t)
 |      lat                       : Latitude (WGS84) [degE7] (type:int32_t)
 |      lon                       : Longitude (WGS84) [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL). Positive for up. [m] (type:float)
 |      hdop                      : GPS HDOP horizontal dilution of position [m] (type:float)
 |      vdop                      : GPS VDOP vertical dilution of position [m] (type:float)
 |      vn                        : GPS velocity in north direction in earth-fixed NED frame [m/s] (type:float)
 |      ve                        : GPS velocity in east direction in earth-fixed NED frame [m/s] (type:float)
 |      vd                        : GPS velocity in down direction in earth-fixed NED frame [m/s] (type:float)
 |      speed_accuracy            : GPS speed accuracy [m/s] (type:float)
 |      horiz_accuracy            : GPS horizontal accuracy [m] (type:float)
 |      vert_accuracy             : GPS vertical accuracy [m] (type:float)
 |      satellites_visible        : Number of satellites visible. (type:uint8_t)
 |      yaw                       : Yaw of vehicle relative to Earth's North, zero means not available, use 36000 for north [cdeg] (type:uint16_t)
 |  
 |  gps_input_send(self, time_usec, gps_id, ignore_flags, time_week_ms, time_week, fix_type, lat, lon, alt, hdop, vdop, vn, ve, vd, speed_accuracy, horiz_accuracy, vert_accuracy, satellites_visible, yaw=0, force_mavlink1=False)
 |      GPS sensor input message.  This is a raw sensor value sent by the GPS.
 |      This is NOT the global position estimate of the
 |      system.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      gps_id                    : ID of the GPS for multiple GPS inputs (type:uint8_t)
 |      ignore_flags              : Bitmap indicating which GPS input flags fields to ignore.  All other fields must be provided. (type:uint16_t, values:GPS_INPUT_IGNORE_FLAGS)
 |      time_week_ms              : GPS time (from start of GPS week) [ms] (type:uint32_t)
 |      time_week                 : GPS week number (type:uint16_t)
 |      fix_type                  : 0-1: no fix, 2: 2D fix, 3: 3D fix. 4: 3D with DGPS. 5: 3D with RTK (type:uint8_t)
 |      lat                       : Latitude (WGS84) [degE7] (type:int32_t)
 |      lon                       : Longitude (WGS84) [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL). Positive for up. [m] (type:float)
 |      hdop                      : GPS HDOP horizontal dilution of position [m] (type:float)
 |      vdop                      : GPS VDOP vertical dilution of position [m] (type:float)
 |      vn                        : GPS velocity in north direction in earth-fixed NED frame [m/s] (type:float)
 |      ve                        : GPS velocity in east direction in earth-fixed NED frame [m/s] (type:float)
 |      vd                        : GPS velocity in down direction in earth-fixed NED frame [m/s] (type:float)
 |      speed_accuracy            : GPS speed accuracy [m/s] (type:float)
 |      horiz_accuracy            : GPS horizontal accuracy [m] (type:float)
 |      vert_accuracy             : GPS vertical accuracy [m] (type:float)
 |      satellites_visible        : Number of satellites visible. (type:uint8_t)
 |      yaw                       : Yaw of vehicle relative to Earth's North, zero means not available, use 36000 for north [cdeg] (type:uint16_t)
 |  
 |  gps_raw_int_encode(self, time_usec, fix_type, lat, lon, alt, eph, epv, vel, cog, satellites_visible, alt_ellipsoid=0, h_acc=0, v_acc=0, vel_acc=0, hdg_acc=0, yaw=0)
 |      The global position, as returned by the Global Positioning System
 |      (GPS). This is                 NOT the global position
 |      estimate of the system, but rather a RAW sensor value.
 |      See message GLOBAL_POSITION for the global position
 |      estimate.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      fix_type                  : GPS fix type. (type:uint8_t, values:GPS_FIX_TYPE)
 |      lat                       : Latitude (WGS84, EGM96 ellipsoid) [degE7] (type:int32_t)
 |      lon                       : Longitude (WGS84, EGM96 ellipsoid) [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL). Positive for up. Note that virtually all GPS modules provide the MSL altitude in addition to the WGS84 altitude. [mm] (type:int32_t)
 |      eph                       : GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX (type:uint16_t)
 |      epv                       : GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX (type:uint16_t)
 |      vel                       : GPS ground speed. If unknown, set to: UINT16_MAX [cm/s] (type:uint16_t)
 |      cog                       : Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX [cdeg] (type:uint16_t)
 |      satellites_visible        : Number of satellites visible. If unknown, set to 255 (type:uint8_t)
 |      alt_ellipsoid             : Altitude (above WGS84, EGM96 ellipsoid). Positive for up. [mm] (type:int32_t)
 |      h_acc                     : Position uncertainty. Positive for up. [mm] (type:uint32_t)
 |      v_acc                     : Altitude uncertainty. Positive for up. [mm] (type:uint32_t)
 |      vel_acc                   : Speed uncertainty. Positive for up. [mm] (type:uint32_t)
 |      hdg_acc                   : Heading / track uncertainty [degE5] (type:uint32_t)
 |      yaw                       : Yaw in earth frame from north. Use 0 if this GPS does not provide yaw. Use 65535 if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north. [cdeg] (type:uint16_t)
 |  
 |  gps_raw_int_send(self, time_usec, fix_type, lat, lon, alt, eph, epv, vel, cog, satellites_visible, alt_ellipsoid=0, h_acc=0, v_acc=0, vel_acc=0, hdg_acc=0, yaw=0, force_mavlink1=False)
 |      The global position, as returned by the Global Positioning System
 |      (GPS). This is                 NOT the global position
 |      estimate of the system, but rather a RAW sensor value.
 |      See message GLOBAL_POSITION for the global position
 |      estimate.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      fix_type                  : GPS fix type. (type:uint8_t, values:GPS_FIX_TYPE)
 |      lat                       : Latitude (WGS84, EGM96 ellipsoid) [degE7] (type:int32_t)
 |      lon                       : Longitude (WGS84, EGM96 ellipsoid) [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL). Positive for up. Note that virtually all GPS modules provide the MSL altitude in addition to the WGS84 altitude. [mm] (type:int32_t)
 |      eph                       : GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX (type:uint16_t)
 |      epv                       : GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX (type:uint16_t)
 |      vel                       : GPS ground speed. If unknown, set to: UINT16_MAX [cm/s] (type:uint16_t)
 |      cog                       : Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX [cdeg] (type:uint16_t)
 |      satellites_visible        : Number of satellites visible. If unknown, set to 255 (type:uint8_t)
 |      alt_ellipsoid             : Altitude (above WGS84, EGM96 ellipsoid). Positive for up. [mm] (type:int32_t)
 |      h_acc                     : Position uncertainty. Positive for up. [mm] (type:uint32_t)
 |      v_acc                     : Altitude uncertainty. Positive for up. [mm] (type:uint32_t)
 |      vel_acc                   : Speed uncertainty. Positive for up. [mm] (type:uint32_t)
 |      hdg_acc                   : Heading / track uncertainty [degE5] (type:uint32_t)
 |      yaw                       : Yaw in earth frame from north. Use 0 if this GPS does not provide yaw. Use 65535 if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north. [cdeg] (type:uint16_t)
 |  
 |  gps_rtcm_data_encode(self, flags, len, data)
 |      RTCM message for injecting into the onboard GPS (used for DGPS)
 |      
 |      flags                     : LSB: 1 means message is fragmented, next 2 bits are the fragment ID, the remaining 5 bits are used for the sequence ID. Messages are only to be flushed to the GPS when the entire message has been reconstructed on the autopilot. The fragment ID specifies which order the fragments should be assembled into a buffer, while the sequence ID is used to detect a mismatch between different buffers. The buffer is considered fully reconstructed when either all 4 fragments are present, or all the fragments before the first fragment with a non full payload is received. This management is used to ensure that normal GPS operation doesn't corrupt RTCM data, and to recover from a unreliable transport delivery order. (type:uint8_t)
 |      len                       : data length [bytes] (type:uint8_t)
 |      data                      : RTCM message (may be fragmented) (type:uint8_t)
 |  
 |  gps_rtcm_data_send(self, flags, len, data, force_mavlink1=False)
 |      RTCM message for injecting into the onboard GPS (used for DGPS)
 |      
 |      flags                     : LSB: 1 means message is fragmented, next 2 bits are the fragment ID, the remaining 5 bits are used for the sequence ID. Messages are only to be flushed to the GPS when the entire message has been reconstructed on the autopilot. The fragment ID specifies which order the fragments should be assembled into a buffer, while the sequence ID is used to detect a mismatch between different buffers. The buffer is considered fully reconstructed when either all 4 fragments are present, or all the fragments before the first fragment with a non full payload is received. This management is used to ensure that normal GPS operation doesn't corrupt RTCM data, and to recover from a unreliable transport delivery order. (type:uint8_t)
 |      len                       : data length [bytes] (type:uint8_t)
 |      data                      : RTCM message (may be fragmented) (type:uint8_t)
 |  
 |  gps_rtk_encode(self, time_last_baseline_ms, rtk_receiver_id, wn, tow, rtk_health, rtk_rate, nsats, baseline_coords_type, baseline_a_mm, baseline_b_mm, baseline_c_mm, accuracy, iar_num_hypotheses)
 |      RTK GPS data. Gives information on the relative baseline calculation
 |      the GPS is reporting
 |      
 |      time_last_baseline_ms        : Time since boot of last baseline message received. [ms] (type:uint32_t)
 |      rtk_receiver_id           : Identification of connected RTK receiver. (type:uint8_t)
 |      wn                        : GPS Week Number of last baseline (type:uint16_t)
 |      tow                       : GPS Time of Week of last baseline [ms] (type:uint32_t)
 |      rtk_health                : GPS-specific health report for RTK data. (type:uint8_t)
 |      rtk_rate                  : Rate of baseline messages being received by GPS [Hz] (type:uint8_t)
 |      nsats                     : Current number of sats used for RTK calculation. (type:uint8_t)
 |      baseline_coords_type        : Coordinate system of baseline (type:uint8_t, values:RTK_BASELINE_COORDINATE_SYSTEM)
 |      baseline_a_mm             : Current baseline in ECEF x or NED north component. [mm] (type:int32_t)
 |      baseline_b_mm             : Current baseline in ECEF y or NED east component. [mm] (type:int32_t)
 |      baseline_c_mm             : Current baseline in ECEF z or NED down component. [mm] (type:int32_t)
 |      accuracy                  : Current estimate of baseline accuracy. (type:uint32_t)
 |      iar_num_hypotheses        : Current number of integer ambiguity hypotheses. (type:int32_t)
 |  
 |  gps_rtk_send(self, time_last_baseline_ms, rtk_receiver_id, wn, tow, rtk_health, rtk_rate, nsats, baseline_coords_type, baseline_a_mm, baseline_b_mm, baseline_c_mm, accuracy, iar_num_hypotheses, force_mavlink1=False)
 |      RTK GPS data. Gives information on the relative baseline calculation
 |      the GPS is reporting
 |      
 |      time_last_baseline_ms        : Time since boot of last baseline message received. [ms] (type:uint32_t)
 |      rtk_receiver_id           : Identification of connected RTK receiver. (type:uint8_t)
 |      wn                        : GPS Week Number of last baseline (type:uint16_t)
 |      tow                       : GPS Time of Week of last baseline [ms] (type:uint32_t)
 |      rtk_health                : GPS-specific health report for RTK data. (type:uint8_t)
 |      rtk_rate                  : Rate of baseline messages being received by GPS [Hz] (type:uint8_t)
 |      nsats                     : Current number of sats used for RTK calculation. (type:uint8_t)
 |      baseline_coords_type        : Coordinate system of baseline (type:uint8_t, values:RTK_BASELINE_COORDINATE_SYSTEM)
 |      baseline_a_mm             : Current baseline in ECEF x or NED north component. [mm] (type:int32_t)
 |      baseline_b_mm             : Current baseline in ECEF y or NED east component. [mm] (type:int32_t)
 |      baseline_c_mm             : Current baseline in ECEF z or NED down component. [mm] (type:int32_t)
 |      accuracy                  : Current estimate of baseline accuracy. (type:uint32_t)
 |      iar_num_hypotheses        : Current number of integer ambiguity hypotheses. (type:int32_t)
 |  
 |  gps_status_encode(self, satellites_visible, satellite_prn, satellite_used, satellite_elevation, satellite_azimuth, satellite_snr)
 |      The positioning status, as reported by GPS. This message is intended
 |      to display status information about each satellite
 |      visible to the receiver. See message GLOBAL_POSITION
 |      for the global position estimate. This message can
 |      contain information for up to 20 satellites.
 |      
 |      satellites_visible        : Number of satellites visible (type:uint8_t)
 |      satellite_prn             : Global satellite ID (type:uint8_t)
 |      satellite_used            : 0: Satellite not used, 1: used for localization (type:uint8_t)
 |      satellite_elevation        : Elevation (0: right on top of receiver, 90: on the horizon) of satellite [deg] (type:uint8_t)
 |      satellite_azimuth         : Direction of satellite, 0: 0 deg, 255: 360 deg. [deg] (type:uint8_t)
 |      satellite_snr             : Signal to noise ratio of satellite [dB] (type:uint8_t)
 |  
 |  gps_status_send(self, satellites_visible, satellite_prn, satellite_used, satellite_elevation, satellite_azimuth, satellite_snr, force_mavlink1=False)
 |      The positioning status, as reported by GPS. This message is intended
 |      to display status information about each satellite
 |      visible to the receiver. See message GLOBAL_POSITION
 |      for the global position estimate. This message can
 |      contain information for up to 20 satellites.
 |      
 |      satellites_visible        : Number of satellites visible (type:uint8_t)
 |      satellite_prn             : Global satellite ID (type:uint8_t)
 |      satellite_used            : 0: Satellite not used, 1: used for localization (type:uint8_t)
 |      satellite_elevation        : Elevation (0: right on top of receiver, 90: on the horizon) of satellite [deg] (type:uint8_t)
 |      satellite_azimuth         : Direction of satellite, 0: 0 deg, 255: 360 deg. [deg] (type:uint8_t)
 |      satellite_snr             : Signal to noise ratio of satellite [dB] (type:uint8_t)
 |  
 |  heartbeat_encode(self, type, autopilot, base_mode, custom_mode, system_status, mavlink_version=3)
 |      The heartbeat message shows that a system or component is present and
 |      responding. The type and autopilot fields (along with
 |      the message component id), allow the receiving system
 |      to treat further messages from this system
 |      appropriately (e.g. by laying out the user interface
 |      based on the autopilot). This microservice is
 |      documented at
 |      https://mavlink.io/en/services/heartbeat.html
 |      
 |      type                      : Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type. (type:uint8_t, values:MAV_TYPE)
 |      autopilot                 : Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers. (type:uint8_t, values:MAV_AUTOPILOT)
 |      base_mode                 : System mode bitmap. (type:uint8_t, values:MAV_MODE_FLAG)
 |      custom_mode               : A bitfield for use for autopilot-specific flags (type:uint32_t)
 |      system_status             : System status flag. (type:uint8_t, values:MAV_STATE)
 |      mavlink_version           : MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version (type:uint8_t)
 |  
 |  heartbeat_send(self, type, autopilot, base_mode, custom_mode, system_status, mavlink_version=3, force_mavlink1=False)
 |      The heartbeat message shows that a system or component is present and
 |      responding. The type and autopilot fields (along with
 |      the message component id), allow the receiving system
 |      to treat further messages from this system
 |      appropriately (e.g. by laying out the user interface
 |      based on the autopilot). This microservice is
 |      documented at
 |      https://mavlink.io/en/services/heartbeat.html
 |      
 |      type                      : Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type. (type:uint8_t, values:MAV_TYPE)
 |      autopilot                 : Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers. (type:uint8_t, values:MAV_AUTOPILOT)
 |      base_mode                 : System mode bitmap. (type:uint8_t, values:MAV_MODE_FLAG)
 |      custom_mode               : A bitfield for use for autopilot-specific flags (type:uint32_t)
 |      system_status             : System status flag. (type:uint8_t, values:MAV_STATE)
 |      mavlink_version           : MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version (type:uint8_t)
 |  
 |  high_latency_encode(self, base_mode, custom_mode, landed_state, roll, pitch, heading, throttle, heading_sp, latitude, longitude, altitude_amsl, altitude_sp, airspeed, airspeed_sp, groundspeed, climb_rate, gps_nsat, gps_fix_type, battery_remaining, temperature, temperature_air, failsafe, wp_num, wp_distance)
 |      Message appropriate for high latency connections like Iridium
 |      
 |      base_mode                 : Bitmap of enabled system modes. (type:uint8_t, values:MAV_MODE_FLAG)
 |      custom_mode               : A bitfield for use for autopilot-specific flags. (type:uint32_t)
 |      landed_state              : The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown. (type:uint8_t, values:MAV_LANDED_STATE)
 |      roll                      : roll [cdeg] (type:int16_t)
 |      pitch                     : pitch [cdeg] (type:int16_t)
 |      heading                   : heading [cdeg] (type:uint16_t)
 |      throttle                  : throttle (percentage) [%] (type:int8_t)
 |      heading_sp                : heading setpoint [cdeg] (type:int16_t)
 |      latitude                  : Latitude [degE7] (type:int32_t)
 |      longitude                 : Longitude [degE7] (type:int32_t)
 |      altitude_amsl             : Altitude above mean sea level [m] (type:int16_t)
 |      altitude_sp               : Altitude setpoint relative to the home position [m] (type:int16_t)
 |      airspeed                  : airspeed [m/s] (type:uint8_t)
 |      airspeed_sp               : airspeed setpoint [m/s] (type:uint8_t)
 |      groundspeed               : groundspeed [m/s] (type:uint8_t)
 |      climb_rate                : climb rate [m/s] (type:int8_t)
 |      gps_nsat                  : Number of satellites visible. If unknown, set to 255 (type:uint8_t)
 |      gps_fix_type              : GPS Fix type. (type:uint8_t, values:GPS_FIX_TYPE)
 |      battery_remaining         : Remaining battery (percentage) [%] (type:uint8_t)
 |      temperature               : Autopilot temperature (degrees C) [degC] (type:int8_t)
 |      temperature_air           : Air temperature (degrees C) from airspeed sensor [degC] (type:int8_t)
 |      failsafe                  : failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, bit1:batt, bit2:GPS, bit3:GCS, bit4:fence) (type:uint8_t)
 |      wp_num                    : current waypoint number (type:uint8_t)
 |      wp_distance               : distance to target [m] (type:uint16_t)
 |  
 |  high_latency_send(self, base_mode, custom_mode, landed_state, roll, pitch, heading, throttle, heading_sp, latitude, longitude, altitude_amsl, altitude_sp, airspeed, airspeed_sp, groundspeed, climb_rate, gps_nsat, gps_fix_type, battery_remaining, temperature, temperature_air, failsafe, wp_num, wp_distance, force_mavlink1=False)
 |      Message appropriate for high latency connections like Iridium
 |      
 |      base_mode                 : Bitmap of enabled system modes. (type:uint8_t, values:MAV_MODE_FLAG)
 |      custom_mode               : A bitfield for use for autopilot-specific flags. (type:uint32_t)
 |      landed_state              : The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown. (type:uint8_t, values:MAV_LANDED_STATE)
 |      roll                      : roll [cdeg] (type:int16_t)
 |      pitch                     : pitch [cdeg] (type:int16_t)
 |      heading                   : heading [cdeg] (type:uint16_t)
 |      throttle                  : throttle (percentage) [%] (type:int8_t)
 |      heading_sp                : heading setpoint [cdeg] (type:int16_t)
 |      latitude                  : Latitude [degE7] (type:int32_t)
 |      longitude                 : Longitude [degE7] (type:int32_t)
 |      altitude_amsl             : Altitude above mean sea level [m] (type:int16_t)
 |      altitude_sp               : Altitude setpoint relative to the home position [m] (type:int16_t)
 |      airspeed                  : airspeed [m/s] (type:uint8_t)
 |      airspeed_sp               : airspeed setpoint [m/s] (type:uint8_t)
 |      groundspeed               : groundspeed [m/s] (type:uint8_t)
 |      climb_rate                : climb rate [m/s] (type:int8_t)
 |      gps_nsat                  : Number of satellites visible. If unknown, set to 255 (type:uint8_t)
 |      gps_fix_type              : GPS Fix type. (type:uint8_t, values:GPS_FIX_TYPE)
 |      battery_remaining         : Remaining battery (percentage) [%] (type:uint8_t)
 |      temperature               : Autopilot temperature (degrees C) [degC] (type:int8_t)
 |      temperature_air           : Air temperature (degrees C) from airspeed sensor [degC] (type:int8_t)
 |      failsafe                  : failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, bit1:batt, bit2:GPS, bit3:GCS, bit4:fence) (type:uint8_t)
 |      wp_num                    : current waypoint number (type:uint8_t)
 |      wp_distance               : distance to target [m] (type:uint16_t)
 |  
 |  highres_imu_encode(self, time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, abs_pressure, diff_pressure, pressure_alt, temperature, fields_updated, id=0)
 |      The IMU readings in SI units in NED body frame
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      xacc                      : X acceleration [m/s/s] (type:float)
 |      yacc                      : Y acceleration [m/s/s] (type:float)
 |      zacc                      : Z acceleration [m/s/s] (type:float)
 |      xgyro                     : Angular speed around X axis [rad/s] (type:float)
 |      ygyro                     : Angular speed around Y axis [rad/s] (type:float)
 |      zgyro                     : Angular speed around Z axis [rad/s] (type:float)
 |      xmag                      : X Magnetic field [gauss] (type:float)
 |      ymag                      : Y Magnetic field [gauss] (type:float)
 |      zmag                      : Z Magnetic field [gauss] (type:float)
 |      abs_pressure              : Absolute pressure [mbar] (type:float)
 |      diff_pressure             : Differential pressure [mbar] (type:float)
 |      pressure_alt              : Altitude calculated from pressure (type:float)
 |      temperature               : Temperature [degC] (type:float)
 |      fields_updated            : Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature (type:uint16_t)
 |      id                        : Id. Ids are numbered from 0 and map to IMUs numbered from 1 (e.g. IMU1 will have a message with id=0) (type:uint8_t)
 |  
 |  highres_imu_send(self, time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, abs_pressure, diff_pressure, pressure_alt, temperature, fields_updated, id=0, force_mavlink1=False)
 |      The IMU readings in SI units in NED body frame
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      xacc                      : X acceleration [m/s/s] (type:float)
 |      yacc                      : Y acceleration [m/s/s] (type:float)
 |      zacc                      : Z acceleration [m/s/s] (type:float)
 |      xgyro                     : Angular speed around X axis [rad/s] (type:float)
 |      ygyro                     : Angular speed around Y axis [rad/s] (type:float)
 |      zgyro                     : Angular speed around Z axis [rad/s] (type:float)
 |      xmag                      : X Magnetic field [gauss] (type:float)
 |      ymag                      : Y Magnetic field [gauss] (type:float)
 |      zmag                      : Z Magnetic field [gauss] (type:float)
 |      abs_pressure              : Absolute pressure [mbar] (type:float)
 |      diff_pressure             : Differential pressure [mbar] (type:float)
 |      pressure_alt              : Altitude calculated from pressure (type:float)
 |      temperature               : Temperature [degC] (type:float)
 |      fields_updated            : Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature (type:uint16_t)
 |      id                        : Id. Ids are numbered from 0 and map to IMUs numbered from 1 (e.g. IMU1 will have a message with id=0) (type:uint8_t)
 |  
 |  hil_actuator_controls_encode(self, time_usec, controls, mode, flags)
 |      Sent from autopilot to simulation. Hardware in the loop control
 |      outputs (replacement for HIL_CONTROLS)
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      controls                  : Control outputs -1 .. 1. Channel assignment depends on the simulated hardware. (type:float)
 |      mode                      : System mode. Includes arming state. (type:uint8_t, values:MAV_MODE_FLAG)
 |      flags                     : Flags as bitfield, reserved for future use. (type:uint64_t)
 |  
 |  hil_actuator_controls_send(self, time_usec, controls, mode, flags, force_mavlink1=False)
 |      Sent from autopilot to simulation. Hardware in the loop control
 |      outputs (replacement for HIL_CONTROLS)
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      controls                  : Control outputs -1 .. 1. Channel assignment depends on the simulated hardware. (type:float)
 |      mode                      : System mode. Includes arming state. (type:uint8_t, values:MAV_MODE_FLAG)
 |      flags                     : Flags as bitfield, reserved for future use. (type:uint64_t)
 |  
 |  hil_controls_encode(self, time_usec, roll_ailerons, pitch_elevator, yaw_rudder, throttle, aux1, aux2, aux3, aux4, mode, nav_mode)
 |      Sent from autopilot to simulation. Hardware in the loop control
 |      outputs
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      roll_ailerons             : Control output -1 .. 1 (type:float)
 |      pitch_elevator            : Control output -1 .. 1 (type:float)
 |      yaw_rudder                : Control output -1 .. 1 (type:float)
 |      throttle                  : Throttle 0 .. 1 (type:float)
 |      aux1                      : Aux 1, -1 .. 1 (type:float)
 |      aux2                      : Aux 2, -1 .. 1 (type:float)
 |      aux3                      : Aux 3, -1 .. 1 (type:float)
 |      aux4                      : Aux 4, -1 .. 1 (type:float)
 |      mode                      : System mode. (type:uint8_t, values:MAV_MODE)
 |      nav_mode                  : Navigation mode (MAV_NAV_MODE) (type:uint8_t)
 |  
 |  hil_controls_send(self, time_usec, roll_ailerons, pitch_elevator, yaw_rudder, throttle, aux1, aux2, aux3, aux4, mode, nav_mode, force_mavlink1=False)
 |      Sent from autopilot to simulation. Hardware in the loop control
 |      outputs
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      roll_ailerons             : Control output -1 .. 1 (type:float)
 |      pitch_elevator            : Control output -1 .. 1 (type:float)
 |      yaw_rudder                : Control output -1 .. 1 (type:float)
 |      throttle                  : Throttle 0 .. 1 (type:float)
 |      aux1                      : Aux 1, -1 .. 1 (type:float)
 |      aux2                      : Aux 2, -1 .. 1 (type:float)
 |      aux3                      : Aux 3, -1 .. 1 (type:float)
 |      aux4                      : Aux 4, -1 .. 1 (type:float)
 |      mode                      : System mode. (type:uint8_t, values:MAV_MODE)
 |      nav_mode                  : Navigation mode (MAV_NAV_MODE) (type:uint8_t)
 |  
 |  hil_gps_encode(self, time_usec, fix_type, lat, lon, alt, eph, epv, vel, vn, ve, vd, cog, satellites_visible)
 |      The global position, as returned by the Global Positioning System
 |      (GPS). This is                  NOT the global
 |      position estimate of the sytem, but rather a RAW
 |      sensor value. See message GLOBAL_POSITION for the
 |      global position estimate.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      fix_type                  : 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix. (type:uint8_t)
 |      lat                       : Latitude (WGS84) [degE7] (type:int32_t)
 |      lon                       : Longitude (WGS84) [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL). Positive for up. [mm] (type:int32_t)
 |      eph                       : GPS HDOP horizontal dilution of position. If unknown, set to: 65535 [cm] (type:uint16_t)
 |      epv                       : GPS VDOP vertical dilution of position. If unknown, set to: 65535 [cm] (type:uint16_t)
 |      vel                       : GPS ground speed. If unknown, set to: 65535 [cm/s] (type:uint16_t)
 |      vn                        : GPS velocity in north direction in earth-fixed NED frame [cm/s] (type:int16_t)
 |      ve                        : GPS velocity in east direction in earth-fixed NED frame [cm/s] (type:int16_t)
 |      vd                        : GPS velocity in down direction in earth-fixed NED frame [cm/s] (type:int16_t)
 |      cog                       : Course over ground (NOT heading, but direction of movement), 0.0..359.99 degrees. If unknown, set to: 65535 [cdeg] (type:uint16_t)
 |      satellites_visible        : Number of satellites visible. If unknown, set to 255 (type:uint8_t)
 |  
 |  hil_gps_send(self, time_usec, fix_type, lat, lon, alt, eph, epv, vel, vn, ve, vd, cog, satellites_visible, force_mavlink1=False)
 |      The global position, as returned by the Global Positioning System
 |      (GPS). This is                  NOT the global
 |      position estimate of the sytem, but rather a RAW
 |      sensor value. See message GLOBAL_POSITION for the
 |      global position estimate.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      fix_type                  : 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix. (type:uint8_t)
 |      lat                       : Latitude (WGS84) [degE7] (type:int32_t)
 |      lon                       : Longitude (WGS84) [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL). Positive for up. [mm] (type:int32_t)
 |      eph                       : GPS HDOP horizontal dilution of position. If unknown, set to: 65535 [cm] (type:uint16_t)
 |      epv                       : GPS VDOP vertical dilution of position. If unknown, set to: 65535 [cm] (type:uint16_t)
 |      vel                       : GPS ground speed. If unknown, set to: 65535 [cm/s] (type:uint16_t)
 |      vn                        : GPS velocity in north direction in earth-fixed NED frame [cm/s] (type:int16_t)
 |      ve                        : GPS velocity in east direction in earth-fixed NED frame [cm/s] (type:int16_t)
 |      vd                        : GPS velocity in down direction in earth-fixed NED frame [cm/s] (type:int16_t)
 |      cog                       : Course over ground (NOT heading, but direction of movement), 0.0..359.99 degrees. If unknown, set to: 65535 [cdeg] (type:uint16_t)
 |      satellites_visible        : Number of satellites visible. If unknown, set to 255 (type:uint8_t)
 |  
 |  hil_optical_flow_encode(self, time_usec, sensor_id, integration_time_us, integrated_x, integrated_y, integrated_xgyro, integrated_ygyro, integrated_zgyro, temperature, quality, time_delta_distance_us, distance)
 |      Simulated optical flow from a flow sensor (e.g. PX4FLOW or optical
 |      mouse sensor)
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      sensor_id                 : Sensor ID (type:uint8_t)
 |      integration_time_us        : Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the. [us] (type:uint32_t)
 |      integrated_x              : Flow in radians around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.) [rad] (type:float)
 |      integrated_y              : Flow in radians around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.) [rad] (type:float)
 |      integrated_xgyro          : RH rotation around X axis [rad] (type:float)
 |      integrated_ygyro          : RH rotation around Y axis [rad] (type:float)
 |      integrated_zgyro          : RH rotation around Z axis [rad] (type:float)
 |      temperature               : Temperature [cdegC] (type:int16_t)
 |      quality                   : Optical flow quality / confidence. 0: no valid flow, 255: maximum quality (type:uint8_t)
 |      time_delta_distance_us        : Time since the distance was sampled. [us] (type:uint32_t)
 |      distance                  : Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance. [m] (type:float)
 |  
 |  hil_optical_flow_send(self, time_usec, sensor_id, integration_time_us, integrated_x, integrated_y, integrated_xgyro, integrated_ygyro, integrated_zgyro, temperature, quality, time_delta_distance_us, distance, force_mavlink1=False)
 |      Simulated optical flow from a flow sensor (e.g. PX4FLOW or optical
 |      mouse sensor)
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      sensor_id                 : Sensor ID (type:uint8_t)
 |      integration_time_us        : Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the. [us] (type:uint32_t)
 |      integrated_x              : Flow in radians around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.) [rad] (type:float)
 |      integrated_y              : Flow in radians around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.) [rad] (type:float)
 |      integrated_xgyro          : RH rotation around X axis [rad] (type:float)
 |      integrated_ygyro          : RH rotation around Y axis [rad] (type:float)
 |      integrated_zgyro          : RH rotation around Z axis [rad] (type:float)
 |      temperature               : Temperature [cdegC] (type:int16_t)
 |      quality                   : Optical flow quality / confidence. 0: no valid flow, 255: maximum quality (type:uint8_t)
 |      time_delta_distance_us        : Time since the distance was sampled. [us] (type:uint32_t)
 |      distance                  : Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance. [m] (type:float)
 |  
 |  hil_rc_inputs_raw_encode(self, time_usec, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, chan9_raw, chan10_raw, chan11_raw, chan12_raw, rssi)
 |      Sent from simulation to autopilot. The RAW values of the RC channels
 |      received. The standard PPM modulation is as follows:
 |      1000 microseconds: 0%, 2000 microseconds: 100%.
 |      Individual receivers/transmitters might violate this
 |      specification.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      chan1_raw                 : RC channel 1 value [us] (type:uint16_t)
 |      chan2_raw                 : RC channel 2 value [us] (type:uint16_t)
 |      chan3_raw                 : RC channel 3 value [us] (type:uint16_t)
 |      chan4_raw                 : RC channel 4 value [us] (type:uint16_t)
 |      chan5_raw                 : RC channel 5 value [us] (type:uint16_t)
 |      chan6_raw                 : RC channel 6 value [us] (type:uint16_t)
 |      chan7_raw                 : RC channel 7 value [us] (type:uint16_t)
 |      chan8_raw                 : RC channel 8 value [us] (type:uint16_t)
 |      chan9_raw                 : RC channel 9 value [us] (type:uint16_t)
 |      chan10_raw                : RC channel 10 value [us] (type:uint16_t)
 |      chan11_raw                : RC channel 11 value [us] (type:uint16_t)
 |      chan12_raw                : RC channel 12 value [us] (type:uint16_t)
 |      rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
 |  
 |  hil_rc_inputs_raw_send(self, time_usec, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, chan9_raw, chan10_raw, chan11_raw, chan12_raw, rssi, force_mavlink1=False)
 |      Sent from simulation to autopilot. The RAW values of the RC channels
 |      received. The standard PPM modulation is as follows:
 |      1000 microseconds: 0%, 2000 microseconds: 100%.
 |      Individual receivers/transmitters might violate this
 |      specification.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      chan1_raw                 : RC channel 1 value [us] (type:uint16_t)
 |      chan2_raw                 : RC channel 2 value [us] (type:uint16_t)
 |      chan3_raw                 : RC channel 3 value [us] (type:uint16_t)
 |      chan4_raw                 : RC channel 4 value [us] (type:uint16_t)
 |      chan5_raw                 : RC channel 5 value [us] (type:uint16_t)
 |      chan6_raw                 : RC channel 6 value [us] (type:uint16_t)
 |      chan7_raw                 : RC channel 7 value [us] (type:uint16_t)
 |      chan8_raw                 : RC channel 8 value [us] (type:uint16_t)
 |      chan9_raw                 : RC channel 9 value [us] (type:uint16_t)
 |      chan10_raw                : RC channel 10 value [us] (type:uint16_t)
 |      chan11_raw                : RC channel 11 value [us] (type:uint16_t)
 |      chan12_raw                : RC channel 12 value [us] (type:uint16_t)
 |      rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
 |  
 |  hil_sensor_encode(self, time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, abs_pressure, diff_pressure, pressure_alt, temperature, fields_updated)
 |      The IMU readings in SI units in NED body frame
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      xacc                      : X acceleration [m/s/s] (type:float)
 |      yacc                      : Y acceleration [m/s/s] (type:float)
 |      zacc                      : Z acceleration [m/s/s] (type:float)
 |      xgyro                     : Angular speed around X axis in body frame [rad/s] (type:float)
 |      ygyro                     : Angular speed around Y axis in body frame [rad/s] (type:float)
 |      zgyro                     : Angular speed around Z axis in body frame [rad/s] (type:float)
 |      xmag                      : X Magnetic field [gauss] (type:float)
 |      ymag                      : Y Magnetic field [gauss] (type:float)
 |      zmag                      : Z Magnetic field [gauss] (type:float)
 |      abs_pressure              : Absolute pressure [mbar] (type:float)
 |      diff_pressure             : Differential pressure (airspeed) [mbar] (type:float)
 |      pressure_alt              : Altitude calculated from pressure (type:float)
 |      temperature               : Temperature [degC] (type:float)
 |      fields_updated            : Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature, bit 31: full reset of attitude/position/velocities/etc was performed in sim. (type:uint32_t)
 |  
 |  hil_sensor_send(self, time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, abs_pressure, diff_pressure, pressure_alt, temperature, fields_updated, force_mavlink1=False)
 |      The IMU readings in SI units in NED body frame
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      xacc                      : X acceleration [m/s/s] (type:float)
 |      yacc                      : Y acceleration [m/s/s] (type:float)
 |      zacc                      : Z acceleration [m/s/s] (type:float)
 |      xgyro                     : Angular speed around X axis in body frame [rad/s] (type:float)
 |      ygyro                     : Angular speed around Y axis in body frame [rad/s] (type:float)
 |      zgyro                     : Angular speed around Z axis in body frame [rad/s] (type:float)
 |      xmag                      : X Magnetic field [gauss] (type:float)
 |      ymag                      : Y Magnetic field [gauss] (type:float)
 |      zmag                      : Z Magnetic field [gauss] (type:float)
 |      abs_pressure              : Absolute pressure [mbar] (type:float)
 |      diff_pressure             : Differential pressure (airspeed) [mbar] (type:float)
 |      pressure_alt              : Altitude calculated from pressure (type:float)
 |      temperature               : Temperature [degC] (type:float)
 |      fields_updated            : Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature, bit 31: full reset of attitude/position/velocities/etc was performed in sim. (type:uint32_t)
 |  
 |  hil_state_encode(self, time_usec, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, xacc, yacc, zacc)
 |      Sent from simulation to autopilot. This packet is useful for high
 |      throughput applications such as hardware in the loop
 |      simulations.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      roll                      : Roll angle [rad] (type:float)
 |      pitch                     : Pitch angle [rad] (type:float)
 |      yaw                       : Yaw angle [rad] (type:float)
 |      rollspeed                 : Body frame roll / phi angular speed [rad/s] (type:float)
 |      pitchspeed                : Body frame pitch / theta angular speed [rad/s] (type:float)
 |      yawspeed                  : Body frame yaw / psi angular speed [rad/s] (type:float)
 |      lat                       : Latitude [degE7] (type:int32_t)
 |      lon                       : Longitude [degE7] (type:int32_t)
 |      alt                       : Altitude [mm] (type:int32_t)
 |      vx                        : Ground X Speed (Latitude) [cm/s] (type:int16_t)
 |      vy                        : Ground Y Speed (Longitude) [cm/s] (type:int16_t)
 |      vz                        : Ground Z Speed (Altitude) [cm/s] (type:int16_t)
 |      xacc                      : X acceleration [mG] (type:int16_t)
 |      yacc                      : Y acceleration [mG] (type:int16_t)
 |      zacc                      : Z acceleration [mG] (type:int16_t)
 |  
 |  hil_state_quaternion_encode(self, time_usec, attitude_quaternion, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, ind_airspeed, true_airspeed, xacc, yacc, zacc)
 |      Sent from simulation to autopilot, avoids in contrast to HIL_STATE
 |      singularities. This packet is useful for high
 |      throughput applications such as hardware in the loop
 |      simulations.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      attitude_quaternion        : Vehicle attitude expressed as normalized quaternion in w, x, y, z order (with 1 0 0 0 being the null-rotation) (type:float)
 |      rollspeed                 : Body frame roll / phi angular speed [rad/s] (type:float)
 |      pitchspeed                : Body frame pitch / theta angular speed [rad/s] (type:float)
 |      yawspeed                  : Body frame yaw / psi angular speed [rad/s] (type:float)
 |      lat                       : Latitude [degE7] (type:int32_t)
 |      lon                       : Longitude [degE7] (type:int32_t)
 |      alt                       : Altitude [mm] (type:int32_t)
 |      vx                        : Ground X Speed (Latitude) [cm/s] (type:int16_t)
 |      vy                        : Ground Y Speed (Longitude) [cm/s] (type:int16_t)
 |      vz                        : Ground Z Speed (Altitude) [cm/s] (type:int16_t)
 |      ind_airspeed              : Indicated airspeed [cm/s] (type:uint16_t)
 |      true_airspeed             : True airspeed [cm/s] (type:uint16_t)
 |      xacc                      : X acceleration [mG] (type:int16_t)
 |      yacc                      : Y acceleration [mG] (type:int16_t)
 |      zacc                      : Z acceleration [mG] (type:int16_t)
 |  
 |  hil_state_quaternion_send(self, time_usec, attitude_quaternion, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, ind_airspeed, true_airspeed, xacc, yacc, zacc, force_mavlink1=False)
 |      Sent from simulation to autopilot, avoids in contrast to HIL_STATE
 |      singularities. This packet is useful for high
 |      throughput applications such as hardware in the loop
 |      simulations.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      attitude_quaternion        : Vehicle attitude expressed as normalized quaternion in w, x, y, z order (with 1 0 0 0 being the null-rotation) (type:float)
 |      rollspeed                 : Body frame roll / phi angular speed [rad/s] (type:float)
 |      pitchspeed                : Body frame pitch / theta angular speed [rad/s] (type:float)
 |      yawspeed                  : Body frame yaw / psi angular speed [rad/s] (type:float)
 |      lat                       : Latitude [degE7] (type:int32_t)
 |      lon                       : Longitude [degE7] (type:int32_t)
 |      alt                       : Altitude [mm] (type:int32_t)
 |      vx                        : Ground X Speed (Latitude) [cm/s] (type:int16_t)
 |      vy                        : Ground Y Speed (Longitude) [cm/s] (type:int16_t)
 |      vz                        : Ground Z Speed (Altitude) [cm/s] (type:int16_t)
 |      ind_airspeed              : Indicated airspeed [cm/s] (type:uint16_t)
 |      true_airspeed             : True airspeed [cm/s] (type:uint16_t)
 |      xacc                      : X acceleration [mG] (type:int16_t)
 |      yacc                      : Y acceleration [mG] (type:int16_t)
 |      zacc                      : Z acceleration [mG] (type:int16_t)
 |  
 |  hil_state_send(self, time_usec, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, xacc, yacc, zacc, force_mavlink1=False)
 |      Sent from simulation to autopilot. This packet is useful for high
 |      throughput applications such as hardware in the loop
 |      simulations.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      roll                      : Roll angle [rad] (type:float)
 |      pitch                     : Pitch angle [rad] (type:float)
 |      yaw                       : Yaw angle [rad] (type:float)
 |      rollspeed                 : Body frame roll / phi angular speed [rad/s] (type:float)
 |      pitchspeed                : Body frame pitch / theta angular speed [rad/s] (type:float)
 |      yawspeed                  : Body frame yaw / psi angular speed [rad/s] (type:float)
 |      lat                       : Latitude [degE7] (type:int32_t)
 |      lon                       : Longitude [degE7] (type:int32_t)
 |      alt                       : Altitude [mm] (type:int32_t)
 |      vx                        : Ground X Speed (Latitude) [cm/s] (type:int16_t)
 |      vy                        : Ground Y Speed (Longitude) [cm/s] (type:int16_t)
 |      vz                        : Ground Z Speed (Altitude) [cm/s] (type:int16_t)
 |      xacc                      : X acceleration [mG] (type:int16_t)
 |      yacc                      : Y acceleration [mG] (type:int16_t)
 |      zacc                      : Z acceleration [mG] (type:int16_t)
 |  
 |  home_position_encode(self, latitude, longitude, altitude, x, y, z, q, approach_x, approach_y, approach_z, time_usec=0)
 |      This message can be requested by sending the MAV_CMD_GET_HOME_POSITION
 |      command. The position the system will return to and
 |      land on. The position is set automatically by the
 |      system during the takeoff in case it was not
 |      explicitly set by the operator before or after. The
 |      position the system will return to and land on. The
 |      global and local positions encode the position in the
 |      respective coordinate frames, while the q parameter
 |      encodes the orientation of the surface. Under normal
 |      conditions it describes the heading and terrain slope,
 |      which can be used by the aircraft to adjust the
 |      approach. The approach 3D vector describes the point
 |      to which the system should fly in normal flight mode
 |      and then perform a landing sequence along the vector.
 |      
 |      latitude                  : Latitude (WGS84) [degE7] (type:int32_t)
 |      longitude                 : Longitude (WGS84) [degE7] (type:int32_t)
 |      altitude                  : Altitude (MSL). Positive for up. [mm] (type:int32_t)
 |      x                         : Local X position of this position in the local coordinate frame [m] (type:float)
 |      y                         : Local Y position of this position in the local coordinate frame [m] (type:float)
 |      z                         : Local Z position of this position in the local coordinate frame [m] (type:float)
 |      q                         : World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground (type:float)
 |      approach_x                : Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
 |      approach_y                : Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
 |      approach_z                : Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |  
 |  home_position_send(self, latitude, longitude, altitude, x, y, z, q, approach_x, approach_y, approach_z, time_usec=0, force_mavlink1=False)
 |      This message can be requested by sending the MAV_CMD_GET_HOME_POSITION
 |      command. The position the system will return to and
 |      land on. The position is set automatically by the
 |      system during the takeoff in case it was not
 |      explicitly set by the operator before or after. The
 |      position the system will return to and land on. The
 |      global and local positions encode the position in the
 |      respective coordinate frames, while the q parameter
 |      encodes the orientation of the surface. Under normal
 |      conditions it describes the heading and terrain slope,
 |      which can be used by the aircraft to adjust the
 |      approach. The approach 3D vector describes the point
 |      to which the system should fly in normal flight mode
 |      and then perform a landing sequence along the vector.
 |      
 |      latitude                  : Latitude (WGS84) [degE7] (type:int32_t)
 |      longitude                 : Longitude (WGS84) [degE7] (type:int32_t)
 |      altitude                  : Altitude (MSL). Positive for up. [mm] (type:int32_t)
 |      x                         : Local X position of this position in the local coordinate frame [m] (type:float)
 |      y                         : Local Y position of this position in the local coordinate frame [m] (type:float)
 |      z                         : Local Z position of this position in the local coordinate frame [m] (type:float)
 |      q                         : World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground (type:float)
 |      approach_x                : Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
 |      approach_y                : Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
 |      approach_z                : Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |  
 |  hwstatus_encode(self, Vcc, I2Cerr)
 |      Status of key hardware.
 |      
 |      Vcc                       : Board voltage. [mV] (type:uint16_t)
 |      I2Cerr                    : I2C error count. (type:uint8_t)
 |  
 |  hwstatus_send(self, Vcc, I2Cerr, force_mavlink1=False)
 |      Status of key hardware.
 |      
 |      Vcc                       : Board voltage. [mV] (type:uint16_t)
 |      I2Cerr                    : I2C error count. (type:uint8_t)
 |  
 |  icarous_heartbeat_encode(self, status)
 |      ICAROUS heartbeat
 |      
 |      status                    : See the FMS_STATE enum. (type:uint8_t, values:ICAROUS_FMS_STATE)
 |  
 |  icarous_heartbeat_send(self, status, force_mavlink1=False)
 |      ICAROUS heartbeat
 |      
 |      status                    : See the FMS_STATE enum. (type:uint8_t, values:ICAROUS_FMS_STATE)
 |  
 |  icarous_kinematic_bands_encode(self, numBands, type1, min1, max1, type2, min2, max2, type3, min3, max3, type4, min4, max4, type5, min5, max5)
 |      Kinematic multi bands (track) output from Daidalus
 |      
 |      numBands                  : Number of track bands (type:int8_t)
 |      type1                     : See the TRACK_BAND_TYPES enum. (type:uint8_t, values:ICAROUS_TRACK_BAND_TYPES)
 |      min1                      : min angle (degrees) [deg] (type:float)
 |      max1                      : max angle (degrees) [deg] (type:float)
 |      type2                     : See the TRACK_BAND_TYPES enum. (type:uint8_t, values:ICAROUS_TRACK_BAND_TYPES)
 |      min2                      : min angle (degrees) [deg] (type:float)
 |      max2                      : max angle (degrees) [deg] (type:float)
 |      type3                     : See the TRACK_BAND_TYPES enum. (type:uint8_t, values:ICAROUS_TRACK_BAND_TYPES)
 |      min3                      : min angle (degrees) [deg] (type:float)
 |      max3                      : max angle (degrees) [deg] (type:float)
 |      type4                     : See the TRACK_BAND_TYPES enum. (type:uint8_t, values:ICAROUS_TRACK_BAND_TYPES)
 |      min4                      : min angle (degrees) [deg] (type:float)
 |      max4                      : max angle (degrees) [deg] (type:float)
 |      type5                     : See the TRACK_BAND_TYPES enum. (type:uint8_t, values:ICAROUS_TRACK_BAND_TYPES)
 |      min5                      : min angle (degrees) [deg] (type:float)
 |      max5                      : max angle (degrees) [deg] (type:float)
 |  
 |  icarous_kinematic_bands_send(self, numBands, type1, min1, max1, type2, min2, max2, type3, min3, max3, type4, min4, max4, type5, min5, max5, force_mavlink1=False)
 |      Kinematic multi bands (track) output from Daidalus
 |      
 |      numBands                  : Number of track bands (type:int8_t)
 |      type1                     : See the TRACK_BAND_TYPES enum. (type:uint8_t, values:ICAROUS_TRACK_BAND_TYPES)
 |      min1                      : min angle (degrees) [deg] (type:float)
 |      max1                      : max angle (degrees) [deg] (type:float)
 |      type2                     : See the TRACK_BAND_TYPES enum. (type:uint8_t, values:ICAROUS_TRACK_BAND_TYPES)
 |      min2                      : min angle (degrees) [deg] (type:float)
 |      max2                      : max angle (degrees) [deg] (type:float)
 |      type3                     : See the TRACK_BAND_TYPES enum. (type:uint8_t, values:ICAROUS_TRACK_BAND_TYPES)
 |      min3                      : min angle (degrees) [deg] (type:float)
 |      max3                      : max angle (degrees) [deg] (type:float)
 |      type4                     : See the TRACK_BAND_TYPES enum. (type:uint8_t, values:ICAROUS_TRACK_BAND_TYPES)
 |      min4                      : min angle (degrees) [deg] (type:float)
 |      max4                      : max angle (degrees) [deg] (type:float)
 |      type5                     : See the TRACK_BAND_TYPES enum. (type:uint8_t, values:ICAROUS_TRACK_BAND_TYPES)
 |      min5                      : min angle (degrees) [deg] (type:float)
 |      max5                      : max angle (degrees) [deg] (type:float)
 |  
 |  isbd_link_status_encode(self, timestamp, last_heartbeat, failed_sessions, successful_sessions, signal_quality, ring_pending, tx_session_pending, rx_session_pending)
 |      Status of the Iridium SBD link.
 |      
 |      timestamp                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      last_heartbeat            : Timestamp of the last successful sbd session. The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      failed_sessions           : Number of failed SBD sessions. (type:uint16_t)
 |      successful_sessions        : Number of successful SBD sessions. (type:uint16_t)
 |      signal_quality            : Signal quality equal to the number of bars displayed on the ISU signal strength indicator. Range is 0 to 5, where 0 indicates no signal and 5 indicates maximum signal strength. (type:uint8_t)
 |      ring_pending              : 1: Ring call pending, 0: No call pending. (type:uint8_t)
 |      tx_session_pending        : 1: Transmission session pending, 0: No transmission session pending. (type:uint8_t)
 |      rx_session_pending        : 1: Receiving session pending, 0: No receiving session pending. (type:uint8_t)
 |  
 |  isbd_link_status_send(self, timestamp, last_heartbeat, failed_sessions, successful_sessions, signal_quality, ring_pending, tx_session_pending, rx_session_pending, force_mavlink1=False)
 |      Status of the Iridium SBD link.
 |      
 |      timestamp                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      last_heartbeat            : Timestamp of the last successful sbd session. The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      failed_sessions           : Number of failed SBD sessions. (type:uint16_t)
 |      successful_sessions        : Number of successful SBD sessions. (type:uint16_t)
 |      signal_quality            : Signal quality equal to the number of bars displayed on the ISU signal strength indicator. Range is 0 to 5, where 0 indicates no signal and 5 indicates maximum signal strength. (type:uint8_t)
 |      ring_pending              : 1: Ring call pending, 0: No call pending. (type:uint8_t)
 |      tx_session_pending        : 1: Transmission session pending, 0: No transmission session pending. (type:uint8_t)
 |      rx_session_pending        : 1: Receiving session pending, 0: No receiving session pending. (type:uint8_t)
 |  
 |  landing_target_encode(self, time_usec, target_num, frame, angle_x, angle_y, distance, size_x, size_y, x=0, y=0, z=0, q=[0, 0, 0, 0], type=0, position_valid=0)
 |      The location of a landing target. See:
 |      https://mavlink.io/en/services/landing_target.html
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      target_num                : The ID of the target if multiple targets are present (type:uint8_t)
 |      frame                     : Coordinate frame used for following fields. (type:uint8_t, values:MAV_FRAME)
 |      angle_x                   : X-axis angular offset of the target from the center of the image [rad] (type:float)
 |      angle_y                   : Y-axis angular offset of the target from the center of the image [rad] (type:float)
 |      distance                  : Distance to the target from the vehicle [m] (type:float)
 |      size_x                    : Size of target along x-axis [rad] (type:float)
 |      size_y                    : Size of target along y-axis [rad] (type:float)
 |      x                         : X Position of the landing target in MAV_FRAME [m] (type:float)
 |      y                         : Y Position of the landing target in MAV_FRAME [m] (type:float)
 |      z                         : Z Position of the landing target in MAV_FRAME [m] (type:float)
 |      q                         : Quaternion of landing target orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (type:float)
 |      type                      : Type of landing target (type:uint8_t, values:LANDING_TARGET_TYPE)
 |      position_valid            : Boolean indicating whether the position fields (x, y, z, q, type) contain valid target position information (valid: 1, invalid: 0). Default is 0 (invalid). (type:uint8_t)
 |  
 |  landing_target_send(self, time_usec, target_num, frame, angle_x, angle_y, distance, size_x, size_y, x=0, y=0, z=0, q=[0, 0, 0, 0], type=0, position_valid=0, force_mavlink1=False)
 |      The location of a landing target. See:
 |      https://mavlink.io/en/services/landing_target.html
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      target_num                : The ID of the target if multiple targets are present (type:uint8_t)
 |      frame                     : Coordinate frame used for following fields. (type:uint8_t, values:MAV_FRAME)
 |      angle_x                   : X-axis angular offset of the target from the center of the image [rad] (type:float)
 |      angle_y                   : Y-axis angular offset of the target from the center of the image [rad] (type:float)
 |      distance                  : Distance to the target from the vehicle [m] (type:float)
 |      size_x                    : Size of target along x-axis [rad] (type:float)
 |      size_y                    : Size of target along y-axis [rad] (type:float)
 |      x                         : X Position of the landing target in MAV_FRAME [m] (type:float)
 |      y                         : Y Position of the landing target in MAV_FRAME [m] (type:float)
 |      z                         : Z Position of the landing target in MAV_FRAME [m] (type:float)
 |      q                         : Quaternion of landing target orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (type:float)
 |      type                      : Type of landing target (type:uint8_t, values:LANDING_TARGET_TYPE)
 |      position_valid            : Boolean indicating whether the position fields (x, y, z, q, type) contain valid target position information (valid: 1, invalid: 0). Default is 0 (invalid). (type:uint8_t)
 |  
 |  led_control_encode(self, target_system, target_component, instance, pattern, custom_len, custom_bytes)
 |      Control vehicle LEDs.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      instance                  : Instance (LED instance to control or 255 for all LEDs). (type:uint8_t)
 |      pattern                   : Pattern (see LED_PATTERN_ENUM). (type:uint8_t)
 |      custom_len                : Custom Byte Length. (type:uint8_t)
 |      custom_bytes              : Custom Bytes. (type:uint8_t)
 |  
 |  led_control_send(self, target_system, target_component, instance, pattern, custom_len, custom_bytes, force_mavlink1=False)
 |      Control vehicle LEDs.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      instance                  : Instance (LED instance to control or 255 for all LEDs). (type:uint8_t)
 |      pattern                   : Pattern (see LED_PATTERN_ENUM). (type:uint8_t)
 |      custom_len                : Custom Byte Length. (type:uint8_t)
 |      custom_bytes              : Custom Bytes. (type:uint8_t)
 |  
 |  limits_status_encode(self, limits_state, last_trigger, last_action, last_recovery, last_clear, breach_count, mods_enabled, mods_required, mods_triggered)
 |      Status of AP_Limits. Sent in extended status stream when AP_Limits is
 |      enabled.
 |      
 |      limits_state              : State of AP_Limits. (type:uint8_t, values:LIMITS_STATE)
 |      last_trigger              : Time (since boot) of last breach. [ms] (type:uint32_t)
 |      last_action               : Time (since boot) of last recovery action. [ms] (type:uint32_t)
 |      last_recovery             : Time (since boot) of last successful recovery. [ms] (type:uint32_t)
 |      last_clear                : Time (since boot) of last all-clear. [ms] (type:uint32_t)
 |      breach_count              : Number of fence breaches. (type:uint16_t)
 |      mods_enabled              : AP_Limit_Module bitfield of enabled modules. (type:uint8_t, values:LIMIT_MODULE)
 |      mods_required             : AP_Limit_Module bitfield of required modules. (type:uint8_t, values:LIMIT_MODULE)
 |      mods_triggered            : AP_Limit_Module bitfield of triggered modules. (type:uint8_t, values:LIMIT_MODULE)
 |  
 |  limits_status_send(self, limits_state, last_trigger, last_action, last_recovery, last_clear, breach_count, mods_enabled, mods_required, mods_triggered, force_mavlink1=False)
 |      Status of AP_Limits. Sent in extended status stream when AP_Limits is
 |      enabled.
 |      
 |      limits_state              : State of AP_Limits. (type:uint8_t, values:LIMITS_STATE)
 |      last_trigger              : Time (since boot) of last breach. [ms] (type:uint32_t)
 |      last_action               : Time (since boot) of last recovery action. [ms] (type:uint32_t)
 |      last_recovery             : Time (since boot) of last successful recovery. [ms] (type:uint32_t)
 |      last_clear                : Time (since boot) of last all-clear. [ms] (type:uint32_t)
 |      breach_count              : Number of fence breaches. (type:uint16_t)
 |      mods_enabled              : AP_Limit_Module bitfield of enabled modules. (type:uint8_t, values:LIMIT_MODULE)
 |      mods_required             : AP_Limit_Module bitfield of required modules. (type:uint8_t, values:LIMIT_MODULE)
 |      mods_triggered            : AP_Limit_Module bitfield of triggered modules. (type:uint8_t, values:LIMIT_MODULE)
 |  
 |  local_position_ned_cov_encode(self, time_usec, estimator_type, x, y, z, vx, vy, vz, ax, ay, az, covariance)
 |      The filtered local position (e.g. fused computer vision and
 |      accelerometers). Coordinate frame is right-handed,
 |      Z-axis down (aeronautical frame, NED / north-east-down
 |      convention)
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      estimator_type            : Class id of the estimator this estimate originated from. (type:uint8_t, values:MAV_ESTIMATOR_TYPE)
 |      x                         : X Position [m] (type:float)
 |      y                         : Y Position [m] (type:float)
 |      z                         : Z Position [m] (type:float)
 |      vx                        : X Speed [m/s] (type:float)
 |      vy                        : Y Speed [m/s] (type:float)
 |      vz                        : Z Speed [m/s] (type:float)
 |      ax                        : X Acceleration [m/s/s] (type:float)
 |      ay                        : Y Acceleration [m/s/s] (type:float)
 |      az                        : Z Acceleration [m/s/s] (type:float)
 |      covariance                : Row-major representation of position, velocity and acceleration 9x9 cross-covariance matrix upper right triangle (states: x, y, z, vx, vy, vz, ax, ay, az; first nine entries are the first ROW, next eight entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |  
 |  local_position_ned_cov_send(self, time_usec, estimator_type, x, y, z, vx, vy, vz, ax, ay, az, covariance, force_mavlink1=False)
 |      The filtered local position (e.g. fused computer vision and
 |      accelerometers). Coordinate frame is right-handed,
 |      Z-axis down (aeronautical frame, NED / north-east-down
 |      convention)
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      estimator_type            : Class id of the estimator this estimate originated from. (type:uint8_t, values:MAV_ESTIMATOR_TYPE)
 |      x                         : X Position [m] (type:float)
 |      y                         : Y Position [m] (type:float)
 |      z                         : Z Position [m] (type:float)
 |      vx                        : X Speed [m/s] (type:float)
 |      vy                        : Y Speed [m/s] (type:float)
 |      vz                        : Z Speed [m/s] (type:float)
 |      ax                        : X Acceleration [m/s/s] (type:float)
 |      ay                        : Y Acceleration [m/s/s] (type:float)
 |      az                        : Z Acceleration [m/s/s] (type:float)
 |      covariance                : Row-major representation of position, velocity and acceleration 9x9 cross-covariance matrix upper right triangle (states: x, y, z, vx, vy, vz, ax, ay, az; first nine entries are the first ROW, next eight entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |  
 |  local_position_ned_encode(self, time_boot_ms, x, y, z, vx, vy, vz)
 |      The filtered local position (e.g. fused computer vision and
 |      accelerometers). Coordinate frame is right-handed,
 |      Z-axis down (aeronautical frame, NED / north-east-down
 |      convention)
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      x                         : X Position [m] (type:float)
 |      y                         : Y Position [m] (type:float)
 |      z                         : Z Position [m] (type:float)
 |      vx                        : X Speed [m/s] (type:float)
 |      vy                        : Y Speed [m/s] (type:float)
 |      vz                        : Z Speed [m/s] (type:float)
 |  
 |  local_position_ned_send(self, time_boot_ms, x, y, z, vx, vy, vz, force_mavlink1=False)
 |      The filtered local position (e.g. fused computer vision and
 |      accelerometers). Coordinate frame is right-handed,
 |      Z-axis down (aeronautical frame, NED / north-east-down
 |      convention)
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      x                         : X Position [m] (type:float)
 |      y                         : Y Position [m] (type:float)
 |      z                         : Z Position [m] (type:float)
 |      vx                        : X Speed [m/s] (type:float)
 |      vy                        : Y Speed [m/s] (type:float)
 |      vz                        : Z Speed [m/s] (type:float)
 |  
 |  local_position_ned_system_global_offset_encode(self, time_boot_ms, x, y, z, roll, pitch, yaw)
 |      The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages
 |      of MAV X and the global coordinate frame in NED
 |      coordinates. Coordinate frame is right-handed, Z-axis
 |      down (aeronautical frame, NED / north-east-down
 |      convention)
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      x                         : X Position [m] (type:float)
 |      y                         : Y Position [m] (type:float)
 |      z                         : Z Position [m] (type:float)
 |      roll                      : Roll [rad] (type:float)
 |      pitch                     : Pitch [rad] (type:float)
 |      yaw                       : Yaw [rad] (type:float)
 |  
 |  local_position_ned_system_global_offset_send(self, time_boot_ms, x, y, z, roll, pitch, yaw, force_mavlink1=False)
 |      The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages
 |      of MAV X and the global coordinate frame in NED
 |      coordinates. Coordinate frame is right-handed, Z-axis
 |      down (aeronautical frame, NED / north-east-down
 |      convention)
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      x                         : X Position [m] (type:float)
 |      y                         : Y Position [m] (type:float)
 |      z                         : Z Position [m] (type:float)
 |      roll                      : Roll [rad] (type:float)
 |      pitch                     : Pitch [rad] (type:float)
 |      yaw                       : Yaw [rad] (type:float)
 |  
 |  log_data_encode(self, id, ofs, count, data)
 |      Reply to LOG_REQUEST_DATA
 |      
 |      id                        : Log id (from LOG_ENTRY reply) (type:uint16_t)
 |      ofs                       : Offset into the log (type:uint32_t)
 |      count                     : Number of bytes (zero for end of log) [bytes] (type:uint8_t)
 |      data                      : log data (type:uint8_t)
 |  
 |  log_data_send(self, id, ofs, count, data, force_mavlink1=False)
 |      Reply to LOG_REQUEST_DATA
 |      
 |      id                        : Log id (from LOG_ENTRY reply) (type:uint16_t)
 |      ofs                       : Offset into the log (type:uint32_t)
 |      count                     : Number of bytes (zero for end of log) [bytes] (type:uint8_t)
 |      data                      : log data (type:uint8_t)
 |  
 |  log_entry_encode(self, id, num_logs, last_log_num, time_utc, size)
 |      Reply to LOG_REQUEST_LIST
 |      
 |      id                        : Log id (type:uint16_t)
 |      num_logs                  : Total number of logs (type:uint16_t)
 |      last_log_num              : High log number (type:uint16_t)
 |      time_utc                  : UTC timestamp of log since 1970, or 0 if not available [s] (type:uint32_t)
 |      size                      : Size of the log (may be approximate) [bytes] (type:uint32_t)
 |  
 |  log_entry_send(self, id, num_logs, last_log_num, time_utc, size, force_mavlink1=False)
 |      Reply to LOG_REQUEST_LIST
 |      
 |      id                        : Log id (type:uint16_t)
 |      num_logs                  : Total number of logs (type:uint16_t)
 |      last_log_num              : High log number (type:uint16_t)
 |      time_utc                  : UTC timestamp of log since 1970, or 0 if not available [s] (type:uint32_t)
 |      size                      : Size of the log (may be approximate) [bytes] (type:uint32_t)
 |  
 |  log_erase_encode(self, target_system, target_component)
 |      Erase all logs
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |  
 |  log_erase_send(self, target_system, target_component, force_mavlink1=False)
 |      Erase all logs
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |  
 |  log_request_data_encode(self, target_system, target_component, id, ofs, count)
 |      Request a chunk of a log
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      id                        : Log id (from LOG_ENTRY reply) (type:uint16_t)
 |      ofs                       : Offset into the log (type:uint32_t)
 |      count                     : Number of bytes [bytes] (type:uint32_t)
 |  
 |  log_request_data_send(self, target_system, target_component, id, ofs, count, force_mavlink1=False)
 |      Request a chunk of a log
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      id                        : Log id (from LOG_ENTRY reply) (type:uint16_t)
 |      ofs                       : Offset into the log (type:uint32_t)
 |      count                     : Number of bytes [bytes] (type:uint32_t)
 |  
 |  log_request_end_encode(self, target_system, target_component)
 |      Stop log transfer and resume normal logging
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |  
 |  log_request_end_send(self, target_system, target_component, force_mavlink1=False)
 |      Stop log transfer and resume normal logging
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |  
 |  log_request_list_encode(self, target_system, target_component, start, end)
 |      Request a list of available logs. On some systems calling this may
 |      stop on-board logging until LOG_REQUEST_END is called.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      start                     : First log id (0 for first available) (type:uint16_t)
 |      end                       : Last log id (0xffff for last available) (type:uint16_t)
 |  
 |  log_request_list_send(self, target_system, target_component, start, end, force_mavlink1=False)
 |      Request a list of available logs. On some systems calling this may
 |      stop on-board logging until LOG_REQUEST_END is called.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      start                     : First log id (0 for first available) (type:uint16_t)
 |      end                       : Last log id (0xffff for last available) (type:uint16_t)
 |  
 |  logging_ack_encode(self, target_system, target_component, sequence)
 |      An ack for a LOGGING_DATA_ACKED message
 |      
 |      target_system             : system ID of the target (type:uint8_t)
 |      target_component          : component ID of the target (type:uint8_t)
 |      sequence                  : sequence number (must match the one in LOGGING_DATA_ACKED) (type:uint16_t)
 |  
 |  logging_ack_send(self, target_system, target_component, sequence, force_mavlink1=False)
 |      An ack for a LOGGING_DATA_ACKED message
 |      
 |      target_system             : system ID of the target (type:uint8_t)
 |      target_component          : component ID of the target (type:uint8_t)
 |      sequence                  : sequence number (must match the one in LOGGING_DATA_ACKED) (type:uint16_t)
 |  
 |  logging_data_acked_encode(self, target_system, target_component, sequence, length, first_message_offset, data)
 |      A message containing logged data which requires a LOGGING_ACK to be
 |      sent back
 |      
 |      target_system             : system ID of the target (type:uint8_t)
 |      target_component          : component ID of the target (type:uint8_t)
 |      sequence                  : sequence number (can wrap) (type:uint16_t)
 |      length                    : data length [bytes] (type:uint8_t)
 |      first_message_offset        : offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to 255 if no start exists). [bytes] (type:uint8_t)
 |      data                      : logged data (type:uint8_t)
 |  
 |  logging_data_acked_send(self, target_system, target_component, sequence, length, first_message_offset, data, force_mavlink1=False)
 |      A message containing logged data which requires a LOGGING_ACK to be
 |      sent back
 |      
 |      target_system             : system ID of the target (type:uint8_t)
 |      target_component          : component ID of the target (type:uint8_t)
 |      sequence                  : sequence number (can wrap) (type:uint16_t)
 |      length                    : data length [bytes] (type:uint8_t)
 |      first_message_offset        : offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to 255 if no start exists). [bytes] (type:uint8_t)
 |      data                      : logged data (type:uint8_t)
 |  
 |  logging_data_encode(self, target_system, target_component, sequence, length, first_message_offset, data)
 |      A message containing logged data (see also MAV_CMD_LOGGING_START)
 |      
 |      target_system             : system ID of the target (type:uint8_t)
 |      target_component          : component ID of the target (type:uint8_t)
 |      sequence                  : sequence number (can wrap) (type:uint16_t)
 |      length                    : data length [bytes] (type:uint8_t)
 |      first_message_offset        : offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to 255 if no start exists). [bytes] (type:uint8_t)
 |      data                      : logged data (type:uint8_t)
 |  
 |  logging_data_send(self, target_system, target_component, sequence, length, first_message_offset, data, force_mavlink1=False)
 |      A message containing logged data (see also MAV_CMD_LOGGING_START)
 |      
 |      target_system             : system ID of the target (type:uint8_t)
 |      target_component          : component ID of the target (type:uint8_t)
 |      sequence                  : sequence number (can wrap) (type:uint16_t)
 |      length                    : data length [bytes] (type:uint8_t)
 |      first_message_offset        : offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to 255 if no start exists). [bytes] (type:uint8_t)
 |      data                      : logged data (type:uint8_t)
 |  
 |  mag_cal_progress_encode(self, compass_id, cal_mask, cal_status, attempt, completion_pct, completion_mask, direction_x, direction_y, direction_z)
 |      Reports progress of compass calibration.
 |      
 |      compass_id                : Compass being calibrated. (type:uint8_t)
 |      cal_mask                  : Bitmask of compasses being calibrated. (type:uint8_t)
 |      cal_status                : Calibration Status. (type:uint8_t, values:MAG_CAL_STATUS)
 |      attempt                   : Attempt number. (type:uint8_t)
 |      completion_pct            : Completion percentage. [%] (type:uint8_t)
 |      completion_mask           : Bitmask of sphere sections (see http://en.wikipedia.org/wiki/Geodesic_grid). (type:uint8_t)
 |      direction_x               : Body frame direction vector for display. (type:float)
 |      direction_y               : Body frame direction vector for display. (type:float)
 |      direction_z               : Body frame direction vector for display. (type:float)
 |  
 |  mag_cal_progress_send(self, compass_id, cal_mask, cal_status, attempt, completion_pct, completion_mask, direction_x, direction_y, direction_z, force_mavlink1=False)
 |      Reports progress of compass calibration.
 |      
 |      compass_id                : Compass being calibrated. (type:uint8_t)
 |      cal_mask                  : Bitmask of compasses being calibrated. (type:uint8_t)
 |      cal_status                : Calibration Status. (type:uint8_t, values:MAG_CAL_STATUS)
 |      attempt                   : Attempt number. (type:uint8_t)
 |      completion_pct            : Completion percentage. [%] (type:uint8_t)
 |      completion_mask           : Bitmask of sphere sections (see http://en.wikipedia.org/wiki/Geodesic_grid). (type:uint8_t)
 |      direction_x               : Body frame direction vector for display. (type:float)
 |      direction_y               : Body frame direction vector for display. (type:float)
 |      direction_z               : Body frame direction vector for display. (type:float)
 |  
 |  mag_cal_report_encode(self, compass_id, cal_mask, cal_status, autosaved, fitness, ofs_x, ofs_y, ofs_z, diag_x, diag_y, diag_z, offdiag_x, offdiag_y, offdiag_z, orientation_confidence=0, old_orientation=0, new_orientation=0, scale_factor=0)
 |      Reports results of completed compass calibration. Sent until
 |      MAG_CAL_ACK received.
 |      
 |      compass_id                : Compass being calibrated. (type:uint8_t)
 |      cal_mask                  : Bitmask of compasses being calibrated. (type:uint8_t)
 |      cal_status                : Calibration Status. (type:uint8_t, values:MAG_CAL_STATUS)
 |      autosaved                 : 0=requires a MAV_CMD_DO_ACCEPT_MAG_CAL, 1=saved to parameters. (type:uint8_t)
 |      fitness                   : RMS milligauss residuals. [mgauss] (type:float)
 |      ofs_x                     : X offset. (type:float)
 |      ofs_y                     : Y offset. (type:float)
 |      ofs_z                     : Z offset. (type:float)
 |      diag_x                    : X diagonal (matrix 11). (type:float)
 |      diag_y                    : Y diagonal (matrix 22). (type:float)
 |      diag_z                    : Z diagonal (matrix 33). (type:float)
 |      offdiag_x                 : X off-diagonal (matrix 12 and 21). (type:float)
 |      offdiag_y                 : Y off-diagonal (matrix 13 and 31). (type:float)
 |      offdiag_z                 : Z off-diagonal (matrix 32 and 23). (type:float)
 |      orientation_confidence        : Confidence in orientation (higher is better). (type:float)
 |      old_orientation           : orientation before calibration. (type:uint8_t, values:MAV_SENSOR_ORIENTATION)
 |      new_orientation           : orientation after calibration. (type:uint8_t, values:MAV_SENSOR_ORIENTATION)
 |      scale_factor              : field radius correction factor (type:float)
 |  
 |  mag_cal_report_send(self, compass_id, cal_mask, cal_status, autosaved, fitness, ofs_x, ofs_y, ofs_z, diag_x, diag_y, diag_z, offdiag_x, offdiag_y, offdiag_z, orientation_confidence=0, old_orientation=0, new_orientation=0, scale_factor=0, force_mavlink1=False)
 |      Reports results of completed compass calibration. Sent until
 |      MAG_CAL_ACK received.
 |      
 |      compass_id                : Compass being calibrated. (type:uint8_t)
 |      cal_mask                  : Bitmask of compasses being calibrated. (type:uint8_t)
 |      cal_status                : Calibration Status. (type:uint8_t, values:MAG_CAL_STATUS)
 |      autosaved                 : 0=requires a MAV_CMD_DO_ACCEPT_MAG_CAL, 1=saved to parameters. (type:uint8_t)
 |      fitness                   : RMS milligauss residuals. [mgauss] (type:float)
 |      ofs_x                     : X offset. (type:float)
 |      ofs_y                     : Y offset. (type:float)
 |      ofs_z                     : Z offset. (type:float)
 |      diag_x                    : X diagonal (matrix 11). (type:float)
 |      diag_y                    : Y diagonal (matrix 22). (type:float)
 |      diag_z                    : Z diagonal (matrix 33). (type:float)
 |      offdiag_x                 : X off-diagonal (matrix 12 and 21). (type:float)
 |      offdiag_y                 : Y off-diagonal (matrix 13 and 31). (type:float)
 |      offdiag_z                 : Z off-diagonal (matrix 32 and 23). (type:float)
 |      orientation_confidence        : Confidence in orientation (higher is better). (type:float)
 |      old_orientation           : orientation before calibration. (type:uint8_t, values:MAV_SENSOR_ORIENTATION)
 |      new_orientation           : orientation after calibration. (type:uint8_t, values:MAV_SENSOR_ORIENTATION)
 |      scale_factor              : field radius correction factor (type:float)
 |  
 |  manual_control_encode(self, target, x, y, z, r, buttons)
 |      This message provides an API for manually controlling the vehicle
 |      using standard joystick axes nomenclature, along with
 |      a joystick-like input device. Unused axes can be
 |      disabled an buttons are also transmit as boolean
 |      values of their
 |      
 |      target                    : The system to be controlled. (type:uint8_t)
 |      x                         : X-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to forward(1000)-backward(-1000) movement on a joystick and the pitch of a vehicle. (type:int16_t)
 |      y                         : Y-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to left(-1000)-right(1000) movement on a joystick and the roll of a vehicle. (type:int16_t)
 |      z                         : Z-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a separate slider movement with maximum being 1000 and minimum being -1000 on a joystick and the thrust of a vehicle. Positive values are positive thrust, negative values are negative thrust. (type:int16_t)
 |      r                         : R-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a twisting of the joystick, with counter-clockwise being 1000 and clockwise being -1000, and the yaw of a vehicle. (type:int16_t)
 |      buttons                   : A bitfield corresponding to the joystick buttons' current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 1. (type:uint16_t)
 |  
 |  manual_control_send(self, target, x, y, z, r, buttons, force_mavlink1=False)
 |      This message provides an API for manually controlling the vehicle
 |      using standard joystick axes nomenclature, along with
 |      a joystick-like input device. Unused axes can be
 |      disabled an buttons are also transmit as boolean
 |      values of their
 |      
 |      target                    : The system to be controlled. (type:uint8_t)
 |      x                         : X-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to forward(1000)-backward(-1000) movement on a joystick and the pitch of a vehicle. (type:int16_t)
 |      y                         : Y-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to left(-1000)-right(1000) movement on a joystick and the roll of a vehicle. (type:int16_t)
 |      z                         : Z-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a separate slider movement with maximum being 1000 and minimum being -1000 on a joystick and the thrust of a vehicle. Positive values are positive thrust, negative values are negative thrust. (type:int16_t)
 |      r                         : R-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a twisting of the joystick, with counter-clockwise being 1000 and clockwise being -1000, and the yaw of a vehicle. (type:int16_t)
 |      buttons                   : A bitfield corresponding to the joystick buttons' current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 1. (type:uint16_t)
 |  
 |  manual_setpoint_encode(self, time_boot_ms, roll, pitch, yaw, thrust, mode_switch, manual_override_switch)
 |      Setpoint in roll, pitch, yaw and thrust from the operator
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      roll                      : Desired roll rate [rad/s] (type:float)
 |      pitch                     : Desired pitch rate [rad/s] (type:float)
 |      yaw                       : Desired yaw rate [rad/s] (type:float)
 |      thrust                    : Collective thrust, normalized to 0 .. 1 (type:float)
 |      mode_switch               : Flight mode switch position, 0.. 255 (type:uint8_t)
 |      manual_override_switch        : Override mode switch position, 0.. 255 (type:uint8_t)
 |  
 |  manual_setpoint_send(self, time_boot_ms, roll, pitch, yaw, thrust, mode_switch, manual_override_switch, force_mavlink1=False)
 |      Setpoint in roll, pitch, yaw and thrust from the operator
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      roll                      : Desired roll rate [rad/s] (type:float)
 |      pitch                     : Desired pitch rate [rad/s] (type:float)
 |      yaw                       : Desired yaw rate [rad/s] (type:float)
 |      thrust                    : Collective thrust, normalized to 0 .. 1 (type:float)
 |      mode_switch               : Flight mode switch position, 0.. 255 (type:uint8_t)
 |      manual_override_switch        : Override mode switch position, 0.. 255 (type:uint8_t)
 |  
 |  meminfo_encode(self, brkval, freemem, freemem32=0)
 |      State of APM memory.
 |      
 |      brkval                    : Heap top. (type:uint16_t)
 |      freemem                   : Free memory. [bytes] (type:uint16_t)
 |      freemem32                 : Free memory (32 bit). [bytes] (type:uint32_t)
 |  
 |  meminfo_send(self, brkval, freemem, freemem32=0, force_mavlink1=False)
 |      State of APM memory.
 |      
 |      brkval                    : Heap top. (type:uint16_t)
 |      freemem                   : Free memory. [bytes] (type:uint16_t)
 |      freemem32                 : Free memory (32 bit). [bytes] (type:uint32_t)
 |  
 |  memory_vect_encode(self, address, ver, type, value)
 |      Send raw controller memory. The use of this message is discouraged for
 |      normal packets, but a quite efficient way for testing
 |      new messages and getting experimental debug output.
 |      
 |      address                   : Starting address of the debug variables (type:uint16_t)
 |      ver                       : Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below (type:uint8_t)
 |      type                      : Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14 (type:uint8_t)
 |      value                     : Memory contents at specified address (type:int8_t)
 |  
 |  memory_vect_send(self, address, ver, type, value, force_mavlink1=False)
 |      Send raw controller memory. The use of this message is discouraged for
 |      normal packets, but a quite efficient way for testing
 |      new messages and getting experimental debug output.
 |      
 |      address                   : Starting address of the debug variables (type:uint16_t)
 |      ver                       : Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below (type:uint8_t)
 |      type                      : Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14 (type:uint8_t)
 |      value                     : Memory contents at specified address (type:int8_t)
 |  
 |  message_interval_encode(self, message_id, interval_us)
 |      The interval between messages for a particular MAVLink message ID.
 |      This message is the response to the
 |      MAV_CMD_GET_MESSAGE_INTERVAL command. This interface
 |      replaces DATA_STREAM.
 |      
 |      message_id                : The ID of the requested MAVLink message. v1.0 is limited to 254 messages. (type:uint16_t)
 |      interval_us               : The interval between two messages. A value of -1 indicates this stream is disabled, 0 indicates it is not available, > 0 indicates the interval at which it is sent. [us] (type:int32_t)
 |  
 |  message_interval_send(self, message_id, interval_us, force_mavlink1=False)
 |      The interval between messages for a particular MAVLink message ID.
 |      This message is the response to the
 |      MAV_CMD_GET_MESSAGE_INTERVAL command. This interface
 |      replaces DATA_STREAM.
 |      
 |      message_id                : The ID of the requested MAVLink message. v1.0 is limited to 254 messages. (type:uint16_t)
 |      interval_us               : The interval between two messages. A value of -1 indicates this stream is disabled, 0 indicates it is not available, > 0 indicates the interval at which it is sent. [us] (type:int32_t)
 |  
 |  mission_ack_encode(self, target_system, target_component, type, mission_type=0)
 |      Acknowledgment message during waypoint handling. The type field states
 |      if this message is a positive ack (type=0) or if an
 |      error happened (type=non-zero).
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      type                      : Mission result. (type:uint8_t, values:MAV_MISSION_RESULT)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_ack_send(self, target_system, target_component, type, mission_type=0, force_mavlink1=False)
 |      Acknowledgment message during waypoint handling. The type field states
 |      if this message is a positive ack (type=0) or if an
 |      error happened (type=non-zero).
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      type                      : Mission result. (type:uint8_t, values:MAV_MISSION_RESULT)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_clear_all_encode(self, target_system, target_component, mission_type=0)
 |      Delete all mission items at once.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_clear_all_send(self, target_system, target_component, mission_type=0, force_mavlink1=False)
 |      Delete all mission items at once.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_count_encode(self, target_system, target_component, count, mission_type=0)
 |      This message is emitted as response to MISSION_REQUEST_LIST by the MAV
 |      and to initiate a write transaction. The GCS can then
 |      request the individual mission item based on the
 |      knowledge of the total number of waypoints.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      count                     : Number of mission items in the sequence (type:uint16_t)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_count_send(self, target_system, target_component, count, mission_type=0, force_mavlink1=False)
 |      This message is emitted as response to MISSION_REQUEST_LIST by the MAV
 |      and to initiate a write transaction. The GCS can then
 |      request the individual mission item based on the
 |      knowledge of the total number of waypoints.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      count                     : Number of mission items in the sequence (type:uint16_t)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_current_encode(self, seq)
 |      Message that announces the sequence number of the current active
 |      mission item. The MAV will fly towards this mission
 |      item.
 |      
 |      seq                       : Sequence (type:uint16_t)
 |  
 |  mission_current_send(self, seq, force_mavlink1=False)
 |      Message that announces the sequence number of the current active
 |      mission item. The MAV will fly towards this mission
 |      item.
 |      
 |      seq                       : Sequence (type:uint16_t)
 |  
 |  mission_item_encode(self, target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z, mission_type=0)
 |      Message encoding a mission item. This message is emitted to announce
 |      the presence of a mission item and to set a mission
 |      item on the system. The mission item can be either in
 |      x, y, z meters (type: LOCAL) or x:lat, y:lon,
 |      z:altitude. Local frame is Z-down, right handed (NED),
 |      global frame is Z-up, right handed (ENU). See also
 |      https://mavlink.io/en/services/mission.html.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      seq                       : Sequence (type:uint16_t)
 |      frame                     : The coordinate system of the waypoint. (type:uint8_t, values:MAV_FRAME)
 |      command                   : The scheduled action for the waypoint. (type:uint16_t, values:MAV_CMD)
 |      current                   : false:0, true:1 (type:uint8_t)
 |      autocontinue              : Autocontinue to next waypoint (type:uint8_t)
 |      param1                    : PARAM1, see MAV_CMD enum (type:float)
 |      param2                    : PARAM2, see MAV_CMD enum (type:float)
 |      param3                    : PARAM3, see MAV_CMD enum (type:float)
 |      param4                    : PARAM4, see MAV_CMD enum (type:float)
 |      x                         : PARAM5 / local: X coordinate, global: latitude (type:float)
 |      y                         : PARAM6 / local: Y coordinate, global: longitude (type:float)
 |      z                         : PARAM7 / local: Z coordinate, global: altitude (relative or absolute, depending on frame). (type:float)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_item_int_encode(self, target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z, mission_type=0)
 |      Message encoding a mission item. This message is emitted to announce
 |      the presence of a mission item and to set a mission
 |      item on the system. The mission item can be either in
 |      x, y, z meters (type: LOCAL) or x:lat, y:lon,
 |      z:altitude. Local frame is Z-down, right handed (NED),
 |      global frame is Z-up, right handed (ENU). See also
 |      https://mavlink.io/en/services/mission.html.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      seq                       : Waypoint ID (sequence number). Starts at zero. Increases monotonically for each waypoint, no gaps in the sequence (0,1,2,3,4). (type:uint16_t)
 |      frame                     : The coordinate system of the waypoint. (type:uint8_t, values:MAV_FRAME)
 |      command                   : The scheduled action for the waypoint. (type:uint16_t, values:MAV_CMD)
 |      current                   : false:0, true:1 (type:uint8_t)
 |      autocontinue              : Autocontinue to next waypoint (type:uint8_t)
 |      param1                    : PARAM1, see MAV_CMD enum (type:float)
 |      param2                    : PARAM2, see MAV_CMD enum (type:float)
 |      param3                    : PARAM3, see MAV_CMD enum (type:float)
 |      param4                    : PARAM4, see MAV_CMD enum (type:float)
 |      x                         : PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7 (type:int32_t)
 |      y                         : PARAM6 / y position: local: x position in meters * 1e4, global: longitude in degrees *10^7 (type:int32_t)
 |      z                         : PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame. (type:float)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_item_int_send(self, target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z, mission_type=0, force_mavlink1=False)
 |      Message encoding a mission item. This message is emitted to announce
 |      the presence of a mission item and to set a mission
 |      item on the system. The mission item can be either in
 |      x, y, z meters (type: LOCAL) or x:lat, y:lon,
 |      z:altitude. Local frame is Z-down, right handed (NED),
 |      global frame is Z-up, right handed (ENU). See also
 |      https://mavlink.io/en/services/mission.html.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      seq                       : Waypoint ID (sequence number). Starts at zero. Increases monotonically for each waypoint, no gaps in the sequence (0,1,2,3,4). (type:uint16_t)
 |      frame                     : The coordinate system of the waypoint. (type:uint8_t, values:MAV_FRAME)
 |      command                   : The scheduled action for the waypoint. (type:uint16_t, values:MAV_CMD)
 |      current                   : false:0, true:1 (type:uint8_t)
 |      autocontinue              : Autocontinue to next waypoint (type:uint8_t)
 |      param1                    : PARAM1, see MAV_CMD enum (type:float)
 |      param2                    : PARAM2, see MAV_CMD enum (type:float)
 |      param3                    : PARAM3, see MAV_CMD enum (type:float)
 |      param4                    : PARAM4, see MAV_CMD enum (type:float)
 |      x                         : PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7 (type:int32_t)
 |      y                         : PARAM6 / y position: local: x position in meters * 1e4, global: longitude in degrees *10^7 (type:int32_t)
 |      z                         : PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame. (type:float)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_item_reached_encode(self, seq)
 |      A certain mission item has been reached. The system will either hold
 |      this position (or circle on the orbit) or (if the
 |      autocontinue on the WP was set) continue to the next
 |      waypoint.
 |      
 |      seq                       : Sequence (type:uint16_t)
 |  
 |  mission_item_reached_send(self, seq, force_mavlink1=False)
 |      A certain mission item has been reached. The system will either hold
 |      this position (or circle on the orbit) or (if the
 |      autocontinue on the WP was set) continue to the next
 |      waypoint.
 |      
 |      seq                       : Sequence (type:uint16_t)
 |  
 |  mission_item_send(self, target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z, mission_type=0, force_mavlink1=False)
 |      Message encoding a mission item. This message is emitted to announce
 |      the presence of a mission item and to set a mission
 |      item on the system. The mission item can be either in
 |      x, y, z meters (type: LOCAL) or x:lat, y:lon,
 |      z:altitude. Local frame is Z-down, right handed (NED),
 |      global frame is Z-up, right handed (ENU). See also
 |      https://mavlink.io/en/services/mission.html.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      seq                       : Sequence (type:uint16_t)
 |      frame                     : The coordinate system of the waypoint. (type:uint8_t, values:MAV_FRAME)
 |      command                   : The scheduled action for the waypoint. (type:uint16_t, values:MAV_CMD)
 |      current                   : false:0, true:1 (type:uint8_t)
 |      autocontinue              : Autocontinue to next waypoint (type:uint8_t)
 |      param1                    : PARAM1, see MAV_CMD enum (type:float)
 |      param2                    : PARAM2, see MAV_CMD enum (type:float)
 |      param3                    : PARAM3, see MAV_CMD enum (type:float)
 |      param4                    : PARAM4, see MAV_CMD enum (type:float)
 |      x                         : PARAM5 / local: X coordinate, global: latitude (type:float)
 |      y                         : PARAM6 / local: Y coordinate, global: longitude (type:float)
 |      z                         : PARAM7 / local: Z coordinate, global: altitude (relative or absolute, depending on frame). (type:float)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_request_encode(self, target_system, target_component, seq, mission_type=0)
 |      Request the information of the mission item with the sequence number
 |      seq. The response of the system to this message should
 |      be a MISSION_ITEM message.
 |      https://mavlink.io/en/services/mission.html
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      seq                       : Sequence (type:uint16_t)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_request_int_encode(self, target_system, target_component, seq, mission_type=0)
 |      Request the information of the mission item with the sequence number
 |      seq. The response of the system to this message should
 |      be a MISSION_ITEM_INT message.
 |      https://mavlink.io/en/services/mission.html
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      seq                       : Sequence (type:uint16_t)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_request_int_send(self, target_system, target_component, seq, mission_type=0, force_mavlink1=False)
 |      Request the information of the mission item with the sequence number
 |      seq. The response of the system to this message should
 |      be a MISSION_ITEM_INT message.
 |      https://mavlink.io/en/services/mission.html
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      seq                       : Sequence (type:uint16_t)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_request_list_encode(self, target_system, target_component, mission_type=0)
 |      Request the overall list of mission items from the system/component.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_request_list_send(self, target_system, target_component, mission_type=0, force_mavlink1=False)
 |      Request the overall list of mission items from the system/component.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_request_partial_list_encode(self, target_system, target_component, start_index, end_index, mission_type=0)
 |      Request a partial list of mission items from the system/component.
 |      https://mavlink.io/en/services/mission.html. If start
 |      and end index are the same, just send one waypoint.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      start_index               : Start index (type:int16_t)
 |      end_index                 : End index, -1 by default (-1: send list to end). Else a valid index of the list (type:int16_t)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_request_partial_list_send(self, target_system, target_component, start_index, end_index, mission_type=0, force_mavlink1=False)
 |      Request a partial list of mission items from the system/component.
 |      https://mavlink.io/en/services/mission.html. If start
 |      and end index are the same, just send one waypoint.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      start_index               : Start index (type:int16_t)
 |      end_index                 : End index, -1 by default (-1: send list to end). Else a valid index of the list (type:int16_t)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_request_send(self, target_system, target_component, seq, mission_type=0, force_mavlink1=False)
 |      Request the information of the mission item with the sequence number
 |      seq. The response of the system to this message should
 |      be a MISSION_ITEM message.
 |      https://mavlink.io/en/services/mission.html
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      seq                       : Sequence (type:uint16_t)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_set_current_encode(self, target_system, target_component, seq)
 |      Set the mission item with sequence number seq as current item. This
 |      means that the MAV will continue to this mission item
 |      on the shortest path (not following the mission items
 |      in-between).
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      seq                       : Sequence (type:uint16_t)
 |  
 |  mission_set_current_send(self, target_system, target_component, seq, force_mavlink1=False)
 |      Set the mission item with sequence number seq as current item. This
 |      means that the MAV will continue to this mission item
 |      on the shortest path (not following the mission items
 |      in-between).
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      seq                       : Sequence (type:uint16_t)
 |  
 |  mission_write_partial_list_encode(self, target_system, target_component, start_index, end_index, mission_type=0)
 |      This message is sent to the MAV to write a partial list. If start
 |      index == end index, only one item will be transmitted
 |      / updated. If the start index is NOT 0 and above the
 |      current list size, this request should be REJECTED!
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      start_index               : Start index. Must be smaller / equal to the largest index of the current onboard list. (type:int16_t)
 |      end_index                 : End index, equal or greater than start index. (type:int16_t)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mission_write_partial_list_send(self, target_system, target_component, start_index, end_index, mission_type=0, force_mavlink1=False)
 |      This message is sent to the MAV to write a partial list. If start
 |      index == end index, only one item will be transmitted
 |      / updated. If the start index is NOT 0 and above the
 |      current list size, this request should be REJECTED!
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      start_index               : Start index. Must be smaller / equal to the largest index of the current onboard list. (type:int16_t)
 |      end_index                 : End index, equal or greater than start index. (type:int16_t)
 |      mission_type              : Mission type. (type:uint8_t, values:MAV_MISSION_TYPE)
 |  
 |  mount_configure_encode(self, target_system, target_component, mount_mode, stab_roll, stab_pitch, stab_yaw)
 |      Message to configure a camera mount, directional antenna, etc.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      mount_mode                : Mount operating mode. (type:uint8_t, values:MAV_MOUNT_MODE)
 |      stab_roll                 : (1 = yes, 0 = no). (type:uint8_t)
 |      stab_pitch                : (1 = yes, 0 = no). (type:uint8_t)
 |      stab_yaw                  : (1 = yes, 0 = no). (type:uint8_t)
 |  
 |  mount_configure_send(self, target_system, target_component, mount_mode, stab_roll, stab_pitch, stab_yaw, force_mavlink1=False)
 |      Message to configure a camera mount, directional antenna, etc.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      mount_mode                : Mount operating mode. (type:uint8_t, values:MAV_MOUNT_MODE)
 |      stab_roll                 : (1 = yes, 0 = no). (type:uint8_t)
 |      stab_pitch                : (1 = yes, 0 = no). (type:uint8_t)
 |      stab_yaw                  : (1 = yes, 0 = no). (type:uint8_t)
 |  
 |  mount_control_encode(self, target_system, target_component, input_a, input_b, input_c, save_position)
 |      Message to control a camera mount, directional antenna, etc.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      input_a                   : Pitch (centi-degrees) or lat (degE7), depending on mount mode. (type:int32_t)
 |      input_b                   : Roll (centi-degrees) or lon (degE7) depending on mount mode. (type:int32_t)
 |      input_c                   : Yaw (centi-degrees) or alt (cm) depending on mount mode. (type:int32_t)
 |      save_position             : If "1" it will save current trimmed position on EEPROM (just valid for NEUTRAL and LANDING). (type:uint8_t)
 |  
 |  mount_control_send(self, target_system, target_component, input_a, input_b, input_c, save_position, force_mavlink1=False)
 |      Message to control a camera mount, directional antenna, etc.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      input_a                   : Pitch (centi-degrees) or lat (degE7), depending on mount mode. (type:int32_t)
 |      input_b                   : Roll (centi-degrees) or lon (degE7) depending on mount mode. (type:int32_t)
 |      input_c                   : Yaw (centi-degrees) or alt (cm) depending on mount mode. (type:int32_t)
 |      save_position             : If "1" it will save current trimmed position on EEPROM (just valid for NEUTRAL and LANDING). (type:uint8_t)
 |  
 |  mount_orientation_encode(self, time_boot_ms, roll, pitch, yaw, yaw_absolute=0)
 |      Orientation of a mount
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      roll                      : Roll in global frame (set to NaN for invalid). [deg] (type:float)
 |      pitch                     : Pitch in global frame (set to NaN for invalid). [deg] (type:float)
 |      yaw                       : Yaw relative to vehicle (set to NaN for invalid). [deg] (type:float)
 |      yaw_absolute              : Yaw in absolute frame relative to Earth's North, north is 0 (set to NaN for invalid). [deg] (type:float)
 |  
 |  mount_orientation_send(self, time_boot_ms, roll, pitch, yaw, yaw_absolute=0, force_mavlink1=False)
 |      Orientation of a mount
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      roll                      : Roll in global frame (set to NaN for invalid). [deg] (type:float)
 |      pitch                     : Pitch in global frame (set to NaN for invalid). [deg] (type:float)
 |      yaw                       : Yaw relative to vehicle (set to NaN for invalid). [deg] (type:float)
 |      yaw_absolute              : Yaw in absolute frame relative to Earth's North, north is 0 (set to NaN for invalid). [deg] (type:float)
 |  
 |  mount_status_encode(self, target_system, target_component, pointing_a, pointing_b, pointing_c)
 |      Message with some status from APM to GCS about camera or antenna
 |      mount.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      pointing_a                : Pitch. [cdeg] (type:int32_t)
 |      pointing_b                : Roll. [cdeg] (type:int32_t)
 |      pointing_c                : Yaw. [cdeg] (type:int32_t)
 |  
 |  mount_status_send(self, target_system, target_component, pointing_a, pointing_b, pointing_c, force_mavlink1=False)
 |      Message with some status from APM to GCS about camera or antenna
 |      mount.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      pointing_a                : Pitch. [cdeg] (type:int32_t)
 |      pointing_b                : Roll. [cdeg] (type:int32_t)
 |      pointing_c                : Yaw. [cdeg] (type:int32_t)
 |  
 |  named_value_float_encode(self, time_boot_ms, name, value)
 |      Send a key-value pair as float. The use of this message is discouraged
 |      for normal packets, but a quite efficient way for
 |      testing new messages and getting experimental debug
 |      output.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      name                      : Name of the debug variable (type:char)
 |      value                     : Floating point value (type:float)
 |  
 |  named_value_float_send(self, time_boot_ms, name, value, force_mavlink1=False)
 |      Send a key-value pair as float. The use of this message is discouraged
 |      for normal packets, but a quite efficient way for
 |      testing new messages and getting experimental debug
 |      output.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      name                      : Name of the debug variable (type:char)
 |      value                     : Floating point value (type:float)
 |  
 |  named_value_int_encode(self, time_boot_ms, name, value)
 |      Send a key-value pair as integer. The use of this message is
 |      discouraged for normal packets, but a quite efficient
 |      way for testing new messages and getting experimental
 |      debug output.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      name                      : Name of the debug variable (type:char)
 |      value                     : Signed integer value (type:int32_t)
 |  
 |  named_value_int_send(self, time_boot_ms, name, value, force_mavlink1=False)
 |      Send a key-value pair as integer. The use of this message is
 |      discouraged for normal packets, but a quite efficient
 |      way for testing new messages and getting experimental
 |      debug output.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      name                      : Name of the debug variable (type:char)
 |      value                     : Signed integer value (type:int32_t)
 |  
 |  nav_controller_output_encode(self, nav_roll, nav_pitch, nav_bearing, target_bearing, wp_dist, alt_error, aspd_error, xtrack_error)
 |      The state of the fixed wing navigation and position controller.
 |      
 |      nav_roll                  : Current desired roll [deg] (type:float)
 |      nav_pitch                 : Current desired pitch [deg] (type:float)
 |      nav_bearing               : Current desired heading [deg] (type:int16_t)
 |      target_bearing            : Bearing to current waypoint/target [deg] (type:int16_t)
 |      wp_dist                   : Distance to active waypoint [m] (type:uint16_t)
 |      alt_error                 : Current altitude error [m] (type:float)
 |      aspd_error                : Current airspeed error [m/s] (type:float)
 |      xtrack_error              : Current crosstrack error on x-y plane [m] (type:float)
 |  
 |  nav_controller_output_send(self, nav_roll, nav_pitch, nav_bearing, target_bearing, wp_dist, alt_error, aspd_error, xtrack_error, force_mavlink1=False)
 |      The state of the fixed wing navigation and position controller.
 |      
 |      nav_roll                  : Current desired roll [deg] (type:float)
 |      nav_pitch                 : Current desired pitch [deg] (type:float)
 |      nav_bearing               : Current desired heading [deg] (type:int16_t)
 |      target_bearing            : Bearing to current waypoint/target [deg] (type:int16_t)
 |      wp_dist                   : Distance to active waypoint [m] (type:uint16_t)
 |      alt_error                 : Current altitude error [m] (type:float)
 |      aspd_error                : Current airspeed error [m/s] (type:float)
 |      xtrack_error              : Current crosstrack error on x-y plane [m] (type:float)
 |  
 |  obstacle_distance_encode(self, time_usec, sensor_type, distances, increment, min_distance, max_distance, increment_f=0, angle_offset=0, frame=0)
 |      Obstacle distances in front of the sensor, starting from the left in
 |      increment degrees to the right
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      sensor_type               : Class id of the distance sensor type. (type:uint8_t, values:MAV_DISTANCE_SENSOR)
 |      distances                 : Distance of obstacles around the vehicle with index 0 corresponding to north + angle_offset, unless otherwise specified in the frame. A value of 0 is valid and means that the obstacle is practically touching the sensor. A value of max_distance +1 means no obstacle is present. A value of UINT16_MAX for unknown/not used. In a array element, one unit corresponds to 1cm. [cm] (type:uint16_t)
 |      increment                 : Angular width in degrees of each array element. Increment direction is clockwise. This field is ignored if increment_f is non-zero. [deg] (type:uint8_t)
 |      min_distance              : Minimum distance the sensor can measure. [cm] (type:uint16_t)
 |      max_distance              : Maximum distance the sensor can measure. [cm] (type:uint16_t)
 |      increment_f               : Angular width in degrees of each array element as a float. If non-zero then this value is used instead of the uint8_t increment field. Positive is clockwise direction, negative is counter-clockwise. [deg] (type:float)
 |      angle_offset              : Relative angle offset of the 0-index element in the distances array. Value of 0 corresponds to forward. Positive is clockwise direction, negative is counter-clockwise. [deg] (type:float)
 |      frame                     : Coordinate frame of reference for the yaw rotation and offset of the sensor data. Defaults to MAV_FRAME_GLOBAL, which is north aligned. For body-mounted sensors use MAV_FRAME_BODY_FRD, which is vehicle front aligned. (type:uint8_t, values:MAV_FRAME)
 |  
 |  obstacle_distance_send(self, time_usec, sensor_type, distances, increment, min_distance, max_distance, increment_f=0, angle_offset=0, frame=0, force_mavlink1=False)
 |      Obstacle distances in front of the sensor, starting from the left in
 |      increment degrees to the right
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      sensor_type               : Class id of the distance sensor type. (type:uint8_t, values:MAV_DISTANCE_SENSOR)
 |      distances                 : Distance of obstacles around the vehicle with index 0 corresponding to north + angle_offset, unless otherwise specified in the frame. A value of 0 is valid and means that the obstacle is practically touching the sensor. A value of max_distance +1 means no obstacle is present. A value of UINT16_MAX for unknown/not used. In a array element, one unit corresponds to 1cm. [cm] (type:uint16_t)
 |      increment                 : Angular width in degrees of each array element. Increment direction is clockwise. This field is ignored if increment_f is non-zero. [deg] (type:uint8_t)
 |      min_distance              : Minimum distance the sensor can measure. [cm] (type:uint16_t)
 |      max_distance              : Maximum distance the sensor can measure. [cm] (type:uint16_t)
 |      increment_f               : Angular width in degrees of each array element as a float. If non-zero then this value is used instead of the uint8_t increment field. Positive is clockwise direction, negative is counter-clockwise. [deg] (type:float)
 |      angle_offset              : Relative angle offset of the 0-index element in the distances array. Value of 0 corresponds to forward. Positive is clockwise direction, negative is counter-clockwise. [deg] (type:float)
 |      frame                     : Coordinate frame of reference for the yaw rotation and offset of the sensor data. Defaults to MAV_FRAME_GLOBAL, which is north aligned. For body-mounted sensors use MAV_FRAME_BODY_FRD, which is vehicle front aligned. (type:uint8_t, values:MAV_FRAME)
 |  
 |  odometry_encode(self, time_usec, frame_id, child_frame_id, x, y, z, q, vx, vy, vz, rollspeed, pitchspeed, yawspeed, pose_covariance, velocity_covariance, reset_counter=0, estimator_type=0)
 |      Odometry message to communicate odometry information with an external
 |      interface. Fits ROS REP 147 standard for aerial
 |      vehicles (http://www.ros.org/reps/rep-0147.html).
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      frame_id                  : Coordinate frame of reference for the pose data. (type:uint8_t, values:MAV_FRAME)
 |      child_frame_id            : Coordinate frame of reference for the velocity in free space (twist) data. (type:uint8_t, values:MAV_FRAME)
 |      x                         : X Position [m] (type:float)
 |      y                         : Y Position [m] (type:float)
 |      z                         : Z Position [m] (type:float)
 |      q                         : Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation) (type:float)
 |      vx                        : X linear speed [m/s] (type:float)
 |      vy                        : Y linear speed [m/s] (type:float)
 |      vz                        : Z linear speed [m/s] (type:float)
 |      rollspeed                 : Roll angular speed [rad/s] (type:float)
 |      pitchspeed                : Pitch angular speed [rad/s] (type:float)
 |      yawspeed                  : Yaw angular speed [rad/s] (type:float)
 |      pose_covariance           : Row-major representation of a 6x6 pose cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |      velocity_covariance        : Row-major representation of a 6x6 velocity cross-covariance matrix upper right triangle (states: vx, vy, vz, rollspeed, pitchspeed, yawspeed; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |      reset_counter             : Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps. (type:uint8_t)
 |      estimator_type            : Type of estimator that is providing the odometry. (type:uint8_t, values:MAV_ESTIMATOR_TYPE)
 |  
 |  odometry_send(self, time_usec, frame_id, child_frame_id, x, y, z, q, vx, vy, vz, rollspeed, pitchspeed, yawspeed, pose_covariance, velocity_covariance, reset_counter=0, estimator_type=0, force_mavlink1=False)
 |      Odometry message to communicate odometry information with an external
 |      interface. Fits ROS REP 147 standard for aerial
 |      vehicles (http://www.ros.org/reps/rep-0147.html).
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      frame_id                  : Coordinate frame of reference for the pose data. (type:uint8_t, values:MAV_FRAME)
 |      child_frame_id            : Coordinate frame of reference for the velocity in free space (twist) data. (type:uint8_t, values:MAV_FRAME)
 |      x                         : X Position [m] (type:float)
 |      y                         : Y Position [m] (type:float)
 |      z                         : Z Position [m] (type:float)
 |      q                         : Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation) (type:float)
 |      vx                        : X linear speed [m/s] (type:float)
 |      vy                        : Y linear speed [m/s] (type:float)
 |      vz                        : Z linear speed [m/s] (type:float)
 |      rollspeed                 : Roll angular speed [rad/s] (type:float)
 |      pitchspeed                : Pitch angular speed [rad/s] (type:float)
 |      yawspeed                  : Yaw angular speed [rad/s] (type:float)
 |      pose_covariance           : Row-major representation of a 6x6 pose cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |      velocity_covariance        : Row-major representation of a 6x6 velocity cross-covariance matrix upper right triangle (states: vx, vy, vz, rollspeed, pitchspeed, yawspeed; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |      reset_counter             : Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps. (type:uint8_t)
 |      estimator_type            : Type of estimator that is providing the odometry. (type:uint8_t, values:MAV_ESTIMATOR_TYPE)
 |  
 |  optical_flow_encode(self, time_usec, sensor_id, flow_x, flow_y, flow_comp_m_x, flow_comp_m_y, quality, ground_distance, flow_rate_x=0, flow_rate_y=0)
 |      Optical flow from a flow sensor (e.g. optical mouse sensor)
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      sensor_id                 : Sensor ID (type:uint8_t)
 |      flow_x                    : Flow in x-sensor direction [dpix] (type:int16_t)
 |      flow_y                    : Flow in y-sensor direction [dpix] (type:int16_t)
 |      flow_comp_m_x             : Flow in x-sensor direction, angular-speed compensated [m/s] (type:float)
 |      flow_comp_m_y             : Flow in y-sensor direction, angular-speed compensated [m/s] (type:float)
 |      quality                   : Optical flow quality / confidence. 0: bad, 255: maximum quality (type:uint8_t)
 |      ground_distance           : Ground distance. Positive value: distance known. Negative value: Unknown distance [m] (type:float)
 |      flow_rate_x               : Flow rate about X axis [rad/s] (type:float)
 |      flow_rate_y               : Flow rate about Y axis [rad/s] (type:float)
 |  
 |  optical_flow_rad_encode(self, time_usec, sensor_id, integration_time_us, integrated_x, integrated_y, integrated_xgyro, integrated_ygyro, integrated_zgyro, temperature, quality, time_delta_distance_us, distance)
 |      Optical flow from an angular rate flow sensor (e.g. PX4FLOW or mouse
 |      sensor)
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      sensor_id                 : Sensor ID (type:uint8_t)
 |      integration_time_us        : Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the. [us] (type:uint32_t)
 |      integrated_x              : Flow around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.) [rad] (type:float)
 |      integrated_y              : Flow around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.) [rad] (type:float)
 |      integrated_xgyro          : RH rotation around X axis [rad] (type:float)
 |      integrated_ygyro          : RH rotation around Y axis [rad] (type:float)
 |      integrated_zgyro          : RH rotation around Z axis [rad] (type:float)
 |      temperature               : Temperature [cdegC] (type:int16_t)
 |      quality                   : Optical flow quality / confidence. 0: no valid flow, 255: maximum quality (type:uint8_t)
 |      time_delta_distance_us        : Time since the distance was sampled. [us] (type:uint32_t)
 |      distance                  : Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance. [m] (type:float)
 |  
 |  optical_flow_rad_send(self, time_usec, sensor_id, integration_time_us, integrated_x, integrated_y, integrated_xgyro, integrated_ygyro, integrated_zgyro, temperature, quality, time_delta_distance_us, distance, force_mavlink1=False)
 |      Optical flow from an angular rate flow sensor (e.g. PX4FLOW or mouse
 |      sensor)
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      sensor_id                 : Sensor ID (type:uint8_t)
 |      integration_time_us        : Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the. [us] (type:uint32_t)
 |      integrated_x              : Flow around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.) [rad] (type:float)
 |      integrated_y              : Flow around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.) [rad] (type:float)
 |      integrated_xgyro          : RH rotation around X axis [rad] (type:float)
 |      integrated_ygyro          : RH rotation around Y axis [rad] (type:float)
 |      integrated_zgyro          : RH rotation around Z axis [rad] (type:float)
 |      temperature               : Temperature [cdegC] (type:int16_t)
 |      quality                   : Optical flow quality / confidence. 0: no valid flow, 255: maximum quality (type:uint8_t)
 |      time_delta_distance_us        : Time since the distance was sampled. [us] (type:uint32_t)
 |      distance                  : Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance. [m] (type:float)
 |  
 |  optical_flow_send(self, time_usec, sensor_id, flow_x, flow_y, flow_comp_m_x, flow_comp_m_y, quality, ground_distance, flow_rate_x=0, flow_rate_y=0, force_mavlink1=False)
 |      Optical flow from a flow sensor (e.g. optical mouse sensor)
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      sensor_id                 : Sensor ID (type:uint8_t)
 |      flow_x                    : Flow in x-sensor direction [dpix] (type:int16_t)
 |      flow_y                    : Flow in y-sensor direction [dpix] (type:int16_t)
 |      flow_comp_m_x             : Flow in x-sensor direction, angular-speed compensated [m/s] (type:float)
 |      flow_comp_m_y             : Flow in y-sensor direction, angular-speed compensated [m/s] (type:float)
 |      quality                   : Optical flow quality / confidence. 0: bad, 255: maximum quality (type:uint8_t)
 |      ground_distance           : Ground distance. Positive value: distance known. Negative value: Unknown distance [m] (type:float)
 |      flow_rate_x               : Flow rate about X axis [rad/s] (type:float)
 |      flow_rate_y               : Flow rate about Y axis [rad/s] (type:float)
 |  
 |  param_map_rc_encode(self, target_system, target_component, param_id, param_index, parameter_rc_channel_index, param_value0, scale, param_value_min, param_value_max)
 |      Bind a RC channel to a parameter. The parameter should change
 |      according to the RC channel value.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (type:char)
 |      param_index               : Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored), send -2 to disable any existing map for this rc_channel_index. (type:int16_t)
 |      parameter_rc_channel_index        : Index of parameter RC channel. Not equal to the RC channel id. Typically corresponds to a potentiometer-knob on the RC. (type:uint8_t)
 |      param_value0              : Initial parameter value (type:float)
 |      scale                     : Scale, maps the RC range [-1, 1] to a parameter value (type:float)
 |      param_value_min           : Minimum param value. The protocol does not define if this overwrites an onboard minimum value. (Depends on implementation) (type:float)
 |      param_value_max           : Maximum param value. The protocol does not define if this overwrites an onboard maximum value. (Depends on implementation) (type:float)
 |  
 |  param_map_rc_send(self, target_system, target_component, param_id, param_index, parameter_rc_channel_index, param_value0, scale, param_value_min, param_value_max, force_mavlink1=False)
 |      Bind a RC channel to a parameter. The parameter should change
 |      according to the RC channel value.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (type:char)
 |      param_index               : Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored), send -2 to disable any existing map for this rc_channel_index. (type:int16_t)
 |      parameter_rc_channel_index        : Index of parameter RC channel. Not equal to the RC channel id. Typically corresponds to a potentiometer-knob on the RC. (type:uint8_t)
 |      param_value0              : Initial parameter value (type:float)
 |      scale                     : Scale, maps the RC range [-1, 1] to a parameter value (type:float)
 |      param_value_min           : Minimum param value. The protocol does not define if this overwrites an onboard minimum value. (Depends on implementation) (type:float)
 |      param_value_max           : Maximum param value. The protocol does not define if this overwrites an onboard maximum value. (Depends on implementation) (type:float)
 |  
 |  param_request_list_encode(self, target_system, target_component)
 |      Request all parameters of this component. After this request, all
 |      parameters are emitted. The parameter microservice is
 |      documented at
 |      https://mavlink.io/en/services/parameter.html
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |  
 |  param_request_list_send(self, target_system, target_component, force_mavlink1=False)
 |      Request all parameters of this component. After this request, all
 |      parameters are emitted. The parameter microservice is
 |      documented at
 |      https://mavlink.io/en/services/parameter.html
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |  
 |  param_request_read_encode(self, target_system, target_component, param_id, param_index)
 |      Request to read the onboard parameter with the param_id string id.
 |      Onboard parameters are stored as key[const char*] ->
 |      value[float]. This allows to send a parameter to any
 |      other component (such as the GCS) without the need of
 |      previous knowledge of possible parameter names. Thus
 |      the same GCS can store different parameters for
 |      different autopilots. See also
 |      https://mavlink.io/en/services/parameter.html for a
 |      full documentation of QGroundControl and IMU code.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (type:char)
 |      param_index               : Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored) (type:int16_t)
 |  
 |  param_request_read_send(self, target_system, target_component, param_id, param_index, force_mavlink1=False)
 |      Request to read the onboard parameter with the param_id string id.
 |      Onboard parameters are stored as key[const char*] ->
 |      value[float]. This allows to send a parameter to any
 |      other component (such as the GCS) without the need of
 |      previous knowledge of possible parameter names. Thus
 |      the same GCS can store different parameters for
 |      different autopilots. See also
 |      https://mavlink.io/en/services/parameter.html for a
 |      full documentation of QGroundControl and IMU code.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (type:char)
 |      param_index               : Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored) (type:int16_t)
 |  
 |  param_set_encode(self, target_system, target_component, param_id, param_value, param_type)
 |      Set a parameter value (write new value to permanent storage).
 |      IMPORTANT: The receiving component should acknowledge
 |      the new parameter value by sending a PARAM_VALUE
 |      message to all communication partners. This will also
 |      ensure that multiple GCS all have an up-to-date list
 |      of all parameters. If the sending GCS did not receive
 |      a PARAM_VALUE message within its timeout time, it
 |      should re-send the PARAM_SET message. The parameter
 |      microservice is documented at
 |      https://mavlink.io/en/services/parameter.html
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (type:char)
 |      param_value               : Onboard parameter value (type:float)
 |      param_type                : Onboard parameter type. (type:uint8_t, values:MAV_PARAM_TYPE)
 |  
 |  param_set_send(self, target_system, target_component, param_id, param_value, param_type, force_mavlink1=False)
 |      Set a parameter value (write new value to permanent storage).
 |      IMPORTANT: The receiving component should acknowledge
 |      the new parameter value by sending a PARAM_VALUE
 |      message to all communication partners. This will also
 |      ensure that multiple GCS all have an up-to-date list
 |      of all parameters. If the sending GCS did not receive
 |      a PARAM_VALUE message within its timeout time, it
 |      should re-send the PARAM_SET message. The parameter
 |      microservice is documented at
 |      https://mavlink.io/en/services/parameter.html
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (type:char)
 |      param_value               : Onboard parameter value (type:float)
 |      param_type                : Onboard parameter type. (type:uint8_t, values:MAV_PARAM_TYPE)
 |  
 |  param_value_encode(self, param_id, param_value, param_type, param_count, param_index)
 |      Emit the value of a onboard parameter. The inclusion of param_count
 |      and param_index in the message allows the recipient to
 |      keep track of received parameters and allows him to
 |      re-request missing parameters after a loss or timeout.
 |      The parameter microservice is documented at
 |      https://mavlink.io/en/services/parameter.html
 |      
 |      param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (type:char)
 |      param_value               : Onboard parameter value (type:float)
 |      param_type                : Onboard parameter type. (type:uint8_t, values:MAV_PARAM_TYPE)
 |      param_count               : Total number of onboard parameters (type:uint16_t)
 |      param_index               : Index of this onboard parameter (type:uint16_t)
 |  
 |  param_value_send(self, param_id, param_value, param_type, param_count, param_index, force_mavlink1=False)
 |      Emit the value of a onboard parameter. The inclusion of param_count
 |      and param_index in the message allows the recipient to
 |      keep track of received parameters and allows him to
 |      re-request missing parameters after a loss or timeout.
 |      The parameter microservice is documented at
 |      https://mavlink.io/en/services/parameter.html
 |      
 |      param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (type:char)
 |      param_value               : Onboard parameter value (type:float)
 |      param_type                : Onboard parameter type. (type:uint8_t, values:MAV_PARAM_TYPE)
 |      param_count               : Total number of onboard parameters (type:uint16_t)
 |      param_index               : Index of this onboard parameter (type:uint16_t)
 |  
 |  parse_buffer(self, s)
 |      input some data bytes, possibly returning a list of new messages
 |  
 |  parse_char(self, c)
 |      input some data bytes, possibly returning a new message
 |  
 |  pid_tuning_encode(self, axis, desired, achieved, FF, P, I, D)
 |      PID tuning information.
 |      
 |      axis                      : Axis. (type:uint8_t, values:PID_TUNING_AXIS)
 |      desired                   : Desired rate. [deg/s] (type:float)
 |      achieved                  : Achieved rate. [deg/s] (type:float)
 |      FF                        : FF component. (type:float)
 |      P                         : P component. (type:float)
 |      I                         : I component. (type:float)
 |      D                         : D component. (type:float)
 |  
 |  pid_tuning_send(self, axis, desired, achieved, FF, P, I, D, force_mavlink1=False)
 |      PID tuning information.
 |      
 |      axis                      : Axis. (type:uint8_t, values:PID_TUNING_AXIS)
 |      desired                   : Desired rate. [deg/s] (type:float)
 |      achieved                  : Achieved rate. [deg/s] (type:float)
 |      FF                        : FF component. (type:float)
 |      P                         : P component. (type:float)
 |      I                         : I component. (type:float)
 |      D                         : D component. (type:float)
 |  
 |  ping_encode(self, time_usec, seq, target_system, target_component)
 |      A ping message either requesting or responding to a ping. This allows
 |      to measure the system latencies, including serial
 |      port, radio modem and UDP connections. The ping
 |      microservice is documented at
 |      https://mavlink.io/en/services/ping.html
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      seq                       : PING sequence (type:uint32_t)
 |      target_system             : 0: request ping from all receiving systems. If greater than 0: message is a ping response and number is the system id of the requesting system (type:uint8_t)
 |      target_component          : 0: request ping from all receiving components. If greater than 0: message is a ping response and number is the component id of the requesting component. (type:uint8_t)
 |  
 |  ping_send(self, time_usec, seq, target_system, target_component, force_mavlink1=False)
 |      A ping message either requesting or responding to a ping. This allows
 |      to measure the system latencies, including serial
 |      port, radio modem and UDP connections. The ping
 |      microservice is documented at
 |      https://mavlink.io/en/services/ping.html
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      seq                       : PING sequence (type:uint32_t)
 |      target_system             : 0: request ping from all receiving systems. If greater than 0: message is a ping response and number is the system id of the requesting system (type:uint8_t)
 |      target_component          : 0: request ping from all receiving components. If greater than 0: message is a ping response and number is the component id of the requesting component. (type:uint8_t)
 |  
 |  play_tune_encode(self, target_system, target_component, tune, tune
 |      Control vehicle tone generation (buzzer)
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      tune                      : tune in board specific format (type:char)
 |      tune2                     : tune extension (appended to tune) (type:char)
 |  
 |  play_tune_send(self, target_system, target_component, tune, tuneforce_mavlink1=False)
 |      Control vehicle tone generation (buzzer)
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      tune                      : tune in board specific format (type:char)
 |      tune2                     : tune extension (appended to tune) (type:char)
 |  
 |  position_target_global_int_encode(self, time_boot_ms, coordinate_frame, type_mask, lat_int, lon_int, alt, vx, vy, vz, afx, afy, afz, yaw, yaw_rate)
 |      Reports the current commanded vehicle position, velocity, and
 |      acceleration as specified by the autopilot. This
 |      should match the commands sent in
 |      SET_POSITION_TARGET_GLOBAL_INT if the vehicle is being
 |      controlled this way.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency. [ms] (type:uint32_t)
 |      coordinate_frame          : Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11 (type:uint8_t, values:MAV_FRAME)
 |      type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (type:uint16_t, values:POSITION_TARGET_TYPEMASK)
 |      lat_int                   : X Position in WGS84 frame [degE7] (type:int32_t)
 |      lon_int                   : Y Position in WGS84 frame [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL, AGL or relative to home altitude, depending on frame) [m] (type:float)
 |      vx                        : X velocity in NED frame [m/s] (type:float)
 |      vy                        : Y velocity in NED frame [m/s] (type:float)
 |      vz                        : Z velocity in NED frame [m/s] (type:float)
 |      afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      yaw                       : yaw setpoint [rad] (type:float)
 |      yaw_rate                  : yaw rate setpoint [rad/s] (type:float)
 |  
 |  position_target_global_int_send(self, time_boot_ms, coordinate_frame, type_mask, lat_int, lon_int, alt, vx, vy, vz, afx, afy, afz, yaw, yaw_rate, force_mavlink1=False)
 |      Reports the current commanded vehicle position, velocity, and
 |      acceleration as specified by the autopilot. This
 |      should match the commands sent in
 |      SET_POSITION_TARGET_GLOBAL_INT if the vehicle is being
 |      controlled this way.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency. [ms] (type:uint32_t)
 |      coordinate_frame          : Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11 (type:uint8_t, values:MAV_FRAME)
 |      type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (type:uint16_t, values:POSITION_TARGET_TYPEMASK)
 |      lat_int                   : X Position in WGS84 frame [degE7] (type:int32_t)
 |      lon_int                   : Y Position in WGS84 frame [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL, AGL or relative to home altitude, depending on frame) [m] (type:float)
 |      vx                        : X velocity in NED frame [m/s] (type:float)
 |      vy                        : Y velocity in NED frame [m/s] (type:float)
 |      vz                        : Z velocity in NED frame [m/s] (type:float)
 |      afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      yaw                       : yaw setpoint [rad] (type:float)
 |      yaw_rate                  : yaw rate setpoint [rad/s] (type:float)
 |  
 |  position_target_local_ned_encode(self, time_boot_ms, coordinate_frame, type_mask, x, y, z, vx, vy, vz, afx, afy, afz, yaw, yaw_rate)
 |      Reports the current commanded vehicle position, velocity, and
 |      acceleration as specified by the autopilot. This
 |      should match the commands sent in
 |      SET_POSITION_TARGET_LOCAL_NED if the vehicle is being
 |      controlled this way.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      coordinate_frame          : Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9 (type:uint8_t, values:MAV_FRAME)
 |      type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (type:uint16_t, values:POSITION_TARGET_TYPEMASK)
 |      x                         : X Position in NED frame [m] (type:float)
 |      y                         : Y Position in NED frame [m] (type:float)
 |      z                         : Z Position in NED frame (note, altitude is negative in NED) [m] (type:float)
 |      vx                        : X velocity in NED frame [m/s] (type:float)
 |      vy                        : Y velocity in NED frame [m/s] (type:float)
 |      vz                        : Z velocity in NED frame [m/s] (type:float)
 |      afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      yaw                       : yaw setpoint [rad] (type:float)
 |      yaw_rate                  : yaw rate setpoint [rad/s] (type:float)
 |  
 |  position_target_local_ned_send(self, time_boot_ms, coordinate_frame, type_mask, x, y, z, vx, vy, vz, afx, afy, afz, yaw, yaw_rate, force_mavlink1=False)
 |      Reports the current commanded vehicle position, velocity, and
 |      acceleration as specified by the autopilot. This
 |      should match the commands sent in
 |      SET_POSITION_TARGET_LOCAL_NED if the vehicle is being
 |      controlled this way.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      coordinate_frame          : Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9 (type:uint8_t, values:MAV_FRAME)
 |      type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (type:uint16_t, values:POSITION_TARGET_TYPEMASK)
 |      x                         : X Position in NED frame [m] (type:float)
 |      y                         : Y Position in NED frame [m] (type:float)
 |      z                         : Z Position in NED frame (note, altitude is negative in NED) [m] (type:float)
 |      vx                        : X velocity in NED frame [m/s] (type:float)
 |      vy                        : Y velocity in NED frame [m/s] (type:float)
 |      vz                        : Z velocity in NED frame [m/s] (type:float)
 |      afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      yaw                       : yaw setpoint [rad] (type:float)
 |      yaw_rate                  : yaw rate setpoint [rad/s] (type:float)
 |  
 |  power_status_encode(self, Vcc, Vservo, flags)
 |      Power supply status
 |      
 |      Vcc                       : 5V rail voltage. [mV] (type:uint16_t)
 |      Vservo                    : Servo rail voltage. [mV] (type:uint16_t)
 |      flags                     : Bitmap of power supply status flags. (type:uint16_t, values:MAV_POWER_STATUS)
 |  
 |  power_status_send(self, Vcc, Vservo, flags, force_mavlink1=False)
 |      Power supply status
 |      
 |      Vcc                       : 5V rail voltage. [mV] (type:uint16_t)
 |      Vservo                    : Servo rail voltage. [mV] (type:uint16_t)
 |      flags                     : Bitmap of power supply status flags. (type:uint16_t, values:MAV_POWER_STATUS)
 |  
 |  radio_encode(self, rssi, remrssi, txbuf, noise, remnoise, rxerrors, fixed)
 |      Status generated by radio.
 |      
 |      rssi                      : Local signal strength. (type:uint8_t)
 |      remrssi                   : Remote signal strength. (type:uint8_t)
 |      txbuf                     : How full the tx buffer is. [%] (type:uint8_t)
 |      noise                     : Background noise level. (type:uint8_t)
 |      remnoise                  : Remote background noise level. (type:uint8_t)
 |      rxerrors                  : Receive errors. (type:uint16_t)
 |      fixed                     : Count of error corrected packets. (type:uint16_t)
 |  
 |  radio_send(self, rssi, remrssi, txbuf, noise, remnoise, rxerrors, fixed, force_mavlink1=False)
 |      Status generated by radio.
 |      
 |      rssi                      : Local signal strength. (type:uint8_t)
 |      remrssi                   : Remote signal strength. (type:uint8_t)
 |      txbuf                     : How full the tx buffer is. [%] (type:uint8_t)
 |      noise                     : Background noise level. (type:uint8_t)
 |      remnoise                  : Remote background noise level. (type:uint8_t)
 |      rxerrors                  : Receive errors. (type:uint16_t)
 |      fixed                     : Count of error corrected packets. (type:uint16_t)
 |  
 |  radio_status_encode(self, rssi, remrssi, txbuf, noise, remnoise, rxerrors, fixed)
 |      Status generated by radio and injected into MAVLink stream.
 |      
 |      rssi                      : Local (message sender) recieved signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
 |      remrssi                   : Remote (message receiver) signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
 |      txbuf                     : Remaining free transmitter buffer space. [%] (type:uint8_t)
 |      noise                     : Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown. (type:uint8_t)
 |      remnoise                  : Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown. (type:uint8_t)
 |      rxerrors                  : Count of radio packet receive errors (since boot). (type:uint16_t)
 |      fixed                     : Count of error corrected radio packets (since boot). (type:uint16_t)
 |  
 |  radio_status_send(self, rssi, remrssi, txbuf, noise, remnoise, rxerrors, fixed, force_mavlink1=False)
 |      Status generated by radio and injected into MAVLink stream.
 |      
 |      rssi                      : Local (message sender) recieved signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
 |      remrssi                   : Remote (message receiver) signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
 |      txbuf                     : Remaining free transmitter buffer space. [%] (type:uint8_t)
 |      noise                     : Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown. (type:uint8_t)
 |      remnoise                  : Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown. (type:uint8_t)
 |      rxerrors                  : Count of radio packet receive errors (since boot). (type:uint16_t)
 |      fixed                     : Count of error corrected radio packets (since boot). (type:uint16_t)
 |  
 |  rally_fetch_point_encode(self, target_system, target_component, idx)
 |      Request a current rally point from MAV. MAV should respond with a
 |      RALLY_POINT message. MAV should not respond if the
 |      request is invalid.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      idx                       : Point index (first point is 0). (type:uint8_t)
 |  
 |  rally_fetch_point_send(self, target_system, target_component, idx, force_mavlink1=False)
 |      Request a current rally point from MAV. MAV should respond with a
 |      RALLY_POINT message. MAV should not respond if the
 |      request is invalid.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      idx                       : Point index (first point is 0). (type:uint8_t)
 |  
 |  rally_point_encode(self, target_system, target_component, idx, count, lat, lng, alt, break_alt, land_dir, flags)
 |      A rally point. Used to set a point when from GCS -> MAV. Also used to
 |      return a point from MAV -> GCS.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      idx                       : Point index (first point is 0). (type:uint8_t)
 |      count                     : Total number of points (for sanity checking). (type:uint8_t)
 |      lat                       : Latitude of point. [degE7] (type:int32_t)
 |      lng                       : Longitude of point. [degE7] (type:int32_t)
 |      alt                       : Transit / loiter altitude relative to home. [m] (type:int16_t)
 |      break_alt                 : Break altitude relative to home. [m] (type:int16_t)
 |      land_dir                  : Heading to aim for when landing. [cdeg] (type:uint16_t)
 |      flags                     : Configuration flags. (type:uint8_t, values:RALLY_FLAGS)
 |  
 |  rally_point_send(self, target_system, target_component, idx, count, lat, lng, alt, break_alt, land_dir, flags, force_mavlink1=False)
 |      A rally point. Used to set a point when from GCS -> MAV. Also used to
 |      return a point from MAV -> GCS.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      idx                       : Point index (first point is 0). (type:uint8_t)
 |      count                     : Total number of points (for sanity checking). (type:uint8_t)
 |      lat                       : Latitude of point. [degE7] (type:int32_t)
 |      lng                       : Longitude of point. [degE7] (type:int32_t)
 |      alt                       : Transit / loiter altitude relative to home. [m] (type:int16_t)
 |      break_alt                 : Break altitude relative to home. [m] (type:int16_t)
 |      land_dir                  : Heading to aim for when landing. [cdeg] (type:uint16_t)
 |      flags                     : Configuration flags. (type:uint8_t, values:RALLY_FLAGS)
 |  
 |  rangefinder_encode(self, distance, voltage)
 |      Rangefinder reporting.
 |      
 |      distance                  : Distance. [m] (type:float)
 |      voltage                   : Raw voltage if available, zero otherwise. [V] (type:float)
 |  
 |  rangefinder_send(self, distance, voltage, force_mavlink1=False)
 |      Rangefinder reporting.
 |      
 |      distance                  : Distance. [m] (type:float)
 |      voltage                   : Raw voltage if available, zero otherwise. [V] (type:float)
 |  
 |  raw_imu_encode(self, time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, id=0, temperature=0)
 |      The RAW IMU readings for a 9DOF sensor, which is identified by the id
 |      (default IMU1). This message should always contain the
 |      true raw values without any scaling to allow data
 |      capture and system debugging.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      xacc                      : X acceleration (raw) (type:int16_t)
 |      yacc                      : Y acceleration (raw) (type:int16_t)
 |      zacc                      : Z acceleration (raw) (type:int16_t)
 |      xgyro                     : Angular speed around X axis (raw) (type:int16_t)
 |      ygyro                     : Angular speed around Y axis (raw) (type:int16_t)
 |      zgyro                     : Angular speed around Z axis (raw) (type:int16_t)
 |      xmag                      : X Magnetic field (raw) (type:int16_t)
 |      ymag                      : Y Magnetic field (raw) (type:int16_t)
 |      zmag                      : Z Magnetic field (raw) (type:int16_t)
 |      id                        : Id. Ids are numbered from 0 and map to IMUs numbered from 1 (e.g. IMU1 will have a message with id=0) (type:uint8_t)
 |      temperature               : Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C). [cdegC] (type:int16_t)
 |  
 |  raw_imu_send(self, time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, id=0, temperature=0, force_mavlink1=False)
 |      The RAW IMU readings for a 9DOF sensor, which is identified by the id
 |      (default IMU1). This message should always contain the
 |      true raw values without any scaling to allow data
 |      capture and system debugging.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      xacc                      : X acceleration (raw) (type:int16_t)
 |      yacc                      : Y acceleration (raw) (type:int16_t)
 |      zacc                      : Z acceleration (raw) (type:int16_t)
 |      xgyro                     : Angular speed around X axis (raw) (type:int16_t)
 |      ygyro                     : Angular speed around Y axis (raw) (type:int16_t)
 |      zgyro                     : Angular speed around Z axis (raw) (type:int16_t)
 |      xmag                      : X Magnetic field (raw) (type:int16_t)
 |      ymag                      : Y Magnetic field (raw) (type:int16_t)
 |      zmag                      : Z Magnetic field (raw) (type:int16_t)
 |      id                        : Id. Ids are numbered from 0 and map to IMUs numbered from 1 (e.g. IMU1 will have a message with id=0) (type:uint8_t)
 |      temperature               : Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C). [cdegC] (type:int16_t)
 |  
 |  raw_pressure_encode(self, time_usec, press_abs, press_diff1, press_diff2, temperature)
 |      The RAW pressure readings for the typical setup of one absolute
 |      pressure and one differential pressure sensor. The
 |      sensor values should be the raw, UNSCALED ADC values.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      press_abs                 : Absolute pressure (raw) (type:int16_t)
 |      press_diff1               : Differential pressure 1 (raw, 0 if nonexistent) (type:int16_t)
 |      press_diff2               : Differential pressure 2 (raw, 0 if nonexistent) (type:int16_t)
 |      temperature               : Raw Temperature measurement (raw) (type:int16_t)
 |  
 |  raw_pressure_send(self, time_usec, press_abs, press_diff1, press_diff2, temperature, force_mavlink1=False)
 |      The RAW pressure readings for the typical setup of one absolute
 |      pressure and one differential pressure sensor. The
 |      sensor values should be the raw, UNSCALED ADC values.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      press_abs                 : Absolute pressure (raw) (type:int16_t)
 |      press_diff1               : Differential pressure 1 (raw, 0 if nonexistent) (type:int16_t)
 |      press_diff2               : Differential pressure 2 (raw, 0 if nonexistent) (type:int16_t)
 |      temperature               : Raw Temperature measurement (raw) (type:int16_t)
 |  
 |  rc_channels_encode(self, time_boot_ms, chancount, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, chan9_raw, chan10_raw, chan11_raw, chan12_raw, chan13_raw, chan14_raw, chan15_raw, chan16_raw, chan17_raw, chan18_raw, rssi)
 |      The PPM values of the RC channels received. The standard PPM
 |      modulation is as follows: 1000 microseconds: 0%, 2000
 |      microseconds: 100%.  A value of UINT16_MAX implies the
 |      channel is unused. Individual receivers/transmitters
 |      might violate this specification.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      chancount                 : Total number of RC channels being received. This can be larger than 18, indicating that more channels are available but not given in this message. This value should be 0 when no RC channels are available. (type:uint8_t)
 |      chan1_raw                 : RC channel 1 value. [us] (type:uint16_t)
 |      chan2_raw                 : RC channel 2 value. [us] (type:uint16_t)
 |      chan3_raw                 : RC channel 3 value. [us] (type:uint16_t)
 |      chan4_raw                 : RC channel 4 value. [us] (type:uint16_t)
 |      chan5_raw                 : RC channel 5 value. [us] (type:uint16_t)
 |      chan6_raw                 : RC channel 6 value. [us] (type:uint16_t)
 |      chan7_raw                 : RC channel 7 value. [us] (type:uint16_t)
 |      chan8_raw                 : RC channel 8 value. [us] (type:uint16_t)
 |      chan9_raw                 : RC channel 9 value. [us] (type:uint16_t)
 |      chan10_raw                : RC channel 10 value. [us] (type:uint16_t)
 |      chan11_raw                : RC channel 11 value. [us] (type:uint16_t)
 |      chan12_raw                : RC channel 12 value. [us] (type:uint16_t)
 |      chan13_raw                : RC channel 13 value. [us] (type:uint16_t)
 |      chan14_raw                : RC channel 14 value. [us] (type:uint16_t)
 |      chan15_raw                : RC channel 15 value. [us] (type:uint16_t)
 |      chan16_raw                : RC channel 16 value. [us] (type:uint16_t)
 |      chan17_raw                : RC channel 17 value. [us] (type:uint16_t)
 |      chan18_raw                : RC channel 18 value. [us] (type:uint16_t)
 |      rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
 |  
 |  rc_channels_override_encode(self, target_system, target_component, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, chan9_raw=0, chan10_raw=0, chan11_raw=0, chan12_raw=0, chan13_raw=0, chan14_raw=0, chan15_raw=0, chan16_raw=0, chan17_raw=0, chan18_raw=0)
 |      The RAW values of the RC channels sent to the MAV to override info
 |      received from the RC radio. A value of UINT16_MAX
 |      means no change to that channel. A value of 0 means
 |      control of that channel should be released back to the
 |      RC radio. The standard PPM modulation is as follows:
 |      1000 microseconds: 0%, 2000 microseconds: 100%.
 |      Individual receivers/transmitters might violate this
 |      specification.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      chan1_raw                 : RC channel 1 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan2_raw                 : RC channel 2 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan3_raw                 : RC channel 3 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan4_raw                 : RC channel 4 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan5_raw                 : RC channel 5 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan6_raw                 : RC channel 6 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan7_raw                 : RC channel 7 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan8_raw                 : RC channel 8 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan9_raw                 : RC channel 9 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan10_raw                : RC channel 10 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan11_raw                : RC channel 11 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan12_raw                : RC channel 12 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan13_raw                : RC channel 13 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan14_raw                : RC channel 14 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan15_raw                : RC channel 15 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan16_raw                : RC channel 16 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan17_raw                : RC channel 17 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan18_raw                : RC channel 18 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |  
 |  rc_channels_override_send(self, target_system, target_component, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, chan9_raw=0, chan10_raw=0, chan11_raw=0, chan12_raw=0, chan13_raw=0, chan14_raw=0, chan15_raw=0, chan16_raw=0, chan17_raw=0, chan18_raw=0, force_mavlink1=False)
 |      The RAW values of the RC channels sent to the MAV to override info
 |      received from the RC radio. A value of UINT16_MAX
 |      means no change to that channel. A value of 0 means
 |      control of that channel should be released back to the
 |      RC radio. The standard PPM modulation is as follows:
 |      1000 microseconds: 0%, 2000 microseconds: 100%.
 |      Individual receivers/transmitters might violate this
 |      specification.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      chan1_raw                 : RC channel 1 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan2_raw                 : RC channel 2 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan3_raw                 : RC channel 3 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan4_raw                 : RC channel 4 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan5_raw                 : RC channel 5 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan6_raw                 : RC channel 6 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan7_raw                 : RC channel 7 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan8_raw                 : RC channel 8 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan9_raw                 : RC channel 9 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan10_raw                : RC channel 10 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan11_raw                : RC channel 11 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan12_raw                : RC channel 12 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan13_raw                : RC channel 13 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan14_raw                : RC channel 14 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan15_raw                : RC channel 15 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan16_raw                : RC channel 16 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan17_raw                : RC channel 17 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |      chan18_raw                : RC channel 18 value. A value of 0 or UINT16_MAX means to ignore this field. [us] (type:uint16_t)
 |  
 |  rc_channels_raw_encode(self, time_boot_ms, port, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, rssi)
 |      The RAW values of the RC channels received. The standard PPM
 |      modulation is as follows: 1000 microseconds: 0%, 2000
 |      microseconds: 100%. A value of UINT16_MAX implies the
 |      channel is unused. Individual receivers/transmitters
 |      might violate this specification.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (type:uint8_t)
 |      chan1_raw                 : RC channel 1 value. [us] (type:uint16_t)
 |      chan2_raw                 : RC channel 2 value. [us] (type:uint16_t)
 |      chan3_raw                 : RC channel 3 value. [us] (type:uint16_t)
 |      chan4_raw                 : RC channel 4 value. [us] (type:uint16_t)
 |      chan5_raw                 : RC channel 5 value. [us] (type:uint16_t)
 |      chan6_raw                 : RC channel 6 value. [us] (type:uint16_t)
 |      chan7_raw                 : RC channel 7 value. [us] (type:uint16_t)
 |      chan8_raw                 : RC channel 8 value. [us] (type:uint16_t)
 |      rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
 |  
 |  rc_channels_raw_send(self, time_boot_ms, port, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, rssi, force_mavlink1=False)
 |      The RAW values of the RC channels received. The standard PPM
 |      modulation is as follows: 1000 microseconds: 0%, 2000
 |      microseconds: 100%. A value of UINT16_MAX implies the
 |      channel is unused. Individual receivers/transmitters
 |      might violate this specification.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (type:uint8_t)
 |      chan1_raw                 : RC channel 1 value. [us] (type:uint16_t)
 |      chan2_raw                 : RC channel 2 value. [us] (type:uint16_t)
 |      chan3_raw                 : RC channel 3 value. [us] (type:uint16_t)
 |      chan4_raw                 : RC channel 4 value. [us] (type:uint16_t)
 |      chan5_raw                 : RC channel 5 value. [us] (type:uint16_t)
 |      chan6_raw                 : RC channel 6 value. [us] (type:uint16_t)
 |      chan7_raw                 : RC channel 7 value. [us] (type:uint16_t)
 |      chan8_raw                 : RC channel 8 value. [us] (type:uint16_t)
 |      rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
 |  
 |  rc_channels_scaled_encode(self, time_boot_ms, port, chan1_scaled, chan2_scaled, chan3_scaled, chan4_scaled, chan5_scaled, chan6_scaled, chan7_scaled, chan8_scaled, rssi)
 |      The scaled values of the RC channels received: (-100%) -10000, (0%) 0,
 |      (100%) 10000. Channels that are inactive should be set
 |      to UINT16_MAX.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (type:uint8_t)
 |      chan1_scaled              : RC channel 1 value scaled. (type:int16_t)
 |      chan2_scaled              : RC channel 2 value scaled. (type:int16_t)
 |      chan3_scaled              : RC channel 3 value scaled. (type:int16_t)
 |      chan4_scaled              : RC channel 4 value scaled. (type:int16_t)
 |      chan5_scaled              : RC channel 5 value scaled. (type:int16_t)
 |      chan6_scaled              : RC channel 6 value scaled. (type:int16_t)
 |      chan7_scaled              : RC channel 7 value scaled. (type:int16_t)
 |      chan8_scaled              : RC channel 8 value scaled. (type:int16_t)
 |      rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
 |  
 |  rc_channels_scaled_send(self, time_boot_ms, port, chan1_scaled, chan2_scaled, chan3_scaled, chan4_scaled, chan5_scaled, chan6_scaled, chan7_scaled, chan8_scaled, rssi, force_mavlink1=False)
 |      The scaled values of the RC channels received: (-100%) -10000, (0%) 0,
 |      (100%) 10000. Channels that are inactive should be set
 |      to UINT16_MAX.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (type:uint8_t)
 |      chan1_scaled              : RC channel 1 value scaled. (type:int16_t)
 |      chan2_scaled              : RC channel 2 value scaled. (type:int16_t)
 |      chan3_scaled              : RC channel 3 value scaled. (type:int16_t)
 |      chan4_scaled              : RC channel 4 value scaled. (type:int16_t)
 |      chan5_scaled              : RC channel 5 value scaled. (type:int16_t)
 |      chan6_scaled              : RC channel 6 value scaled. (type:int16_t)
 |      chan7_scaled              : RC channel 7 value scaled. (type:int16_t)
 |      chan8_scaled              : RC channel 8 value scaled. (type:int16_t)
 |      rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
 |  
 |  rc_channels_send(self, time_boot_ms, chancount, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, chan9_raw, chan10_raw, chan11_raw, chan12_raw, chan13_raw, chan14_raw, chan15_raw, chan16_raw, chan17_raw, chan18_raw, rssi, force_mavlink1=False)
 |      The PPM values of the RC channels received. The standard PPM
 |      modulation is as follows: 1000 microseconds: 0%, 2000
 |      microseconds: 100%.  A value of UINT16_MAX implies the
 |      channel is unused. Individual receivers/transmitters
 |      might violate this specification.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      chancount                 : Total number of RC channels being received. This can be larger than 18, indicating that more channels are available but not given in this message. This value should be 0 when no RC channels are available. (type:uint8_t)
 |      chan1_raw                 : RC channel 1 value. [us] (type:uint16_t)
 |      chan2_raw                 : RC channel 2 value. [us] (type:uint16_t)
 |      chan3_raw                 : RC channel 3 value. [us] (type:uint16_t)
 |      chan4_raw                 : RC channel 4 value. [us] (type:uint16_t)
 |      chan5_raw                 : RC channel 5 value. [us] (type:uint16_t)
 |      chan6_raw                 : RC channel 6 value. [us] (type:uint16_t)
 |      chan7_raw                 : RC channel 7 value. [us] (type:uint16_t)
 |      chan8_raw                 : RC channel 8 value. [us] (type:uint16_t)
 |      chan9_raw                 : RC channel 9 value. [us] (type:uint16_t)
 |      chan10_raw                : RC channel 10 value. [us] (type:uint16_t)
 |      chan11_raw                : RC channel 11 value. [us] (type:uint16_t)
 |      chan12_raw                : RC channel 12 value. [us] (type:uint16_t)
 |      chan13_raw                : RC channel 13 value. [us] (type:uint16_t)
 |      chan14_raw                : RC channel 14 value. [us] (type:uint16_t)
 |      chan15_raw                : RC channel 15 value. [us] (type:uint16_t)
 |      chan16_raw                : RC channel 16 value. [us] (type:uint16_t)
 |      chan17_raw                : RC channel 17 value. [us] (type:uint16_t)
 |      chan18_raw                : RC channel 18 value. [us] (type:uint16_t)
 |      rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
 |  
 |  remote_log_block_status_encode(self, target_system, target_component, seqno, status)
 |      Send Status of each log block that autopilot board might have sent.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      seqno                     : Log data block sequence number. (type:uint32_t)
 |      status                    : Log data block status. (type:uint8_t, values:MAV_REMOTE_LOG_DATA_BLOCK_STATUSES)
 |  
 |  remote_log_block_status_send(self, target_system, target_component, seqno, status, force_mavlink1=False)
 |      Send Status of each log block that autopilot board might have sent.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      seqno                     : Log data block sequence number. (type:uint32_t)
 |      status                    : Log data block status. (type:uint8_t, values:MAV_REMOTE_LOG_DATA_BLOCK_STATUSES)
 |  
 |  remote_log_data_block_encode(self, target_system, target_component, seqno, data)
 |      Send a block of log data to remote location.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      seqno                     : Log data block sequence number. (type:uint32_t, values:MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS)
 |      data                      : Log data block. (type:uint8_t)
 |  
 |  remote_log_data_block_send(self, target_system, target_component, seqno, data, force_mavlink1=False)
 |      Send a block of log data to remote location.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      seqno                     : Log data block sequence number. (type:uint32_t, values:MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS)
 |      data                      : Log data block. (type:uint8_t)
 |  
 |  request_data_stream_encode(self, target_system, target_component, req_stream_id, req_message_rate, start_stop)
 |      Request a data stream.
 |      
 |      target_system             : The target requested to send the message stream. (type:uint8_t)
 |      target_component          : The target requested to send the message stream. (type:uint8_t)
 |      req_stream_id             : The ID of the requested data stream (type:uint8_t)
 |      req_message_rate          : The requested message rate [Hz] (type:uint16_t)
 |      start_stop                : 1 to start sending, 0 to stop sending. (type:uint8_t)
 |  
 |  request_data_stream_send(self, target_system, target_component, req_stream_id, req_message_rate, start_stop, force_mavlink1=False)
 |      Request a data stream.
 |      
 |      target_system             : The target requested to send the message stream. (type:uint8_t)
 |      target_component          : The target requested to send the message stream. (type:uint8_t)
 |      req_stream_id             : The ID of the requested data stream (type:uint8_t)
 |      req_message_rate          : The requested message rate [Hz] (type:uint16_t)
 |      start_stop                : 1 to start sending, 0 to stop sending. (type:uint8_t)
 |  
 |  resource_request_encode(self, request_id, uri_type, uri, transfer_type, storage)
 |      The autopilot is requesting a resource (file, binary, other type of
 |      data)
 |      
 |      request_id                : Request ID. This ID should be re-used when sending back URI contents (type:uint8_t)
 |      uri_type                  : The type of requested URI. 0 = a file via URL. 1 = a UAVCAN binary (type:uint8_t)
 |      uri                       : The requested unique resource identifier (URI). It is not necessarily a straight domain name (depends on the URI type enum) (type:uint8_t)
 |      transfer_type             : The way the autopilot wants to receive the URI. 0 = MAVLink FTP. 1 = binary stream. (type:uint8_t)
 |      storage                   : The storage path the autopilot wants the URI to be stored in. Will only be valid if the transfer_type has a storage associated (e.g. MAVLink FTP). (type:uint8_t)
 |  
 |  resource_request_send(self, request_id, uri_type, uri, transfer_type, storage, force_mavlink1=False)
 |      The autopilot is requesting a resource (file, binary, other type of
 |      data)
 |      
 |      request_id                : Request ID. This ID should be re-used when sending back URI contents (type:uint8_t)
 |      uri_type                  : The type of requested URI. 0 = a file via URL. 1 = a UAVCAN binary (type:uint8_t)
 |      uri                       : The requested unique resource identifier (URI). It is not necessarily a straight domain name (depends on the URI type enum) (type:uint8_t)
 |      transfer_type             : The way the autopilot wants to receive the URI. 0 = MAVLink FTP. 1 = binary stream. (type:uint8_t)
 |      storage                   : The storage path the autopilot wants the URI to be stored in. Will only be valid if the transfer_type has a storage associated (e.g. MAVLink FTP). (type:uint8_t)
 |  
 |  rpm_encode(self, rpm1, rpm2)
 |      RPM sensor output.
 |      
 |      rpm1                      : RPM Sensor1. (type:float)
 |      rpm2                      : RPM Sensor2. (type:float)
 |  
 |  rpm_send(self, rpm1, rpm2, force_mavlink1=False)
 |      RPM sensor output.
 |      
 |      rpm1                      : RPM Sensor1. (type:float)
 |      rpm2                      : RPM Sensor2. (type:float)
 |  
 |  safety_allowed_area_encode(self, frame, p1x, p1y, p1z, p2x, p2y, p2z)
 |      Read out the safety zone the MAV currently assumes.
 |      
 |      frame                     : Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (type:uint8_t, values:MAV_FRAME)
 |      p1x                       : x position 1 / Latitude 1 [m] (type:float)
 |      p1y                       : y position 1 / Longitude 1 [m] (type:float)
 |      p1z                       : z position 1 / Altitude 1 [m] (type:float)
 |      p2x                       : x position 2 / Latitude 2 [m] (type:float)
 |      p2y                       : y position 2 / Longitude 2 [m] (type:float)
 |      p2z                       : z position 2 / Altitude 2 [m] (type:float)
 |  
 |  safety_allowed_area_send(self, frame, p1x, p1y, p1z, p2x, p2y, p2z, force_mavlink1=False)
 |      Read out the safety zone the MAV currently assumes.
 |      
 |      frame                     : Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (type:uint8_t, values:MAV_FRAME)
 |      p1x                       : x position 1 / Latitude 1 [m] (type:float)
 |      p1y                       : y position 1 / Longitude 1 [m] (type:float)
 |      p1z                       : z position 1 / Altitude 1 [m] (type:float)
 |      p2x                       : x position 2 / Latitude 2 [m] (type:float)
 |      p2y                       : y position 2 / Longitude 2 [m] (type:float)
 |      p2z                       : z position 2 / Altitude 2 [m] (type:float)
 |  
 |  safety_set_allowed_area_encode(self, target_system, target_component, frame, p1x, p1y, p1z, p2x, p2y, p2z)
 |      Set a safety zone (volume), which is defined by two corners of a cube.
 |      This message can be used to tell the MAV which
 |      setpoints/waypoints to accept and which to reject.
 |      Safety areas are often enforced by national or
 |      competition regulations.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      frame                     : Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (type:uint8_t, values:MAV_FRAME)
 |      p1x                       : x position 1 / Latitude 1 [m] (type:float)
 |      p1y                       : y position 1 / Longitude 1 [m] (type:float)
 |      p1z                       : z position 1 / Altitude 1 [m] (type:float)
 |      p2x                       : x position 2 / Latitude 2 [m] (type:float)
 |      p2y                       : y position 2 / Longitude 2 [m] (type:float)
 |      p2z                       : z position 2 / Altitude 2 [m] (type:float)
 |  
 |  safety_set_allowed_area_send(self, target_system, target_component, frame, p1x, p1y, p1z, p2x, p2y, p2z, force_mavlink1=False)
 |      Set a safety zone (volume), which is defined by two corners of a cube.
 |      This message can be used to tell the MAV which
 |      setpoints/waypoints to accept and which to reject.
 |      Safety areas are often enforced by national or
 |      competition regulations.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      frame                     : Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (type:uint8_t, values:MAV_FRAME)
 |      p1x                       : x position 1 / Latitude 1 [m] (type:float)
 |      p1y                       : y position 1 / Longitude 1 [m] (type:float)
 |      p1z                       : z position 1 / Altitude 1 [m] (type:float)
 |      p2x                       : x position 2 / Latitude 2 [m] (type:float)
 |      p2y                       : y position 2 / Longitude 2 [m] (type:float)
 |      p2z                       : z position 2 / Altitude 2 [m] (type:float)
 |  
 |  scaled_imu2_encode(self, time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, temperature=0)
 |      The RAW IMU readings for secondary 9DOF sensor setup. This message
 |      should contain the scaled values to the described
 |      units
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      xacc                      : X acceleration [mG] (type:int16_t)
 |      yacc                      : Y acceleration [mG] (type:int16_t)
 |      zacc                      : Z acceleration [mG] (type:int16_t)
 |      xgyro                     : Angular speed around X axis [mrad/s] (type:int16_t)
 |      ygyro                     : Angular speed around Y axis [mrad/s] (type:int16_t)
 |      zgyro                     : Angular speed around Z axis [mrad/s] (type:int16_t)
 |      xmag                      : X Magnetic field [mgauss] (type:int16_t)
 |      ymag                      : Y Magnetic field [mgauss] (type:int16_t)
 |      zmag                      : Z Magnetic field [mgauss] (type:int16_t)
 |      temperature               : Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C). [cdegC] (type:int16_t)
 |  
 |  scaled_imu2_send(self, time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, temperature=0, force_mavlink1=False)
 |      The RAW IMU readings for secondary 9DOF sensor setup. This message
 |      should contain the scaled values to the described
 |      units
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      xacc                      : X acceleration [mG] (type:int16_t)
 |      yacc                      : Y acceleration [mG] (type:int16_t)
 |      zacc                      : Z acceleration [mG] (type:int16_t)
 |      xgyro                     : Angular speed around X axis [mrad/s] (type:int16_t)
 |      ygyro                     : Angular speed around Y axis [mrad/s] (type:int16_t)
 |      zgyro                     : Angular speed around Z axis [mrad/s] (type:int16_t)
 |      xmag                      : X Magnetic field [mgauss] (type:int16_t)
 |      ymag                      : Y Magnetic field [mgauss] (type:int16_t)
 |      zmag                      : Z Magnetic field [mgauss] (type:int16_t)
 |      temperature               : Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C). [cdegC] (type:int16_t)
 |  
 |  scaled_imu3_encode(self, time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, temperature=0)
 |      The RAW IMU readings for 3rd 9DOF sensor setup. This message should
 |      contain the scaled values to the described units
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      xacc                      : X acceleration [mG] (type:int16_t)
 |      yacc                      : Y acceleration [mG] (type:int16_t)
 |      zacc                      : Z acceleration [mG] (type:int16_t)
 |      xgyro                     : Angular speed around X axis [mrad/s] (type:int16_t)
 |      ygyro                     : Angular speed around Y axis [mrad/s] (type:int16_t)
 |      zgyro                     : Angular speed around Z axis [mrad/s] (type:int16_t)
 |      xmag                      : X Magnetic field [mgauss] (type:int16_t)
 |      ymag                      : Y Magnetic field [mgauss] (type:int16_t)
 |      zmag                      : Z Magnetic field [mgauss] (type:int16_t)
 |      temperature               : Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C). [cdegC] (type:int16_t)
 |  
 |  scaled_imu3_send(self, time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, temperature=0, force_mavlink1=False)
 |      The RAW IMU readings for 3rd 9DOF sensor setup. This message should
 |      contain the scaled values to the described units
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      xacc                      : X acceleration [mG] (type:int16_t)
 |      yacc                      : Y acceleration [mG] (type:int16_t)
 |      zacc                      : Z acceleration [mG] (type:int16_t)
 |      xgyro                     : Angular speed around X axis [mrad/s] (type:int16_t)
 |      ygyro                     : Angular speed around Y axis [mrad/s] (type:int16_t)
 |      zgyro                     : Angular speed around Z axis [mrad/s] (type:int16_t)
 |      xmag                      : X Magnetic field [mgauss] (type:int16_t)
 |      ymag                      : Y Magnetic field [mgauss] (type:int16_t)
 |      zmag                      : Z Magnetic field [mgauss] (type:int16_t)
 |      temperature               : Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C). [cdegC] (type:int16_t)
 |  
 |  scaled_imu_encode(self, time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, temperature=0)
 |      The RAW IMU readings for the usual 9DOF sensor setup. This message
 |      should contain the scaled values to the described
 |      units
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      xacc                      : X acceleration [mG] (type:int16_t)
 |      yacc                      : Y acceleration [mG] (type:int16_t)
 |      zacc                      : Z acceleration [mG] (type:int16_t)
 |      xgyro                     : Angular speed around X axis [mrad/s] (type:int16_t)
 |      ygyro                     : Angular speed around Y axis [mrad/s] (type:int16_t)
 |      zgyro                     : Angular speed around Z axis [mrad/s] (type:int16_t)
 |      xmag                      : X Magnetic field [mgauss] (type:int16_t)
 |      ymag                      : Y Magnetic field [mgauss] (type:int16_t)
 |      zmag                      : Z Magnetic field [mgauss] (type:int16_t)
 |      temperature               : Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C). [cdegC] (type:int16_t)
 |  
 |  scaled_imu_send(self, time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, temperature=0, force_mavlink1=False)
 |      The RAW IMU readings for the usual 9DOF sensor setup. This message
 |      should contain the scaled values to the described
 |      units
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      xacc                      : X acceleration [mG] (type:int16_t)
 |      yacc                      : Y acceleration [mG] (type:int16_t)
 |      zacc                      : Z acceleration [mG] (type:int16_t)
 |      xgyro                     : Angular speed around X axis [mrad/s] (type:int16_t)
 |      ygyro                     : Angular speed around Y axis [mrad/s] (type:int16_t)
 |      zgyro                     : Angular speed around Z axis [mrad/s] (type:int16_t)
 |      xmag                      : X Magnetic field [mgauss] (type:int16_t)
 |      ymag                      : Y Magnetic field [mgauss] (type:int16_t)
 |      zmag                      : Z Magnetic field [mgauss] (type:int16_t)
 |      temperature               : Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C). [cdegC] (type:int16_t)
 |  
 |  scaled_pressure2_encode(self, time_boot_ms, press_abs, press_diff, temperature)
 |      Barometer readings for 2nd barometer
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      press_abs                 : Absolute pressure [hPa] (type:float)
 |      press_diff                : Differential pressure [hPa] (type:float)
 |      temperature               : Temperature measurement [cdegC] (type:int16_t)
 |  
 |  scaled_pressure2_send(self, time_boot_ms, press_abs, press_diff, temperature, force_mavlink1=False)
 |      Barometer readings for 2nd barometer
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      press_abs                 : Absolute pressure [hPa] (type:float)
 |      press_diff                : Differential pressure [hPa] (type:float)
 |      temperature               : Temperature measurement [cdegC] (type:int16_t)
 |  
 |  scaled_pressure3_encode(self, time_boot_ms, press_abs, press_diff, temperature)
 |      Barometer readings for 3rd barometer
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      press_abs                 : Absolute pressure [hPa] (type:float)
 |      press_diff                : Differential pressure [hPa] (type:float)
 |      temperature               : Temperature measurement [cdegC] (type:int16_t)
 |  
 |  scaled_pressure3_send(self, time_boot_ms, press_abs, press_diff, temperature, force_mavlink1=False)
 |      Barometer readings for 3rd barometer
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      press_abs                 : Absolute pressure [hPa] (type:float)
 |      press_diff                : Differential pressure [hPa] (type:float)
 |      temperature               : Temperature measurement [cdegC] (type:int16_t)
 |  
 |  scaled_pressure_encode(self, time_boot_ms, press_abs, press_diff, temperature)
 |      The pressure readings for the typical setup of one absolute and
 |      differential pressure sensor. The units are as
 |      specified in each field.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      press_abs                 : Absolute pressure [hPa] (type:float)
 |      press_diff                : Differential pressure 1 [hPa] (type:float)
 |      temperature               : Temperature [cdegC] (type:int16_t)
 |  
 |  scaled_pressure_send(self, time_boot_ms, press_abs, press_diff, temperature, force_mavlink1=False)
 |      The pressure readings for the typical setup of one absolute and
 |      differential pressure sensor. The units are as
 |      specified in each field.
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      press_abs                 : Absolute pressure [hPa] (type:float)
 |      press_diff                : Differential pressure 1 [hPa] (type:float)
 |      temperature               : Temperature [cdegC] (type:int16_t)
 |  
 |  send(self, mavmsg, force_mavlink1=False)
 |      send a MAVLink message
 |  
 |  sensor_offsets_encode(self, mag_ofs_x, mag_ofs_y, mag_ofs_z, mag_declination, raw_press, raw_temp, gyro_cal_x, gyro_cal_y, gyro_cal_z, accel_cal_x, accel_cal_y, accel_cal_z)
 |      Offsets and calibrations values for hardware sensors. This makes it
 |      easier to debug the calibration process.
 |      
 |      mag_ofs_x                 : Magnetometer X offset. (type:int16_t)
 |      mag_ofs_y                 : Magnetometer Y offset. (type:int16_t)
 |      mag_ofs_z                 : Magnetometer Z offset. (type:int16_t)
 |      mag_declination           : Magnetic declination. [rad] (type:float)
 |      raw_press                 : Raw pressure from barometer. (type:int32_t)
 |      raw_temp                  : Raw temperature from barometer. (type:int32_t)
 |      gyro_cal_x                : Gyro X calibration. (type:float)
 |      gyro_cal_y                : Gyro Y calibration. (type:float)
 |      gyro_cal_z                : Gyro Z calibration. (type:float)
 |      accel_cal_x               : Accel X calibration. (type:float)
 |      accel_cal_y               : Accel Y calibration. (type:float)
 |      accel_cal_z               : Accel Z calibration. (type:float)
 |  
 |  sensor_offsets_send(self, mag_ofs_x, mag_ofs_y, mag_ofs_z, mag_declination, raw_press, raw_temp, gyro_cal_x, gyro_cal_y, gyro_cal_z, accel_cal_x, accel_cal_y, accel_cal_z, force_mavlink1=False)
 |      Offsets and calibrations values for hardware sensors. This makes it
 |      easier to debug the calibration process.
 |      
 |      mag_ofs_x                 : Magnetometer X offset. (type:int16_t)
 |      mag_ofs_y                 : Magnetometer Y offset. (type:int16_t)
 |      mag_ofs_z                 : Magnetometer Z offset. (type:int16_t)
 |      mag_declination           : Magnetic declination. [rad] (type:float)
 |      raw_press                 : Raw pressure from barometer. (type:int32_t)
 |      raw_temp                  : Raw temperature from barometer. (type:int32_t)
 |      gyro_cal_x                : Gyro X calibration. (type:float)
 |      gyro_cal_y                : Gyro Y calibration. (type:float)
 |      gyro_cal_z                : Gyro Z calibration. (type:float)
 |      accel_cal_x               : Accel X calibration. (type:float)
 |      accel_cal_y               : Accel Y calibration. (type:float)
 |      accel_cal_z               : Accel Z calibration. (type:float)
 |  
 |  serial_control_encode(self, device, flags, timeout, baudrate, count, data)
 |      Control a serial port. This can be used for raw access to an onboard
 |      serial peripheral such as a GPS or telemetry radio. It
 |      is designed to make it possible to update the devices
 |      firmware via MAVLink messages or change the devices
 |      settings. A message with zero bytes can be used to
 |      change just the baudrate.
 |      
 |      device                    : Serial control device type. (type:uint8_t, values:SERIAL_CONTROL_DEV)
 |      flags                     : Bitmap of serial control flags. (type:uint8_t, values:SERIAL_CONTROL_FLAG)
 |      timeout                   : Timeout for reply data [ms] (type:uint16_t)
 |      baudrate                  : Baudrate of transfer. Zero means no change. [bits/s] (type:uint32_t)
 |      count                     : how many bytes in this transfer [bytes] (type:uint8_t)
 |      data                      : serial data (type:uint8_t)
 |  
 |  serial_control_send(self, device, flags, timeout, baudrate, count, data, force_mavlink1=False)
 |      Control a serial port. This can be used for raw access to an onboard
 |      serial peripheral such as a GPS or telemetry radio. It
 |      is designed to make it possible to update the devices
 |      firmware via MAVLink messages or change the devices
 |      settings. A message with zero bytes can be used to
 |      change just the baudrate.
 |      
 |      device                    : Serial control device type. (type:uint8_t, values:SERIAL_CONTROL_DEV)
 |      flags                     : Bitmap of serial control flags. (type:uint8_t, values:SERIAL_CONTROL_FLAG)
 |      timeout                   : Timeout for reply data [ms] (type:uint16_t)
 |      baudrate                  : Baudrate of transfer. Zero means no change. [bits/s] (type:uint32_t)
 |      count                     : how many bytes in this transfer [bytes] (type:uint8_t)
 |      data                      : serial data (type:uint8_t)
 |  
 |  servo_output_raw_encode(self, time_usec, port, servo1_raw, servo2_raw, servo3_raw, servo4_raw, servo5_raw, servo6_raw, servo7_raw, servo8_raw, servo9_raw=0, servo10_raw=0, servo11_raw=0, servo12_raw=0, servo13_raw=0, servo14_raw=0, servo15_raw=0, servo16_raw=0)
 |      Superseded by ACTUATOR_OUTPUT_STATUS. The RAW values of the servo
 |      outputs (for RC input from the remote, use the
 |      RC_CHANNELS messages). The standard PPM modulation is
 |      as follows: 1000 microseconds: 0%, 2000 microseconds:
 |      100%.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint32_t)
 |      port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (type:uint8_t)
 |      servo1_raw                : Servo output 1 value [us] (type:uint16_t)
 |      servo2_raw                : Servo output 2 value [us] (type:uint16_t)
 |      servo3_raw                : Servo output 3 value [us] (type:uint16_t)
 |      servo4_raw                : Servo output 4 value [us] (type:uint16_t)
 |      servo5_raw                : Servo output 5 value [us] (type:uint16_t)
 |      servo6_raw                : Servo output 6 value [us] (type:uint16_t)
 |      servo7_raw                : Servo output 7 value [us] (type:uint16_t)
 |      servo8_raw                : Servo output 8 value [us] (type:uint16_t)
 |      servo9_raw                : Servo output 9 value [us] (type:uint16_t)
 |      servo10_raw               : Servo output 10 value [us] (type:uint16_t)
 |      servo11_raw               : Servo output 11 value [us] (type:uint16_t)
 |      servo12_raw               : Servo output 12 value [us] (type:uint16_t)
 |      servo13_raw               : Servo output 13 value [us] (type:uint16_t)
 |      servo14_raw               : Servo output 14 value [us] (type:uint16_t)
 |      servo15_raw               : Servo output 15 value [us] (type:uint16_t)
 |      servo16_raw               : Servo output 16 value [us] (type:uint16_t)
 |  
 |  servo_output_raw_send(self, time_usec, port, servo1_raw, servo2_raw, servo3_raw, servo4_raw, servo5_raw, servo6_raw, servo7_raw, servo8_raw, servo9_raw=0, servo10_raw=0, servo11_raw=0, servo12_raw=0, servo13_raw=0, servo14_raw=0, servo15_raw=0, servo16_raw=0, force_mavlink1=False)
 |      Superseded by ACTUATOR_OUTPUT_STATUS. The RAW values of the servo
 |      outputs (for RC input from the remote, use the
 |      RC_CHANNELS messages). The standard PPM modulation is
 |      as follows: 1000 microseconds: 0%, 2000 microseconds:
 |      100%.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint32_t)
 |      port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (type:uint8_t)
 |      servo1_raw                : Servo output 1 value [us] (type:uint16_t)
 |      servo2_raw                : Servo output 2 value [us] (type:uint16_t)
 |      servo3_raw                : Servo output 3 value [us] (type:uint16_t)
 |      servo4_raw                : Servo output 4 value [us] (type:uint16_t)
 |      servo5_raw                : Servo output 5 value [us] (type:uint16_t)
 |      servo6_raw                : Servo output 6 value [us] (type:uint16_t)
 |      servo7_raw                : Servo output 7 value [us] (type:uint16_t)
 |      servo8_raw                : Servo output 8 value [us] (type:uint16_t)
 |      servo9_raw                : Servo output 9 value [us] (type:uint16_t)
 |      servo10_raw               : Servo output 10 value [us] (type:uint16_t)
 |      servo11_raw               : Servo output 11 value [us] (type:uint16_t)
 |      servo12_raw               : Servo output 12 value [us] (type:uint16_t)
 |      servo13_raw               : Servo output 13 value [us] (type:uint16_t)
 |      servo14_raw               : Servo output 14 value [us] (type:uint16_t)
 |      servo15_raw               : Servo output 15 value [us] (type:uint16_t)
 |      servo16_raw               : Servo output 16 value [us] (type:uint16_t)
 |  
 |  set_actuator_control_target_encode(self, time_usec, group_mlx, target_system, target_component, controls)
 |      Set the vehicle attitude and body angular rates.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      group_mlx                 : Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances. (type:uint8_t)
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      controls                  : Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs. (type:float)
 |  
 |  set_actuator_control_target_send(self, time_usec, group_mlx, target_system, target_component, controls, force_mavlink1=False)
 |      Set the vehicle attitude and body angular rates.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      group_mlx                 : Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances. (type:uint8_t)
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      controls                  : Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs. (type:float)
 |  
 |  set_attitude_target_encode(self, time_boot_ms, target_system, target_component, type_mask, q, body_roll_rate, body_pitch_rate, body_yaw_rate, thrust)
 |      Sets a desired vehicle attitude. Used by an external controller to
 |      command the vehicle (manual controller or other
 |      system).
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      type_mask                 : Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 6: reserved, bit 7: throttle, bit 8: attitude (type:uint8_t)
 |      q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (type:float)
 |      body_roll_rate            : Body roll rate [rad/s] (type:float)
 |      body_pitch_rate           : Body pitch rate [rad/s] (type:float)
 |      body_yaw_rate             : Body yaw rate [rad/s] (type:float)
 |      thrust                    : Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust) (type:float)
 |  
 |  set_attitude_target_send(self, time_boot_ms, target_system, target_component, type_mask, q, body_roll_rate, body_pitch_rate, body_yaw_rate, thrust, force_mavlink1=False)
 |      Sets a desired vehicle attitude. Used by an external controller to
 |      command the vehicle (manual controller or other
 |      system).
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      type_mask                 : Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 6: reserved, bit 7: throttle, bit 8: attitude (type:uint8_t)
 |      q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (type:float)
 |      body_roll_rate            : Body roll rate [rad/s] (type:float)
 |      body_pitch_rate           : Body pitch rate [rad/s] (type:float)
 |      body_yaw_rate             : Body yaw rate [rad/s] (type:float)
 |      thrust                    : Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust) (type:float)
 |  
 |  set_callback(self, callback, *args, **kwargs)
 |  
 |  set_gps_global_origin_encode(self, target_system, latitude, longitude, altitude, time_usec=0)
 |      Sets the GPS co-ordinates of the vehicle local origin (0,0,0)
 |      position. Vehicle should emit GPS_GLOBAL_ORIGIN
 |      irrespective of whether the origin is changed. This
 |      enables transform between the local coordinate frame
 |      and the global (GPS) coordinate frame, which may be
 |      necessary when (for example) indoor and outdoor
 |      settings are connected and the MAV should move from
 |      in- to outdoor.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      latitude                  : Latitude (WGS84) [degE7] (type:int32_t)
 |      longitude                 : Longitude (WGS84) [degE7] (type:int32_t)
 |      altitude                  : Altitude (MSL). Positive for up. [mm] (type:int32_t)
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |  
 |  set_gps_global_origin_send(self, target_system, latitude, longitude, altitude, time_usec=0, force_mavlink1=False)
 |      Sets the GPS co-ordinates of the vehicle local origin (0,0,0)
 |      position. Vehicle should emit GPS_GLOBAL_ORIGIN
 |      irrespective of whether the origin is changed. This
 |      enables transform between the local coordinate frame
 |      and the global (GPS) coordinate frame, which may be
 |      necessary when (for example) indoor and outdoor
 |      settings are connected and the MAV should move from
 |      in- to outdoor.
 |      
 |      target_system             : System ID (type:uint8_t)
 |      latitude                  : Latitude (WGS84) [degE7] (type:int32_t)
 |      longitude                 : Longitude (WGS84) [degE7] (type:int32_t)
 |      altitude                  : Altitude (MSL). Positive for up. [mm] (type:int32_t)
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |  
 |  set_home_position_encode(self, target_system, latitude, longitude, altitude, x, y, z, q, approach_x, approach_y, approach_z, time_usec=0)
 |      The position the system will return to and land on. The position is
 |      set automatically by the system during the takeoff in
 |      case it was not explicitly set by the operator before
 |      or after. The global and local positions encode the
 |      position in the respective coordinate frames, while
 |      the q parameter encodes the orientation of the
 |      surface. Under normal conditions it describes the
 |      heading and terrain slope, which can be used by the
 |      aircraft to adjust the approach. The approach 3D
 |      vector describes the point to which the system should
 |      fly in normal flight mode and then perform a landing
 |      sequence along the vector.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      latitude                  : Latitude (WGS84) [degE7] (type:int32_t)
 |      longitude                 : Longitude (WGS84) [degE7] (type:int32_t)
 |      altitude                  : Altitude (MSL). Positive for up. [mm] (type:int32_t)
 |      x                         : Local X position of this position in the local coordinate frame [m] (type:float)
 |      y                         : Local Y position of this position in the local coordinate frame [m] (type:float)
 |      z                         : Local Z position of this position in the local coordinate frame [m] (type:float)
 |      q                         : World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground (type:float)
 |      approach_x                : Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
 |      approach_y                : Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
 |      approach_z                : Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |  
 |  set_home_position_send(self, target_system, latitude, longitude, altitude, x, y, z, q, approach_x, approach_y, approach_z, time_usec=0, force_mavlink1=False)
 |      The position the system will return to and land on. The position is
 |      set automatically by the system during the takeoff in
 |      case it was not explicitly set by the operator before
 |      or after. The global and local positions encode the
 |      position in the respective coordinate frames, while
 |      the q parameter encodes the orientation of the
 |      surface. Under normal conditions it describes the
 |      heading and terrain slope, which can be used by the
 |      aircraft to adjust the approach. The approach 3D
 |      vector describes the point to which the system should
 |      fly in normal flight mode and then perform a landing
 |      sequence along the vector.
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      latitude                  : Latitude (WGS84) [degE7] (type:int32_t)
 |      longitude                 : Longitude (WGS84) [degE7] (type:int32_t)
 |      altitude                  : Altitude (MSL). Positive for up. [mm] (type:int32_t)
 |      x                         : Local X position of this position in the local coordinate frame [m] (type:float)
 |      y                         : Local Y position of this position in the local coordinate frame [m] (type:float)
 |      z                         : Local Z position of this position in the local coordinate frame [m] (type:float)
 |      q                         : World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground (type:float)
 |      approach_x                : Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
 |      approach_y                : Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
 |      approach_z                : Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |  
 |  set_mag_offsets_encode(self, target_system, target_component, mag_ofs_x, mag_ofs_y, mag_ofs_z)
 |      Set the magnetometer offsets
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      mag_ofs_x                 : Magnetometer X offset. (type:int16_t)
 |      mag_ofs_y                 : Magnetometer Y offset. (type:int16_t)
 |      mag_ofs_z                 : Magnetometer Z offset. (type:int16_t)
 |  
 |  set_mag_offsets_send(self, target_system, target_component, mag_ofs_x, mag_ofs_y, mag_ofs_z, force_mavlink1=False)
 |      Set the magnetometer offsets
 |      
 |      target_system             : System ID. (type:uint8_t)
 |      target_component          : Component ID. (type:uint8_t)
 |      mag_ofs_x                 : Magnetometer X offset. (type:int16_t)
 |      mag_ofs_y                 : Magnetometer Y offset. (type:int16_t)
 |      mag_ofs_z                 : Magnetometer Z offset. (type:int16_t)
 |  
 |  set_mode_encode(self, target_system, base_mode, custom_mode)
 |      Set the system mode, as defined by enum MAV_MODE. There is no target
 |      component id as the mode is by definition for the
 |      overall aircraft, not only for one component.
 |      
 |      target_system             : The system setting the mode (type:uint8_t)
 |      base_mode                 : The new base mode. (type:uint8_t, values:MAV_MODE)
 |      custom_mode               : The new autopilot-specific mode. This field can be ignored by an autopilot. (type:uint32_t)
 |  
 |  set_mode_send(self, target_system, base_mode, custom_mode, force_mavlink1=False)
 |      Set the system mode, as defined by enum MAV_MODE. There is no target
 |      component id as the mode is by definition for the
 |      overall aircraft, not only for one component.
 |      
 |      target_system             : The system setting the mode (type:uint8_t)
 |      base_mode                 : The new base mode. (type:uint8_t, values:MAV_MODE)
 |      custom_mode               : The new autopilot-specific mode. This field can be ignored by an autopilot. (type:uint32_t)
 |  
 |  set_position_target_global_int_encode(self, time_boot_ms, target_system, target_component, coordinate_frame, type_mask, lat_int, lon_int, alt, vx, vy, vz, afx, afy, afz, yaw, yaw_rate)
 |      Sets a desired vehicle position, velocity, and/or acceleration in a
 |      global coordinate system (WGS84). Used by an external
 |      controller to command the vehicle (manual controller
 |      or other system).
 |      
 |      time_boot_ms              : Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency. [ms] (type:uint32_t)
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      coordinate_frame          : Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11 (type:uint8_t, values:MAV_FRAME)
 |      type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (type:uint16_t, values:POSITION_TARGET_TYPEMASK)
 |      lat_int                   : X Position in WGS84 frame [degE7] (type:int32_t)
 |      lon_int                   : Y Position in WGS84 frame [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL, Relative to home, or AGL - depending on frame) [m] (type:float)
 |      vx                        : X velocity in NED frame [m/s] (type:float)
 |      vy                        : Y velocity in NED frame [m/s] (type:float)
 |      vz                        : Z velocity in NED frame [m/s] (type:float)
 |      afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      yaw                       : yaw setpoint [rad] (type:float)
 |      yaw_rate                  : yaw rate setpoint [rad/s] (type:float)
 |  
 |  set_position_target_global_int_send(self, time_boot_ms, target_system, target_component, coordinate_frame, type_mask, lat_int, lon_int, alt, vx, vy, vz, afx, afy, afz, yaw, yaw_rate, force_mavlink1=False)
 |      Sets a desired vehicle position, velocity, and/or acceleration in a
 |      global coordinate system (WGS84). Used by an external
 |      controller to command the vehicle (manual controller
 |      or other system).
 |      
 |      time_boot_ms              : Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency. [ms] (type:uint32_t)
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      coordinate_frame          : Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11 (type:uint8_t, values:MAV_FRAME)
 |      type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (type:uint16_t, values:POSITION_TARGET_TYPEMASK)
 |      lat_int                   : X Position in WGS84 frame [degE7] (type:int32_t)
 |      lon_int                   : Y Position in WGS84 frame [degE7] (type:int32_t)
 |      alt                       : Altitude (MSL, Relative to home, or AGL - depending on frame) [m] (type:float)
 |      vx                        : X velocity in NED frame [m/s] (type:float)
 |      vy                        : Y velocity in NED frame [m/s] (type:float)
 |      vz                        : Z velocity in NED frame [m/s] (type:float)
 |      afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      yaw                       : yaw setpoint [rad] (type:float)
 |      yaw_rate                  : yaw rate setpoint [rad/s] (type:float)
 |  
 |  set_position_target_local_ned_encode(self, time_boot_ms, target_system, target_component, coordinate_frame, type_mask, x, y, z, vx, vy, vz, afx, afy, afz, yaw, yaw_rate)
 |      Sets a desired vehicle position in a local north-east-down coordinate
 |      frame. Used by an external controller to command the
 |      vehicle (manual controller or other system).
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      coordinate_frame          : Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9 (type:uint8_t, values:MAV_FRAME)
 |      type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (type:uint16_t, values:POSITION_TARGET_TYPEMASK)
 |      x                         : X Position in NED frame [m] (type:float)
 |      y                         : Y Position in NED frame [m] (type:float)
 |      z                         : Z Position in NED frame (note, altitude is negative in NED) [m] (type:float)
 |      vx                        : X velocity in NED frame [m/s] (type:float)
 |      vy                        : Y velocity in NED frame [m/s] (type:float)
 |      vz                        : Z velocity in NED frame [m/s] (type:float)
 |      afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      yaw                       : yaw setpoint [rad] (type:float)
 |      yaw_rate                  : yaw rate setpoint [rad/s] (type:float)
 |  
 |  set_position_target_local_ned_send(self, time_boot_ms, target_system, target_component, coordinate_frame, type_mask, x, y, z, vx, vy, vz, afx, afy, afz, yaw, yaw_rate, force_mavlink1=False)
 |      Sets a desired vehicle position in a local north-east-down coordinate
 |      frame. Used by an external controller to command the
 |      vehicle (manual controller or other system).
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      target_system             : System ID (type:uint8_t)
 |      target_component          : Component ID (type:uint8_t)
 |      coordinate_frame          : Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9 (type:uint8_t, values:MAV_FRAME)
 |      type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (type:uint16_t, values:POSITION_TARGET_TYPEMASK)
 |      x                         : X Position in NED frame [m] (type:float)
 |      y                         : Y Position in NED frame [m] (type:float)
 |      z                         : Z Position in NED frame (note, altitude is negative in NED) [m] (type:float)
 |      vx                        : X velocity in NED frame [m/s] (type:float)
 |      vy                        : Y velocity in NED frame [m/s] (type:float)
 |      vz                        : Z velocity in NED frame [m/s] (type:float)
 |      afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
 |      yaw                       : yaw setpoint [rad] (type:float)
 |      yaw_rate                  : yaw rate setpoint [rad/s] (type:float)
 |  
 |  set_send_callback(self, callback, *args, **kwargs)
 |  
 |  setup_signing_encode(self, target_system, target_component, secret_key, initial_timestamp)
 |      Setup a MAVLink2 signing key. If called with secret_key of all zero
 |      and zero initial_timestamp will disable signing
 |      
 |      target_system             : system id of the target (type:uint8_t)
 |      target_component          : component ID of the target (type:uint8_t)
 |      secret_key                : signing key (type:uint8_t)
 |      initial_timestamp         : initial timestamp (type:uint64_t)
 |  
 |  setup_signing_send(self, target_system, target_component, secret_key, initial_timestamp, force_mavlink1=False)
 |      Setup a MAVLink2 signing key. If called with secret_key of all zero
 |      and zero initial_timestamp will disable signing
 |      
 |      target_system             : system id of the target (type:uint8_t)
 |      target_component          : component ID of the target (type:uint8_t)
 |      secret_key                : signing key (type:uint8_t)
 |      initial_timestamp         : initial timestamp (type:uint64_t)
 |  
 |  sim_state_encode(self, q1, q2, q3, q4, roll, pitch, yaw, xacc, yacc, zacc, xgyro, ygyro, zgyro, lat, lon, alt, std_dev_horz, std_dev_vert, vn, ve, vd)
 |      Status of simulation environment, if used
 |      
 |      q1                        : True attitude quaternion component 1, w (1 in null-rotation) (type:float)
 |      q2                        : True attitude quaternion component 2, x (0 in null-rotation) (type:float)
 |      q3                        : True attitude quaternion component 3, y (0 in null-rotation) (type:float)
 |      q4                        : True attitude quaternion component 4, z (0 in null-rotation) (type:float)
 |      roll                      : Attitude roll expressed as Euler angles, not recommended except for human-readable outputs (type:float)
 |      pitch                     : Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs (type:float)
 |      yaw                       : Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs (type:float)
 |      xacc                      : X acceleration [m/s/s] (type:float)
 |      yacc                      : Y acceleration [m/s/s] (type:float)
 |      zacc                      : Z acceleration [m/s/s] (type:float)
 |      xgyro                     : Angular speed around X axis [rad/s] (type:float)
 |      ygyro                     : Angular speed around Y axis [rad/s] (type:float)
 |      zgyro                     : Angular speed around Z axis [rad/s] (type:float)
 |      lat                       : Latitude [deg] (type:float)
 |      lon                       : Longitude [deg] (type:float)
 |      alt                       : Altitude [m] (type:float)
 |      std_dev_horz              : Horizontal position standard deviation (type:float)
 |      std_dev_vert              : Vertical position standard deviation (type:float)
 |      vn                        : True velocity in north direction in earth-fixed NED frame [m/s] (type:float)
 |      ve                        : True velocity in east direction in earth-fixed NED frame [m/s] (type:float)
 |      vd                        : True velocity in down direction in earth-fixed NED frame [m/s] (type:float)
 |  
 |  sim_state_send(self, q1, q2, q3, q4, roll, pitch, yaw, xacc, yacc, zacc, xgyro, ygyro, zgyro, lat, lon, alt, std_dev_horz, std_dev_vert, vn, ve, vd, force_mavlink1=False)
 |      Status of simulation environment, if used
 |      
 |      q1                        : True attitude quaternion component 1, w (1 in null-rotation) (type:float)
 |      q2                        : True attitude quaternion component 2, x (0 in null-rotation) (type:float)
 |      q3                        : True attitude quaternion component 3, y (0 in null-rotation) (type:float)
 |      q4                        : True attitude quaternion component 4, z (0 in null-rotation) (type:float)
 |      roll                      : Attitude roll expressed as Euler angles, not recommended except for human-readable outputs (type:float)
 |      pitch                     : Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs (type:float)
 |      yaw                       : Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs (type:float)
 |      xacc                      : X acceleration [m/s/s] (type:float)
 |      yacc                      : Y acceleration [m/s/s] (type:float)
 |      zacc                      : Z acceleration [m/s/s] (type:float)
 |      xgyro                     : Angular speed around X axis [rad/s] (type:float)
 |      ygyro                     : Angular speed around Y axis [rad/s] (type:float)
 |      zgyro                     : Angular speed around Z axis [rad/s] (type:float)
 |      lat                       : Latitude [deg] (type:float)
 |      lon                       : Longitude [deg] (type:float)
 |      alt                       : Altitude [m] (type:float)
 |      std_dev_horz              : Horizontal position standard deviation (type:float)
 |      std_dev_vert              : Vertical position standard deviation (type:float)
 |      vn                        : True velocity in north direction in earth-fixed NED frame [m/s] (type:float)
 |      ve                        : True velocity in east direction in earth-fixed NED frame [m/s] (type:float)
 |      vd                        : True velocity in down direction in earth-fixed NED frame [m/s] (type:float)
 |  
 |  simstate_encode(self, roll, pitch, yaw, xacc, yacc, zacc, xgyro, ygyro, zgyro, lat, lng)
 |      Status of simulation environment, if used.
 |      
 |      roll                      : Roll angle. [rad] (type:float)
 |      pitch                     : Pitch angle. [rad] (type:float)
 |      yaw                       : Yaw angle. [rad] (type:float)
 |      xacc                      : X acceleration. [m/s/s] (type:float)
 |      yacc                      : Y acceleration. [m/s/s] (type:float)
 |      zacc                      : Z acceleration. [m/s/s] (type:float)
 |      xgyro                     : Angular speed around X axis. [rad/s] (type:float)
 |      ygyro                     : Angular speed around Y axis. [rad/s] (type:float)
 |      zgyro                     : Angular speed around Z axis. [rad/s] (type:float)
 |      lat                       : Latitude. [degE7] (type:int32_t)
 |      lng                       : Longitude. [degE7] (type:int32_t)
 |  
 |  simstate_send(self, roll, pitch, yaw, xacc, yacc, zacc, xgyro, ygyro, zgyro, lat, lng, force_mavlink1=False)
 |      Status of simulation environment, if used.
 |      
 |      roll                      : Roll angle. [rad] (type:float)
 |      pitch                     : Pitch angle. [rad] (type:float)
 |      yaw                       : Yaw angle. [rad] (type:float)
 |      xacc                      : X acceleration. [m/s/s] (type:float)
 |      yacc                      : Y acceleration. [m/s/s] (type:float)
 |      zacc                      : Z acceleration. [m/s/s] (type:float)
 |      xgyro                     : Angular speed around X axis. [rad/s] (type:float)
 |      ygyro                     : Angular speed around Y axis. [rad/s] (type:float)
 |      zgyro                     : Angular speed around Z axis. [rad/s] (type:float)
 |      lat                       : Latitude. [degE7] (type:int32_t)
 |      lng                       : Longitude. [degE7] (type:int32_t)
 |  
 |  statustext_encode(self, severity, text, id=0, chunk_seq=0)
 |      Status text message. These messages are printed in yellow in the COMM
 |      console of QGroundControl. WARNING: They consume quite
 |      some bandwidth, so use only for important status and
 |      error messages. If implemented wisely, these messages
 |      are buffered on the MCU and sent only at a limited
 |      rate (e.g. 10 Hz).
 |      
 |      severity                  : Severity of status. Relies on the definitions within RFC-5424. (type:uint8_t, values:MAV_SEVERITY)
 |      text                      : Status text message, without null termination character (type:char)
 |      id                        : Unique (opaque) identifier for this statustext message.  May be used to reassemble a logical long-statustext message from a sequence of chunks.  A value of zero indicates this is the only chunk in the sequence and the message can be emitted immediately. (type:uint16_t)
 |      chunk_seq                 : This chunk's sequence number; indexing is from zero.  Any null character in the text field is taken to mean this was the last chunk. (type:uint8_t)
 |  
 |  statustext_long_encode(self, severity, text)
 |      Status text message (use only for important status and error
 |      messages). The full message payload can be used for
 |      status text, but we recommend that updates be kept
 |      concise. Note: The message is intended as a less
 |      restrictive replacement for STATUSTEXT.
 |      
 |      severity                  : Severity of status. Relies on the definitions within RFC-5424. (type:uint8_t, values:MAV_SEVERITY)
 |      text                      : Status text message, without null termination character. (type:char)
 |  
 |  statustext_long_send(self, severity, text, force_mavlink1=False)
 |      Status text message (use only for important status and error
 |      messages). The full message payload can be used for
 |      status text, but we recommend that updates be kept
 |      concise. Note: The message is intended as a less
 |      restrictive replacement for STATUSTEXT.
 |      
 |      severity                  : Severity of status. Relies on the definitions within RFC-5424. (type:uint8_t, values:MAV_SEVERITY)
 |      text                      : Status text message, without null termination character. (type:char)
 |  
 |  statustext_send(self, severity, text, id=0, chunk_seq=0, force_mavlink1=False)
 |      Status text message. These messages are printed in yellow in the COMM
 |      console of QGroundControl. WARNING: They consume quite
 |      some bandwidth, so use only for important status and
 |      error messages. If implemented wisely, these messages
 |      are buffered on the MCU and sent only at a limited
 |      rate (e.g. 10 Hz).
 |      
 |      severity                  : Severity of status. Relies on the definitions within RFC-5424. (type:uint8_t, values:MAV_SEVERITY)
 |      text                      : Status text message, without null termination character (type:char)
 |      id                        : Unique (opaque) identifier for this statustext message.  May be used to reassemble a logical long-statustext message from a sequence of chunks.  A value of zero indicates this is the only chunk in the sequence and the message can be emitted immediately. (type:uint16_t)
 |      chunk_seq                 : This chunk's sequence number; indexing is from zero.  Any null character in the text field is taken to mean this was the last chunk. (type:uint8_t)
 |  
 |  storage_information_encode(self, time_boot_ms, storage_id, storage_count, status, total_capacity, used_capacity, available_capacity, read_speed, write_speed)
 |      Information about a storage medium. This message is sent in response
 |      to a request and whenever the status of the storage
 |      changes (STORAGE_STATUS).
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      storage_id                : Storage ID (1 for first, 2 for second, etc.) (type:uint8_t)
 |      storage_count             : Number of storage devices (type:uint8_t)
 |      status                    : Status of storage (type:uint8_t, values:STORAGE_STATUS)
 |      total_capacity            : Total capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored. [MiB] (type:float)
 |      used_capacity             : Used capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored. [MiB] (type:float)
 |      available_capacity        : Available storage capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored. [MiB] (type:float)
 |      read_speed                : Read speed. [MiB/s] (type:float)
 |      write_speed               : Write speed. [MiB/s] (type:float)
 |  
 |  storage_information_send(self, time_boot_ms, storage_id, storage_count, status, total_capacity, used_capacity, available_capacity, read_speed, write_speed, force_mavlink1=False)
 |      Information about a storage medium. This message is sent in response
 |      to a request and whenever the status of the storage
 |      changes (STORAGE_STATUS).
 |      
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |      storage_id                : Storage ID (1 for first, 2 for second, etc.) (type:uint8_t)
 |      storage_count             : Number of storage devices (type:uint8_t)
 |      status                    : Status of storage (type:uint8_t, values:STORAGE_STATUS)
 |      total_capacity            : Total capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored. [MiB] (type:float)
 |      used_capacity             : Used capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored. [MiB] (type:float)
 |      available_capacity        : Available storage capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored. [MiB] (type:float)
 |      read_speed                : Read speed. [MiB/s] (type:float)
 |      write_speed               : Write speed. [MiB/s] (type:float)
 |  
 |  sys_status_encode(self, onboard_control_sensors_present, onboard_control_sensors_enabled, onboard_control_sensors_health, load, voltage_battery, current_battery, battery_remaining, drop_rate_comm, errors_comm, errors_count1, errors_count2, errors_count3, errors_count4)
 |      The general system state. If the system is following the MAVLink
 |      standard, the system state is mainly defined by three
 |      orthogonal states/modes: The system mode, which is
 |      either LOCKED (motors shut down and locked), MANUAL
 |      (system under RC control), GUIDED (system with
 |      autonomous position control, position setpoint
 |      controlled manually) or AUTO (system guided by
 |      path/waypoint planner). The NAV_MODE defined the
 |      current flight state: LIFTOFF (often an open-loop
 |      maneuver), LANDING, WAYPOINTS or VECTOR. This
 |      represents the internal navigation state machine. The
 |      system status shows whether the system is currently
 |      active or not and if an emergency occurred. During the
 |      CRITICAL and EMERGENCY states the MAV is still
 |      considered to be active, but should start emergency
 |      procedures autonomously. After a failure occurred it
 |      should first move from active to critical to allow
 |      manual intervention and then move to emergency after a
 |      certain timeout.
 |      
 |      onboard_control_sensors_present        : Bitmap showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present. (type:uint32_t, values:MAV_SYS_STATUS_SENSOR)
 |      onboard_control_sensors_enabled        : Bitmap showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled. (type:uint32_t, values:MAV_SYS_STATUS_SENSOR)
 |      onboard_control_sensors_health        : Bitmap showing which onboard controllers and sensors have an error (or are operational). Value of 0: error. Value of 1: healthy. (type:uint32_t, values:MAV_SYS_STATUS_SENSOR)
 |      load                      : Maximum usage in percent of the mainloop time. Values: [0-1000] - should always be below 1000 [d%] (type:uint16_t)
 |      voltage_battery           : Battery voltage, UINT16_MAX: Voltage not sent by autopilot [mV] (type:uint16_t)
 |      current_battery           : Battery current, -1: Current not sent by autopilot [cA] (type:int16_t)
 |      battery_remaining         : Battery energy remaining, -1: Battery remaining energy not sent by autopilot [%] (type:int8_t)
 |      drop_rate_comm            : Communication drop rate, (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV) [c%] (type:uint16_t)
 |      errors_comm               : Communication errors (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV) (type:uint16_t)
 |      errors_count1             : Autopilot-specific errors (type:uint16_t)
 |      errors_count2             : Autopilot-specific errors (type:uint16_t)
 |      errors_count3             : Autopilot-specific errors (type:uint16_t)
 |      errors_count4             : Autopilot-specific errors (type:uint16_t)
 |  
 |  sys_status_send(self, onboard_control_sensors_present, onboard_control_sensors_enabled, onboard_control_sensors_health, load, voltage_battery, current_battery, battery_remaining, drop_rate_comm, errors_comm, errors_count1, errors_count2, errors_count3, errors_count4, force_mavlink1=False)
 |      The general system state. If the system is following the MAVLink
 |      standard, the system state is mainly defined by three
 |      orthogonal states/modes: The system mode, which is
 |      either LOCKED (motors shut down and locked), MANUAL
 |      (system under RC control), GUIDED (system with
 |      autonomous position control, position setpoint
 |      controlled manually) or AUTO (system guided by
 |      path/waypoint planner). The NAV_MODE defined the
 |      current flight state: LIFTOFF (often an open-loop
 |      maneuver), LANDING, WAYPOINTS or VECTOR. This
 |      represents the internal navigation state machine. The
 |      system status shows whether the system is currently
 |      active or not and if an emergency occurred. During the
 |      CRITICAL and EMERGENCY states the MAV is still
 |      considered to be active, but should start emergency
 |      procedures autonomously. After a failure occurred it
 |      should first move from active to critical to allow
 |      manual intervention and then move to emergency after a
 |      certain timeout.
 |      
 |      onboard_control_sensors_present        : Bitmap showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present. (type:uint32_t, values:MAV_SYS_STATUS_SENSOR)
 |      onboard_control_sensors_enabled        : Bitmap showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled. (type:uint32_t, values:MAV_SYS_STATUS_SENSOR)
 |      onboard_control_sensors_health        : Bitmap showing which onboard controllers and sensors have an error (or are operational). Value of 0: error. Value of 1: healthy. (type:uint32_t, values:MAV_SYS_STATUS_SENSOR)
 |      load                      : Maximum usage in percent of the mainloop time. Values: [0-1000] - should always be below 1000 [d%] (type:uint16_t)
 |      voltage_battery           : Battery voltage, UINT16_MAX: Voltage not sent by autopilot [mV] (type:uint16_t)
 |      current_battery           : Battery current, -1: Current not sent by autopilot [cA] (type:int16_t)
 |      battery_remaining         : Battery energy remaining, -1: Battery remaining energy not sent by autopilot [%] (type:int8_t)
 |      drop_rate_comm            : Communication drop rate, (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV) [c%] (type:uint16_t)
 |      errors_comm               : Communication errors (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV) (type:uint16_t)
 |      errors_count1             : Autopilot-specific errors (type:uint16_t)
 |      errors_count2             : Autopilot-specific errors (type:uint16_t)
 |      errors_count3             : Autopilot-specific errors (type:uint16_t)
 |      errors_count4             : Autopilot-specific errors (type:uint16_t)
 |  
 |  system_time_encode(self, time_unix_usec, time_boot_ms)
 |      The system time is the time of the master clock, typically the
 |      computer clock of the main onboard computer.
 |      
 |      time_unix_usec            : Timestamp (UNIX epoch time). [us] (type:uint64_t)
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |  
 |  system_time_send(self, time_unix_usec, time_boot_ms, force_mavlink1=False)
 |      The system time is the time of the master clock, typically the
 |      computer clock of the main onboard computer.
 |      
 |      time_unix_usec            : Timestamp (UNIX epoch time). [us] (type:uint64_t)
 |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
 |  
 |  terrain_check_encode(self, lat, lon)
 |      Request that the vehicle report terrain height at the given location.
 |      Used by GCS to check if vehicle has all terrain data
 |      needed for a mission.
 |      
 |      lat                       : Latitude [degE7] (type:int32_t)
 |      lon                       : Longitude [degE7] (type:int32_t)
 |  
 |  terrain_check_send(self, lat, lon, force_mavlink1=False)
 |      Request that the vehicle report terrain height at the given location.
 |      Used by GCS to check if vehicle has all terrain data
 |      needed for a mission.
 |      
 |      lat                       : Latitude [degE7] (type:int32_t)
 |      lon                       : Longitude [degE7] (type:int32_t)
 |  
 |  terrain_data_encode(self, lat, lon, grid_spacing, gridbit, data)
 |      Terrain data sent from GCS. The lat/lon and grid_spacing must be the
 |      same as a lat/lon from a TERRAIN_REQUEST
 |      
 |      lat                       : Latitude of SW corner of first grid [degE7] (type:int32_t)
 |      lon                       : Longitude of SW corner of first grid [degE7] (type:int32_t)
 |      grid_spacing              : Grid spacing [m] (type:uint16_t)
 |      gridbit                   : bit within the terrain request mask (type:uint8_t)
 |      data                      : Terrain data MSL [m] (type:int16_t)
 |  
 |  terrain_data_send(self, lat, lon, grid_spacing, gridbit, data, force_mavlink1=False)
 |      Terrain data sent from GCS. The lat/lon and grid_spacing must be the
 |      same as a lat/lon from a TERRAIN_REQUEST
 |      
 |      lat                       : Latitude of SW corner of first grid [degE7] (type:int32_t)
 |      lon                       : Longitude of SW corner of first grid [degE7] (type:int32_t)
 |      grid_spacing              : Grid spacing [m] (type:uint16_t)
 |      gridbit                   : bit within the terrain request mask (type:uint8_t)
 |      data                      : Terrain data MSL [m] (type:int16_t)
 |  
 |  terrain_report_encode(self, lat, lon, spacing, terrain_height, current_height, pending, loaded)
 |      Response from a TERRAIN_CHECK request
 |      
 |      lat                       : Latitude [degE7] (type:int32_t)
 |      lon                       : Longitude [degE7] (type:int32_t)
 |      spacing                   : grid spacing (zero if terrain at this location unavailable) (type:uint16_t)
 |      terrain_height            : Terrain height MSL [m] (type:float)
 |      current_height            : Current vehicle height above lat/lon terrain height [m] (type:float)
 |      pending                   : Number of 4x4 terrain blocks waiting to be received or read from disk (type:uint16_t)
 |      loaded                    : Number of 4x4 terrain blocks in memory (type:uint16_t)
 |  
 |  terrain_report_send(self, lat, lon, spacing, terrain_height, current_height, pending, loaded, force_mavlink1=False)
 |      Response from a TERRAIN_CHECK request
 |      
 |      lat                       : Latitude [degE7] (type:int32_t)
 |      lon                       : Longitude [degE7] (type:int32_t)
 |      spacing                   : grid spacing (zero if terrain at this location unavailable) (type:uint16_t)
 |      terrain_height            : Terrain height MSL [m] (type:float)
 |      current_height            : Current vehicle height above lat/lon terrain height [m] (type:float)
 |      pending                   : Number of 4x4 terrain blocks waiting to be received or read from disk (type:uint16_t)
 |      loaded                    : Number of 4x4 terrain blocks in memory (type:uint16_t)
 |  
 |  terrain_request_encode(self, lat, lon, grid_spacing, mask)
 |      Request for terrain data and terrain status
 |      
 |      lat                       : Latitude of SW corner of first grid [degE7] (type:int32_t)
 |      lon                       : Longitude of SW corner of first grid [degE7] (type:int32_t)
 |      grid_spacing              : Grid spacing [m] (type:uint16_t)
 |      mask                      : Bitmask of requested 4x4 grids (row major 8x7 array of grids, 56 bits) (type:uint64_t)
 |  
 |  terrain_request_send(self, lat, lon, grid_spacing, mask, force_mavlink1=False)
 |      Request for terrain data and terrain status
 |      
 |      lat                       : Latitude of SW corner of first grid [degE7] (type:int32_t)
 |      lon                       : Longitude of SW corner of first grid [degE7] (type:int32_t)
 |      grid_spacing              : Grid spacing [m] (type:uint16_t)
 |      mask                      : Bitmask of requested 4x4 grids (row major 8x7 array of grids, 56 bits) (type:uint64_t)
 |  
 |  timesync_encode(self, tc1, ts1)
 |      Time synchronization message.
 |      
 |      tc1                       : Time sync timestamp 1 (type:int64_t)
 |      ts1                       : Time sync timestamp 2 (type:int64_t)
 |  
 |  timesync_send(self, tc1, ts1, force_mavlink1=False)
 |      Time synchronization message.
 |      
 |      tc1                       : Time sync timestamp 1 (type:int64_t)
 |      ts1                       : Time sync timestamp 2 (type:int64_t)
 |  
 |  to_string(self, s)
 |      desperate attempt to convert a string regardless of what garbage we get
 |  
 |  uavcan_node_info_encode(self, time_usec, uptime_sec, name, hw_version_major, hw_version_minor, hw_unique_id, sw_version_major, sw_version_minor, sw_vcs_commit)
 |      General information describing a particular UAVCAN node. Please refer
 |      to the definition of the UAVCAN service
 |      "uavcan.protocol.GetNodeInfo" for the background
 |      information. This message should be emitted by the
 |      system whenever a new node appears online, or an
 |      existing node reboots. Additionally, it can be emitted
 |      upon request from the other end of the MAVLink channel
 |      (see MAV_CMD_UAVCAN_GET_NODE_INFO). It is also not
 |      prohibited to emit this message unconditionally at a
 |      low frequency. The UAVCAN specification is available
 |      at http://uavcan.org.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      uptime_sec                : Time since the start-up of the node. [s] (type:uint32_t)
 |      name                      : Node name string. For example, "sapog.px4.io". (type:char)
 |      hw_version_major          : Hardware major version number. (type:uint8_t)
 |      hw_version_minor          : Hardware minor version number. (type:uint8_t)
 |      hw_unique_id              : Hardware unique 128-bit ID. (type:uint8_t)
 |      sw_version_major          : Software major version number. (type:uint8_t)
 |      sw_version_minor          : Software minor version number. (type:uint8_t)
 |      sw_vcs_commit             : Version control system (VCS) revision identifier (e.g. git short commit hash). Zero if unknown. (type:uint32_t)
 |  
 |  uavcan_node_info_send(self, time_usec, uptime_sec, name, hw_version_major, hw_version_minor, hw_unique_id, sw_version_major, sw_version_minor, sw_vcs_commit, force_mavlink1=False)
 |      General information describing a particular UAVCAN node. Please refer
 |      to the definition of the UAVCAN service
 |      "uavcan.protocol.GetNodeInfo" for the background
 |      information. This message should be emitted by the
 |      system whenever a new node appears online, or an
 |      existing node reboots. Additionally, it can be emitted
 |      upon request from the other end of the MAVLink channel
 |      (see MAV_CMD_UAVCAN_GET_NODE_INFO). It is also not
 |      prohibited to emit this message unconditionally at a
 |      low frequency. The UAVCAN specification is available
 |      at http://uavcan.org.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      uptime_sec                : Time since the start-up of the node. [s] (type:uint32_t)
 |      name                      : Node name string. For example, "sapog.px4.io". (type:char)
 |      hw_version_major          : Hardware major version number. (type:uint8_t)
 |      hw_version_minor          : Hardware minor version number. (type:uint8_t)
 |      hw_unique_id              : Hardware unique 128-bit ID. (type:uint8_t)
 |      sw_version_major          : Software major version number. (type:uint8_t)
 |      sw_version_minor          : Software minor version number. (type:uint8_t)
 |      sw_vcs_commit             : Version control system (VCS) revision identifier (e.g. git short commit hash). Zero if unknown. (type:uint32_t)
 |  
 |  uavcan_node_status_encode(self, time_usec, uptime_sec, health, mode, sub_mode, vendor_specific_status_code)
 |      General status information of an UAVCAN node. Please refer to the
 |      definition of the UAVCAN message
 |      "uavcan.protocol.NodeStatus" for the background
 |      information. The UAVCAN specification is available at
 |      http://uavcan.org.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      uptime_sec                : Time since the start-up of the node. [s] (type:uint32_t)
 |      health                    : Generalized node health status. (type:uint8_t, values:UAVCAN_NODE_HEALTH)
 |      mode                      : Generalized operating mode. (type:uint8_t, values:UAVCAN_NODE_MODE)
 |      sub_mode                  : Not used currently. (type:uint8_t)
 |      vendor_specific_status_code        : Vendor-specific status information. (type:uint16_t)
 |  
 |  uavcan_node_status_send(self, time_usec, uptime_sec, health, mode, sub_mode, vendor_specific_status_code, force_mavlink1=False)
 |      General status information of an UAVCAN node. Please refer to the
 |      definition of the UAVCAN message
 |      "uavcan.protocol.NodeStatus" for the background
 |      information. The UAVCAN specification is available at
 |      http://uavcan.org.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      uptime_sec                : Time since the start-up of the node. [s] (type:uint32_t)
 |      health                    : Generalized node health status. (type:uint8_t, values:UAVCAN_NODE_HEALTH)
 |      mode                      : Generalized operating mode. (type:uint8_t, values:UAVCAN_NODE_MODE)
 |      sub_mode                  : Not used currently. (type:uint8_t)
 |      vendor_specific_status_code        : Vendor-specific status information. (type:uint16_t)
 |  
 |  uavionix_adsb_out_cfg_encode(self, ICAO, callsign, emitterType, aircraftSize, gpsOffsetLat, gpsOffsetLon, stallSpeed, rfSelect)
 |      Static data to configure the ADS-B transponder (send within 10 sec of
 |      a POR and every 10 sec thereafter)
 |      
 |      ICAO                      : Vehicle address (24 bit) (type:uint32_t)
 |      callsign                  : Vehicle identifier (8 characters, null terminated, valid characters are A-Z, 0-9, " " only) (type:char)
 |      emitterType               : Transmitting vehicle type. See ADSB_EMITTER_TYPE enum (type:uint8_t, values:ADSB_EMITTER_TYPE)
 |      aircraftSize              : Aircraft length and width encoding (table 2-35 of DO-282B) (type:uint8_t, values:UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE)
 |      gpsOffsetLat              : GPS antenna lateral offset (table 2-36 of DO-282B) (type:uint8_t, values:UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT)
 |      gpsOffsetLon              : GPS antenna longitudinal offset from nose [if non-zero, take position (in meters) divide by 2 and add one] (table 2-37 DO-282B) (type:uint8_t, values:UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON)
 |      stallSpeed                : Aircraft stall speed in cm/s [cm/s] (type:uint16_t)
 |      rfSelect                  : ADS-B transponder reciever and transmit enable flags (type:uint8_t, values:UAVIONIX_ADSB_OUT_RF_SELECT)
 |  
 |  uavionix_adsb_out_cfg_send(self, ICAO, callsign, emitterType, aircraftSize, gpsOffsetLat, gpsOffsetLon, stallSpeed, rfSelect, force_mavlink1=False)
 |      Static data to configure the ADS-B transponder (send within 10 sec of
 |      a POR and every 10 sec thereafter)
 |      
 |      ICAO                      : Vehicle address (24 bit) (type:uint32_t)
 |      callsign                  : Vehicle identifier (8 characters, null terminated, valid characters are A-Z, 0-9, " " only) (type:char)
 |      emitterType               : Transmitting vehicle type. See ADSB_EMITTER_TYPE enum (type:uint8_t, values:ADSB_EMITTER_TYPE)
 |      aircraftSize              : Aircraft length and width encoding (table 2-35 of DO-282B) (type:uint8_t, values:UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE)
 |      gpsOffsetLat              : GPS antenna lateral offset (table 2-36 of DO-282B) (type:uint8_t, values:UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT)
 |      gpsOffsetLon              : GPS antenna longitudinal offset from nose [if non-zero, take position (in meters) divide by 2 and add one] (table 2-37 DO-282B) (type:uint8_t, values:UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON)
 |      stallSpeed                : Aircraft stall speed in cm/s [cm/s] (type:uint16_t)
 |      rfSelect                  : ADS-B transponder reciever and transmit enable flags (type:uint8_t, values:UAVIONIX_ADSB_OUT_RF_SELECT)
 |  
 |  uavionix_adsb_out_dynamic_encode(self, utcTime, gpsLat, gpsLon, gpsAlt, gpsFix, numSats, baroAltMSL, accuracyHor, accuracyVert, accuracyVel, velVert, velNS, VelEW, emergencyStatus, state, squawk)
 |      Dynamic data used to generate ADS-B out transponder data (send at 5Hz)
 |      
 |      utcTime                   : UTC time in seconds since GPS epoch (Jan 6, 1980). If unknown set to UINT32_MAX [s] (type:uint32_t)
 |      gpsLat                    : Latitude WGS84 (deg * 1E7). If unknown set to INT32_MAX [degE7] (type:int32_t)
 |      gpsLon                    : Longitude WGS84 (deg * 1E7). If unknown set to INT32_MAX [degE7] (type:int32_t)
 |      gpsAlt                    : Altitude (WGS84). UP +ve. If unknown set to INT32_MAX [mm] (type:int32_t)
 |      gpsFix                    : 0-1: no fix, 2: 2D fix, 3: 3D fix, 4: DGPS, 5: RTK (type:uint8_t, values:UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX)
 |      numSats                   : Number of satellites visible. If unknown set to UINT8_MAX (type:uint8_t)
 |      baroAltMSL                : Barometric pressure altitude (MSL) relative to a standard atmosphere of 1013.2 mBar and NOT bar corrected altitude (m * 1E-3). (up +ve). If unknown set to INT32_MAX [mbar] (type:int32_t)
 |      accuracyHor               : Horizontal accuracy in mm (m * 1E-3). If unknown set to UINT32_MAX [mm] (type:uint32_t)
 |      accuracyVert              : Vertical accuracy in cm. If unknown set to UINT16_MAX [cm] (type:uint16_t)
 |      accuracyVel               : Velocity accuracy in mm/s (m * 1E-3). If unknown set to UINT16_MAX [mm/s] (type:uint16_t)
 |      velVert                   : GPS vertical speed in cm/s. If unknown set to INT16_MAX [cm/s] (type:int16_t)
 |      velNS                     : North-South velocity over ground in cm/s North +ve. If unknown set to INT16_MAX [cm/s] (type:int16_t)
 |      VelEW                     : East-West velocity over ground in cm/s East +ve. If unknown set to INT16_MAX [cm/s] (type:int16_t)
 |      emergencyStatus           : Emergency status (type:uint8_t, values:UAVIONIX_ADSB_EMERGENCY_STATUS)
 |      state                     : ADS-B transponder dynamic input state flags (type:uint16_t, values:UAVIONIX_ADSB_OUT_DYNAMIC_STATE)
 |      squawk                    : Mode A code (typically 1200 [0x04B0] for VFR) (type:uint16_t)
 |  
 |  uavionix_adsb_out_dynamic_send(self, utcTime, gpsLat, gpsLon, gpsAlt, gpsFix, numSats, baroAltMSL, accuracyHor, accuracyVert, accuracyVel, velVert, velNS, VelEW, emergencyStatus, state, squawk, force_mavlink1=False)
 |      Dynamic data used to generate ADS-B out transponder data (send at 5Hz)
 |      
 |      utcTime                   : UTC time in seconds since GPS epoch (Jan 6, 1980). If unknown set to UINT32_MAX [s] (type:uint32_t)
 |      gpsLat                    : Latitude WGS84 (deg * 1E7). If unknown set to INT32_MAX [degE7] (type:int32_t)
 |      gpsLon                    : Longitude WGS84 (deg * 1E7). If unknown set to INT32_MAX [degE7] (type:int32_t)
 |      gpsAlt                    : Altitude (WGS84). UP +ve. If unknown set to INT32_MAX [mm] (type:int32_t)
 |      gpsFix                    : 0-1: no fix, 2: 2D fix, 3: 3D fix, 4: DGPS, 5: RTK (type:uint8_t, values:UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX)
 |      numSats                   : Number of satellites visible. If unknown set to UINT8_MAX (type:uint8_t)
 |      baroAltMSL                : Barometric pressure altitude (MSL) relative to a standard atmosphere of 1013.2 mBar and NOT bar corrected altitude (m * 1E-3). (up +ve). If unknown set to INT32_MAX [mbar] (type:int32_t)
 |      accuracyHor               : Horizontal accuracy in mm (m * 1E-3). If unknown set to UINT32_MAX [mm] (type:uint32_t)
 |      accuracyVert              : Vertical accuracy in cm. If unknown set to UINT16_MAX [cm] (type:uint16_t)
 |      accuracyVel               : Velocity accuracy in mm/s (m * 1E-3). If unknown set to UINT16_MAX [mm/s] (type:uint16_t)
 |      velVert                   : GPS vertical speed in cm/s. If unknown set to INT16_MAX [cm/s] (type:int16_t)
 |      velNS                     : North-South velocity over ground in cm/s North +ve. If unknown set to INT16_MAX [cm/s] (type:int16_t)
 |      VelEW                     : East-West velocity over ground in cm/s East +ve. If unknown set to INT16_MAX [cm/s] (type:int16_t)
 |      emergencyStatus           : Emergency status (type:uint8_t, values:UAVIONIX_ADSB_EMERGENCY_STATUS)
 |      state                     : ADS-B transponder dynamic input state flags (type:uint16_t, values:UAVIONIX_ADSB_OUT_DYNAMIC_STATE)
 |      squawk                    : Mode A code (typically 1200 [0x04B0] for VFR) (type:uint16_t)
 |  
 |  uavionix_adsb_transceiver_health_report_encode(self, rfHealth)
 |      Transceiver heartbeat with health report (updated every 10s)
 |      
 |      rfHealth                  : ADS-B transponder messages (type:uint8_t, values:UAVIONIX_ADSB_RF_HEALTH)
 |  
 |  uavionix_adsb_transceiver_health_report_send(self, rfHealth, force_mavlink1=False)
 |      Transceiver heartbeat with health report (updated every 10s)
 |      
 |      rfHealth                  : ADS-B transponder messages (type:uint8_t, values:UAVIONIX_ADSB_RF_HEALTH)
 |  
 |  v2_extension_encode(self, target_network, target_system, target_component, message_type, payload)
 |      Message implementing parts of the V2 payload specs in V1 frames for
 |      transitional support.
 |      
 |      target_network            : Network ID (0 for broadcast) (type:uint8_t)
 |      target_system             : System ID (0 for broadcast) (type:uint8_t)
 |      target_component          : Component ID (0 for broadcast) (type:uint8_t)
 |      message_type              : A code that identifies the software component that understands this message (analogous to USB device classes or mime type strings). If this code is less than 32768, it is considered a 'registered' protocol extension and the corresponding entry should be added to https://github.com/mavlink/mavlink/definition_files/extension_message_ids.xml. Software creators can register blocks of message IDs as needed (useful for GCS specific metadata, etc...). Message_types greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase. (type:uint16_t)
 |      payload                   : Variable length payload. The length must be encoded in the payload as part of the message_type protocol, e.g. by including the length as payload data, or by terminating the payload data with a non-zero marker. This is required in order to reconstruct zero-terminated payloads that are (or otherwise would be) trimmed by MAVLink 2 empty-byte truncation. The entire content of the payload block is opaque unless you understand the encoding message_type. The particular encoding used can be extension specific and might not always be documented as part of the MAVLink specification. (type:uint8_t)
 |  
 |  v2_extension_send(self, target_network, target_system, target_component, message_type, payload, force_mavlink1=False)
 |      Message implementing parts of the V2 payload specs in V1 frames for
 |      transitional support.
 |      
 |      target_network            : Network ID (0 for broadcast) (type:uint8_t)
 |      target_system             : System ID (0 for broadcast) (type:uint8_t)
 |      target_component          : Component ID (0 for broadcast) (type:uint8_t)
 |      message_type              : A code that identifies the software component that understands this message (analogous to USB device classes or mime type strings). If this code is less than 32768, it is considered a 'registered' protocol extension and the corresponding entry should be added to https://github.com/mavlink/mavlink/definition_files/extension_message_ids.xml. Software creators can register blocks of message IDs as needed (useful for GCS specific metadata, etc...). Message_types greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase. (type:uint16_t)
 |      payload                   : Variable length payload. The length must be encoded in the payload as part of the message_type protocol, e.g. by including the length as payload data, or by terminating the payload data with a non-zero marker. This is required in order to reconstruct zero-terminated payloads that are (or otherwise would be) trimmed by MAVLink 2 empty-byte truncation. The entire content of the payload block is opaque unless you understand the encoding message_type. The particular encoding used can be extension specific and might not always be documented as part of the MAVLink specification. (type:uint8_t)
 |  
 |  vfr_hud_encode(self, airspeed, groundspeed, heading, throttle, alt, climb)
 |      Metrics typically displayed on a HUD for fixed wing aircraft.
 |      
 |      airspeed                  : Current indicated airspeed (IAS). [m/s] (type:float)
 |      groundspeed               : Current ground speed. [m/s] (type:float)
 |      heading                   : Current heading in compass units (0-360, 0=north). [deg] (type:int16_t)
 |      throttle                  : Current throttle setting (0 to 100). [%] (type:uint16_t)
 |      alt                       : Current altitude (MSL). [m] (type:float)
 |      climb                     : Current climb rate. [m/s] (type:float)
 |  
 |  vfr_hud_send(self, airspeed, groundspeed, heading, throttle, alt, climb, force_mavlink1=False)
 |      Metrics typically displayed on a HUD for fixed wing aircraft.
 |      
 |      airspeed                  : Current indicated airspeed (IAS). [m/s] (type:float)
 |      groundspeed               : Current ground speed. [m/s] (type:float)
 |      heading                   : Current heading in compass units (0-360, 0=north). [deg] (type:int16_t)
 |      throttle                  : Current throttle setting (0 to 100). [%] (type:uint16_t)
 |      alt                       : Current altitude (MSL). [m] (type:float)
 |      climb                     : Current climb rate. [m/s] (type:float)
 |  
 |  vibration_encode(self, time_usec, vibration_x, vibration_y, vibration_z, clipping_0, clipping_1, clipping_2)
 |      Vibration levels and accelerometer clipping
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      vibration_x               : Vibration levels on X-axis (type:float)
 |      vibration_y               : Vibration levels on Y-axis (type:float)
 |      vibration_z               : Vibration levels on Z-axis (type:float)
 |      clipping_0                : first accelerometer clipping count (type:uint32_t)
 |      clipping_1                : second accelerometer clipping count (type:uint32_t)
 |      clipping_2                : third accelerometer clipping count (type:uint32_t)
 |  
 |  vibration_send(self, time_usec, vibration_x, vibration_y, vibration_z, clipping_0, clipping_1, clipping_2, force_mavlink1=False)
 |      Vibration levels and accelerometer clipping
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      vibration_x               : Vibration levels on X-axis (type:float)
 |      vibration_y               : Vibration levels on Y-axis (type:float)
 |      vibration_z               : Vibration levels on Z-axis (type:float)
 |      clipping_0                : first accelerometer clipping count (type:uint32_t)
 |      clipping_1                : second accelerometer clipping count (type:uint32_t)
 |      clipping_2                : third accelerometer clipping count (type:uint32_t)
 |  
 |  vicon_position_estimate_encode(self, usec, x, y, z, roll, pitch, yaw, covariance=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
 |      Global position estimate from a Vicon motion system source.
 |      
 |      usec                      : Timestamp (UNIX time or time since system boot) [us] (type:uint64_t)
 |      x                         : Global X position [m] (type:float)
 |      y                         : Global Y position [m] (type:float)
 |      z                         : Global Z position [m] (type:float)
 |      roll                      : Roll angle [rad] (type:float)
 |      pitch                     : Pitch angle [rad] (type:float)
 |      yaw                       : Yaw angle [rad] (type:float)
 |      covariance                : Row-major representation of 6x6 pose cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |  
 |  vicon_position_estimate_send(self, usec, x, y, z, roll, pitch, yaw, covariance=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], force_mavlink1=False)
 |      Global position estimate from a Vicon motion system source.
 |      
 |      usec                      : Timestamp (UNIX time or time since system boot) [us] (type:uint64_t)
 |      x                         : Global X position [m] (type:float)
 |      y                         : Global Y position [m] (type:float)
 |      z                         : Global Z position [m] (type:float)
 |      roll                      : Roll angle [rad] (type:float)
 |      pitch                     : Pitch angle [rad] (type:float)
 |      yaw                       : Yaw angle [rad] (type:float)
 |      covariance                : Row-major representation of 6x6 pose cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |  
 |  vision_position_delta_encode(self, time_usec, time_delta_usec, angle_delta, position_delta, confidence)
 |      Camera vision based attitude and position deltas.
 |      
 |      time_usec                 : Timestamp (synced to UNIX time or since system boot). [us] (type:uint64_t)
 |      time_delta_usec           : Time since the last reported camera frame. [us] (type:uint64_t)
 |      angle_delta               : Defines a rotation vector in body frame that rotates the vehicle from the previous to the current orientation. (type:float)
 |      position_delta            : Change in position from previous to current frame rotated into body frame (0=forward, 1=right, 2=down). [m] (type:float)
 |      confidence                : Normalised confidence value from 0 to 100. [%] (type:float)
 |  
 |  vision_position_delta_send(self, time_usec, time_delta_usec, angle_delta, position_delta, confidence, force_mavlink1=False)
 |      Camera vision based attitude and position deltas.
 |      
 |      time_usec                 : Timestamp (synced to UNIX time or since system boot). [us] (type:uint64_t)
 |      time_delta_usec           : Time since the last reported camera frame. [us] (type:uint64_t)
 |      angle_delta               : Defines a rotation vector in body frame that rotates the vehicle from the previous to the current orientation. (type:float)
 |      position_delta            : Change in position from previous to current frame rotated into body frame (0=forward, 1=right, 2=down). [m] (type:float)
 |      confidence                : Normalised confidence value from 0 to 100. [%] (type:float)
 |  
 |  vision_position_estimate_encode(self, usec, x, y, z, roll, pitch, yaw, covariance=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], reset_counter=0)
 |      Local position/attitude estimate from a vision source.
 |      
 |      usec                      : Timestamp (UNIX time or time since system boot) [us] (type:uint64_t)
 |      x                         : Local X position [m] (type:float)
 |      y                         : Local Y position [m] (type:float)
 |      z                         : Local Z position [m] (type:float)
 |      roll                      : Roll angle [rad] (type:float)
 |      pitch                     : Pitch angle [rad] (type:float)
 |      yaw                       : Yaw angle [rad] (type:float)
 |      covariance                : Row-major representation of pose 6x6 cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |      reset_counter             : Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps. (type:uint8_t)
 |  
 |  vision_position_estimate_send(self, usec, x, y, z, roll, pitch, yaw, covariance=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], reset_counter=0, force_mavlink1=False)
 |      Local position/attitude estimate from a vision source.
 |      
 |      usec                      : Timestamp (UNIX time or time since system boot) [us] (type:uint64_t)
 |      x                         : Local X position [m] (type:float)
 |      y                         : Local Y position [m] (type:float)
 |      z                         : Local Z position [m] (type:float)
 |      roll                      : Roll angle [rad] (type:float)
 |      pitch                     : Pitch angle [rad] (type:float)
 |      yaw                       : Yaw angle [rad] (type:float)
 |      covariance                : Row-major representation of pose 6x6 cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |      reset_counter             : Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps. (type:uint8_t)
 |  
 |  vision_speed_estimate_encode(self, usec, x, y, z, covariance=[0, 0, 0, 0, 0, 0, 0, 0, 0], reset_counter=0)
 |      Speed estimate from a vision source.
 |      
 |      usec                      : Timestamp (UNIX time or time since system boot) [us] (type:uint64_t)
 |      x                         : Global X speed [m/s] (type:float)
 |      y                         : Global Y speed [m/s] (type:float)
 |      z                         : Global Z speed [m/s] (type:float)
 |      covariance                : Row-major representation of 3x3 linear velocity covariance matrix (states: vx, vy, vz; 1st three entries - 1st row, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |      reset_counter             : Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps. (type:uint8_t)
 |  
 |  vision_speed_estimate_send(self, usec, x, y, z, covariance=[0, 0, 0, 0, 0, 0, 0, 0, 0], reset_counter=0, force_mavlink1=False)
 |      Speed estimate from a vision source.
 |      
 |      usec                      : Timestamp (UNIX time or time since system boot) [us] (type:uint64_t)
 |      x                         : Global X speed [m/s] (type:float)
 |      y                         : Global Y speed [m/s] (type:float)
 |      z                         : Global Z speed [m/s] (type:float)
 |      covariance                : Row-major representation of 3x3 linear velocity covariance matrix (states: vx, vy, vz; 1st three entries - 1st row, etc.). If unknown, assign NaN value to first element in the array. (type:float)
 |      reset_counter             : Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps. (type:uint8_t)
 |  
 |  wheel_distance_encode(self, time_usec, count, distance)
 |      Cumulative distance traveled for each reported wheel.
 |      
 |      time_usec                 : Timestamp (synced to UNIX time or since system boot). [us] (type:uint64_t)
 |      count                     : Number of wheels reported. (type:uint8_t)
 |      distance                  : Distance reported by individual wheel encoders. Forward rotations increase values, reverse rotations decrease them. Not all wheels will necessarily have wheel encoders; the mapping of encoders to wheel positions must be agreed/understood by the endpoints. [m] (type:double)
 |  
 |  wheel_distance_send(self, time_usec, count, distance, force_mavlink1=False)
 |      Cumulative distance traveled for each reported wheel.
 |      
 |      time_usec                 : Timestamp (synced to UNIX time or since system boot). [us] (type:uint64_t)
 |      count                     : Number of wheels reported. (type:uint8_t)
 |      distance                  : Distance reported by individual wheel encoders. Forward rotations increase values, reverse rotations decrease them. Not all wheels will necessarily have wheel encoders; the mapping of encoders to wheel positions must be agreed/understood by the endpoints. [m] (type:double)
 |  
 |  wifi_config_ap_encode(self, ssid, password)
 |      Configure AP SSID and Password.
 |      
 |      ssid                      : Name of Wi-Fi network (SSID). Leave it blank to leave it unchanged. (type:char)
 |      password                  : Password. Leave it blank for an open AP. (type:char)
 |  
 |  wifi_config_ap_send(self, ssid, password, force_mavlink1=False)
 |      Configure AP SSID and Password.
 |      
 |      ssid                      : Name of Wi-Fi network (SSID). Leave it blank to leave it unchanged. (type:char)
 |      password                  : Password. Leave it blank for an open AP. (type:char)
 |  
 |  wind_cov_encode(self, time_usec, wind_x, wind_y, wind_z, var_horiz, var_vert, wind_alt, horiz_accuracy, vert_accuracy)
 |      Wind covariance estimate from vehicle.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      wind_x                    : Wind in X (NED) direction [m/s] (type:float)
 |      wind_y                    : Wind in Y (NED) direction [m/s] (type:float)
 |      wind_z                    : Wind in Z (NED) direction [m/s] (type:float)
 |      var_horiz                 : Variability of the wind in XY. RMS of a 1 Hz lowpassed wind estimate. [m/s] (type:float)
 |      var_vert                  : Variability of the wind in Z. RMS of a 1 Hz lowpassed wind estimate. [m/s] (type:float)
 |      wind_alt                  : Altitude (MSL) that this measurement was taken at [m] (type:float)
 |      horiz_accuracy            : Horizontal speed 1-STD accuracy [m] (type:float)
 |      vert_accuracy             : Vertical speed 1-STD accuracy [m] (type:float)
 |  
 |  wind_cov_send(self, time_usec, wind_x, wind_y, wind_z, var_horiz, var_vert, wind_alt, horiz_accuracy, vert_accuracy, force_mavlink1=False)
 |      Wind covariance estimate from vehicle.
 |      
 |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
 |      wind_x                    : Wind in X (NED) direction [m/s] (type:float)
 |      wind_y                    : Wind in Y (NED) direction [m/s] (type:float)
 |      wind_z                    : Wind in Z (NED) direction [m/s] (type:float)
 |      var_horiz                 : Variability of the wind in XY. RMS of a 1 Hz lowpassed wind estimate. [m/s] (type:float)
 |      var_vert                  : Variability of the wind in Z. RMS of a 1 Hz lowpassed wind estimate. [m/s] (type:float)
 |      wind_alt                  : Altitude (MSL) that this measurement was taken at [m] (type:float)
 |      horiz_accuracy            : Horizontal speed 1-STD accuracy [m] (type:float)
 |      vert_accuracy             : Vertical speed 1-STD accuracy [m] (type:float)
 |  
 |  wind_encode(self, direction, speed, speed_z)
 |      Wind estimation.
 |      
 |      direction                 : Wind direction (that wind is coming from). [deg] (type:float)
 |      speed                     : Wind speed in ground plane. [m/s] (type:float)
 |      speed_z                   : Vertical wind speed. [m/s] (type:float)
 |  
 |  wind_send(self, direction, speed, speed_z, force_mavlink1=False)
 |      Wind estimation.
 |      
 |      direction                 : Wind direction (that wind is coming from). [deg] (type:float)
 |      speed                     : Wind speed in ground plane. [m/s] (type:float)
 |      speed_z                   : Vertical wind speed. [m/s] (type:float)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)

