Help on module pymavlink.dialects.v10.ardupilotmega in pymavlink.dialects.v10:

NAME
    pymavlink.dialects.v10.ardupilotmega - MAVLink protocol implementation (auto-generated by mavgen.py)

DESCRIPTION
    Generated from: ardupilotmega.xml,common.xml,uAvionix.xml,icarous.xml
    
    Note: this file has been auto-generated. DO NOT EDIT

CLASSES
    builtins.Exception(builtins.BaseException)
        MAVError
    builtins.object
        EnumEntry
        MAVLink
        MAVLinkSigning
        MAVLink_header
        MAVLink_message
            MAVLink_actuator_control_target_message
            MAVLink_adsb_vehicle_message
            MAVLink_ahrs2_message
            MAVLink_ahrs3_message
            MAVLink_ahrs_message
            MAVLink_airspeed_autocal_message
            MAVLink_altitude_message
            MAVLink_ap_adc_message
            MAVLink_att_pos_mocap_message
            MAVLink_attitude_message
            MAVLink_attitude_quaternion_cov_message
            MAVLink_attitude_quaternion_message
            MAVLink_attitude_target_message
            MAVLink_auth_key_message
            MAVLink_autopilot_version_message
            MAVLink_autopilot_version_request_message
            MAVLink_bad_data
            MAVLink_battery2_message
            MAVLink_battery_status_message
            MAVLink_camera_feedback_message
            MAVLink_camera_status_message
            MAVLink_camera_trigger_message
            MAVLink_change_operator_control_ack_message
            MAVLink_change_operator_control_message
            MAVLink_collision_message
            MAVLink_command_ack_message
            MAVLink_command_int_message
            MAVLink_command_long_message
            MAVLink_compassmot_status_message
            MAVLink_control_system_state_message
            MAVLink_data16_message
            MAVLink_data32_message
            MAVLink_data64_message
            MAVLink_data96_message
            MAVLink_data_stream_message
            MAVLink_data_transmission_handshake_message
            MAVLink_debug_message
            MAVLink_debug_vect_message
            MAVLink_deepstall_message
            MAVLink_digicam_configure_message
            MAVLink_digicam_control_message
            MAVLink_distance_sensor_message
            MAVLink_efi_status_message
            MAVLink_ekf_status_report_message
            MAVLink_encapsulated_data_message
            MAVLink_estimator_status_message
            MAVLink_extended_sys_state_message
            MAVLink_fence_fetch_point_message
            MAVLink_fence_point_message
            MAVLink_fence_status_message
            MAVLink_file_transfer_protocol_message
            MAVLink_follow_target_message
            MAVLink_gimbal_control_message
            MAVLink_gimbal_report_message
            MAVLink_gimbal_torque_cmd_report_message
            MAVLink_global_position_int_cov_message
            MAVLink_global_position_int_message
            MAVLink_global_vision_position_estimate_message
            MAVLink_gopro_get_request_message
            MAVLink_gopro_get_response_message
            MAVLink_gopro_heartbeat_message
            MAVLink_gopro_set_request_message
            MAVLink_gopro_set_response_message
            MAVLink_gps2_raw_message
            MAVLink_gps2_rtk_message
            MAVLink_gps_global_origin_message
            MAVLink_gps_inject_data_message
            MAVLink_gps_input_message
            MAVLink_gps_raw_int_message
            MAVLink_gps_rtcm_data_message
            MAVLink_gps_rtk_message
            MAVLink_gps_status_message
            MAVLink_heartbeat_message
            MAVLink_high_latency_message
            MAVLink_highres_imu_message
            MAVLink_hil_actuator_controls_message
            MAVLink_hil_controls_message
            MAVLink_hil_gps_message
            MAVLink_hil_optical_flow_message
            MAVLink_hil_rc_inputs_raw_message
            MAVLink_hil_sensor_message
            MAVLink_hil_state_message
            MAVLink_hil_state_quaternion_message
            MAVLink_home_position_message
            MAVLink_hwstatus_message
            MAVLink_landing_target_message
            MAVLink_led_control_message
            MAVLink_limits_status_message
            MAVLink_local_position_ned_cov_message
            MAVLink_local_position_ned_message
            MAVLink_local_position_ned_system_global_offset_message
            MAVLink_log_data_message
            MAVLink_log_entry_message
            MAVLink_log_erase_message
            MAVLink_log_request_data_message
            MAVLink_log_request_end_message
            MAVLink_log_request_list_message
            MAVLink_mag_cal_progress_message
            MAVLink_mag_cal_report_message
            MAVLink_manual_control_message
            MAVLink_manual_setpoint_message
            MAVLink_meminfo_message
            MAVLink_memory_vect_message
            MAVLink_message_interval_message
            MAVLink_mission_ack_message
            MAVLink_mission_clear_all_message
            MAVLink_mission_count_message
            MAVLink_mission_current_message
            MAVLink_mission_item_int_message
            MAVLink_mission_item_message
            MAVLink_mission_item_reached_message
            MAVLink_mission_request_int_message
            MAVLink_mission_request_list_message
            MAVLink_mission_request_message
            MAVLink_mission_request_partial_list_message
            MAVLink_mission_set_current_message
            MAVLink_mission_write_partial_list_message
            MAVLink_mount_configure_message
            MAVLink_mount_control_message
            MAVLink_mount_status_message
            MAVLink_named_value_float_message
            MAVLink_named_value_int_message
            MAVLink_nav_controller_output_message
            MAVLink_optical_flow_message
            MAVLink_optical_flow_rad_message
            MAVLink_param_map_rc_message
            MAVLink_param_request_list_message
            MAVLink_param_request_read_message
            MAVLink_param_set_message
            MAVLink_param_value_message
            MAVLink_pid_tuning_message
            MAVLink_ping_message
            MAVLink_position_target_global_int_message
            MAVLink_position_target_local_ned_message
            MAVLink_power_status_message
            MAVLink_radio_message
            MAVLink_radio_status_message
            MAVLink_rally_fetch_point_message
            MAVLink_rally_point_message
            MAVLink_rangefinder_message
            MAVLink_raw_imu_message
            MAVLink_raw_pressure_message
            MAVLink_rc_channels_message
            MAVLink_rc_channels_override_message
            MAVLink_rc_channels_raw_message
            MAVLink_rc_channels_scaled_message
            MAVLink_remote_log_block_status_message
            MAVLink_remote_log_data_block_message
            MAVLink_request_data_stream_message
            MAVLink_resource_request_message
            MAVLink_rpm_message
            MAVLink_safety_allowed_area_message
            MAVLink_safety_set_allowed_area_message
            MAVLink_scaled_imu2_message
            MAVLink_scaled_imu3_message
            MAVLink_scaled_imu_message
            MAVLink_scaled_pressure2_message
            MAVLink_scaled_pressure3_message
            MAVLink_scaled_pressure_message
            MAVLink_sensor_offsets_message
            MAVLink_serial_control_message
            MAVLink_servo_output_raw_message
            MAVLink_set_actuator_control_target_message
            MAVLink_set_attitude_target_message
            MAVLink_set_gps_global_origin_message
            MAVLink_set_home_position_message
            MAVLink_set_mag_offsets_message
            MAVLink_set_mode_message
            MAVLink_set_position_target_global_int_message
            MAVLink_set_position_target_local_ned_message
            MAVLink_sim_state_message
            MAVLink_simstate_message
            MAVLink_statustext_message
            MAVLink_sys_status_message
            MAVLink_system_time_message
            MAVLink_terrain_check_message
            MAVLink_terrain_data_message
            MAVLink_terrain_report_message
            MAVLink_terrain_request_message
            MAVLink_timesync_message
            MAVLink_v2_extension_message
            MAVLink_vfr_hud_message
            MAVLink_vibration_message
            MAVLink_vicon_position_estimate_message
            MAVLink_vision_position_estimate_message
            MAVLink_vision_speed_estimate_message
            MAVLink_wind_cov_message
            MAVLink_wind_message
    builtins.str(builtins.object)
        MAVString
    
    class EnumEntry(builtins.object)
     |  Methods defined here:
     |  
     |  __init__(self, name, description)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class MAVError(builtins.Exception)
     |  MAVLink error class
     |  
     |  Method resolution order:
     |      MAVError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, msg)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      helper for pickle
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class MAVLink(builtins.object)
     |  MAVLink protocol handling class
     |  
     |  Methods defined here:
     |  
     |  __init__(self, file, srcSystem=0, srcComponent=0, use_native=False)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  actuator_control_target_encode(self, time_usec, group_mlx, controls)
     |      Set the vehicle attitude and body angular rates.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      group_mlx                 : Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances. (type:uint8_t)
     |      controls                  : Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs. (type:float)
     |  
     |  actuator_control_target_send(self, time_usec, group_mlx, controls, force_mavlink1=False)
     |      Set the vehicle attitude and body angular rates.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      group_mlx                 : Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances. (type:uint8_t)
     |      controls                  : Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs. (type:float)
     |  
     |  adsb_vehicle_encode(self, ICAO_address, lat, lon, altitude_type, altitude, heading, hor_velocity, ver_velocity, callsign, emitter_type, tslc, flags, squawk)
     |      The location and information of an ADSB vehicle
     |      
     |      ICAO_address              : ICAO address (type:uint32_t)
     |      lat                       : Latitude [degE7] (type:int32_t)
     |      lon                       : Longitude [degE7] (type:int32_t)
     |      altitude_type             : ADSB altitude type. (type:uint8_t, values:ADSB_ALTITUDE_TYPE)
     |      altitude                  : Altitude(ASL) [mm] (type:int32_t)
     |      heading                   : Course over ground [cdeg] (type:uint16_t)
     |      hor_velocity              : The horizontal velocity [cm/s] (type:uint16_t)
     |      ver_velocity              : The vertical velocity. Positive is up [cm/s] (type:int16_t)
     |      callsign                  : The callsign, 8+null (type:char)
     |      emitter_type              : ADSB emitter type. (type:uint8_t, values:ADSB_EMITTER_TYPE)
     |      tslc                      : Time since last communication in seconds [s] (type:uint8_t)
     |      flags                     : Bitmap to indicate various statuses including valid data fields (type:uint16_t, values:ADSB_FLAGS)
     |      squawk                    : Squawk code (type:uint16_t)
     |  
     |  adsb_vehicle_send(self, ICAO_address, lat, lon, altitude_type, altitude, heading, hor_velocity, ver_velocity, callsign, emitter_type, tslc, flags, squawk, force_mavlink1=False)
     |      The location and information of an ADSB vehicle
     |      
     |      ICAO_address              : ICAO address (type:uint32_t)
     |      lat                       : Latitude [degE7] (type:int32_t)
     |      lon                       : Longitude [degE7] (type:int32_t)
     |      altitude_type             : ADSB altitude type. (type:uint8_t, values:ADSB_ALTITUDE_TYPE)
     |      altitude                  : Altitude(ASL) [mm] (type:int32_t)
     |      heading                   : Course over ground [cdeg] (type:uint16_t)
     |      hor_velocity              : The horizontal velocity [cm/s] (type:uint16_t)
     |      ver_velocity              : The vertical velocity. Positive is up [cm/s] (type:int16_t)
     |      callsign                  : The callsign, 8+null (type:char)
     |      emitter_type              : ADSB emitter type. (type:uint8_t, values:ADSB_EMITTER_TYPE)
     |      tslc                      : Time since last communication in seconds [s] (type:uint8_t)
     |      flags                     : Bitmap to indicate various statuses including valid data fields (type:uint16_t, values:ADSB_FLAGS)
     |      squawk                    : Squawk code (type:uint16_t)
     |  
     |  ahrs2_encode(self, roll, pitch, yaw, altitude, lat, lng)
     |      Status of secondary AHRS filter if available.
     |      
     |      roll                      : Roll angle. [rad] (type:float)
     |      pitch                     : Pitch angle. [rad] (type:float)
     |      yaw                       : Yaw angle. [rad] (type:float)
     |      altitude                  : Altitude (MSL). [m] (type:float)
     |      lat                       : Latitude. [degE7] (type:int32_t)
     |      lng                       : Longitude. [degE7] (type:int32_t)
     |  
     |  ahrs2_send(self, roll, pitch, yaw, altitude, lat, lng, force_mavlink1=False)
     |      Status of secondary AHRS filter if available.
     |      
     |      roll                      : Roll angle. [rad] (type:float)
     |      pitch                     : Pitch angle. [rad] (type:float)
     |      yaw                       : Yaw angle. [rad] (type:float)
     |      altitude                  : Altitude (MSL). [m] (type:float)
     |      lat                       : Latitude. [degE7] (type:int32_t)
     |      lng                       : Longitude. [degE7] (type:int32_t)
     |  
     |  ahrs3_encode(self, roll, pitch, yaw, altitude, lat, lng, v1, v2, v3, v4)
     |      Status of third AHRS filter if available. This is for ANU research
     |      group (Ali and Sean).
     |      
     |      roll                      : Roll angle. [rad] (type:float)
     |      pitch                     : Pitch angle. [rad] (type:float)
     |      yaw                       : Yaw angle. [rad] (type:float)
     |      altitude                  : Altitude (MSL). [m] (type:float)
     |      lat                       : Latitude. [degE7] (type:int32_t)
     |      lng                       : Longitude. [degE7] (type:int32_t)
     |      v1                        : Test variable1. (type:float)
     |      v2                        : Test variable2. (type:float)
     |      v3                        : Test variable3. (type:float)
     |      v4                        : Test variable4. (type:float)
     |  
     |  ahrs3_send(self, roll, pitch, yaw, altitude, lat, lng, v1, v2, v3, v4, force_mavlink1=False)
     |      Status of third AHRS filter if available. This is for ANU research
     |      group (Ali and Sean).
     |      
     |      roll                      : Roll angle. [rad] (type:float)
     |      pitch                     : Pitch angle. [rad] (type:float)
     |      yaw                       : Yaw angle. [rad] (type:float)
     |      altitude                  : Altitude (MSL). [m] (type:float)
     |      lat                       : Latitude. [degE7] (type:int32_t)
     |      lng                       : Longitude. [degE7] (type:int32_t)
     |      v1                        : Test variable1. (type:float)
     |      v2                        : Test variable2. (type:float)
     |      v3                        : Test variable3. (type:float)
     |      v4                        : Test variable4. (type:float)
     |  
     |  ahrs_encode(self, omegaIx, omegaIy, omegaIz, accel_weight, renorm_val, error_rp, error_yaw)
     |      Status of DCM attitude estimator.
     |      
     |      omegaIx                   : X gyro drift estimate. [rad/s] (type:float)
     |      omegaIy                   : Y gyro drift estimate. [rad/s] (type:float)
     |      omegaIz                   : Z gyro drift estimate. [rad/s] (type:float)
     |      accel_weight              : Average accel_weight. (type:float)
     |      renorm_val                : Average renormalisation value. (type:float)
     |      error_rp                  : Average error_roll_pitch value. (type:float)
     |      error_yaw                 : Average error_yaw value. (type:float)
     |  
     |  ahrs_send(self, omegaIx, omegaIy, omegaIz, accel_weight, renorm_val, error_rp, error_yaw, force_mavlink1=False)
     |      Status of DCM attitude estimator.
     |      
     |      omegaIx                   : X gyro drift estimate. [rad/s] (type:float)
     |      omegaIy                   : Y gyro drift estimate. [rad/s] (type:float)
     |      omegaIz                   : Z gyro drift estimate. [rad/s] (type:float)
     |      accel_weight              : Average accel_weight. (type:float)
     |      renorm_val                : Average renormalisation value. (type:float)
     |      error_rp                  : Average error_roll_pitch value. (type:float)
     |      error_yaw                 : Average error_yaw value. (type:float)
     |  
     |  airspeed_autocal_encode(self, vx, vy, vz, diff_pressure, EAS2TAS, ratio, state_x, state_y, state_z, Pax, Pby, Pcz)
     |      Airspeed auto-calibration.
     |      
     |      vx                        : GPS velocity north. [m/s] (type:float)
     |      vy                        : GPS velocity east. [m/s] (type:float)
     |      vz                        : GPS velocity down. [m/s] (type:float)
     |      diff_pressure             : Differential pressure. [Pa] (type:float)
     |      EAS2TAS                   : Estimated to true airspeed ratio. (type:float)
     |      ratio                     : Airspeed ratio. (type:float)
     |      state_x                   : EKF state x. (type:float)
     |      state_y                   : EKF state y. (type:float)
     |      state_z                   : EKF state z. (type:float)
     |      Pax                       : EKF Pax. (type:float)
     |      Pby                       : EKF Pby. (type:float)
     |      Pcz                       : EKF Pcz. (type:float)
     |  
     |  airspeed_autocal_send(self, vx, vy, vz, diff_pressure, EAS2TAS, ratio, state_x, state_y, state_z, Pax, Pby, Pcz, force_mavlink1=False)
     |      Airspeed auto-calibration.
     |      
     |      vx                        : GPS velocity north. [m/s] (type:float)
     |      vy                        : GPS velocity east. [m/s] (type:float)
     |      vz                        : GPS velocity down. [m/s] (type:float)
     |      diff_pressure             : Differential pressure. [Pa] (type:float)
     |      EAS2TAS                   : Estimated to true airspeed ratio. (type:float)
     |      ratio                     : Airspeed ratio. (type:float)
     |      state_x                   : EKF state x. (type:float)
     |      state_y                   : EKF state y. (type:float)
     |      state_z                   : EKF state z. (type:float)
     |      Pax                       : EKF Pax. (type:float)
     |      Pby                       : EKF Pby. (type:float)
     |      Pcz                       : EKF Pcz. (type:float)
     |  
     |  altitude_encode(self, time_usec, altitude_monotonic, altitude_amsl, altitude_local, altitude_relative, altitude_terrain, bottom_clearance)
     |      The current system altitude.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      altitude_monotonic        : This altitude measure is initialized on system boot and monotonic (it is never reset, but represents the local altitude change). The only guarantee on this field is that it will never be reset and is consistent within a flight. The recommended value for this field is the uncorrected barometric altitude at boot time. This altitude will also drift and vary between flights. [m] (type:float)
     |      altitude_amsl             : This altitude measure is strictly above mean sea level and might be non-monotonic (it might reset on events like GPS lock or when a new QNH value is set). It should be the altitude to which global altitude waypoints are compared to. Note that it is *not* the GPS altitude, however, most GPS modules already output MSL by default and not the WGS84 altitude. [m] (type:float)
     |      altitude_local            : This is the local altitude in the local coordinate frame. It is not the altitude above home, but in reference to the coordinate origin (0, 0, 0). It is up-positive. [m] (type:float)
     |      altitude_relative         : This is the altitude above the home position. It resets on each change of the current home position. [m] (type:float)
     |      altitude_terrain          : This is the altitude above terrain. It might be fed by a terrain database or an altimeter. Values smaller than -1000 should be interpreted as unknown. [m] (type:float)
     |      bottom_clearance          : This is not the altitude, but the clear space below the system according to the fused clearance estimate. It generally should max out at the maximum range of e.g. the laser altimeter. It is generally a moving target. A negative value indicates no measurement available. [m] (type:float)
     |  
     |  altitude_send(self, time_usec, altitude_monotonic, altitude_amsl, altitude_local, altitude_relative, altitude_terrain, bottom_clearance, force_mavlink1=False)
     |      The current system altitude.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      altitude_monotonic        : This altitude measure is initialized on system boot and monotonic (it is never reset, but represents the local altitude change). The only guarantee on this field is that it will never be reset and is consistent within a flight. The recommended value for this field is the uncorrected barometric altitude at boot time. This altitude will also drift and vary between flights. [m] (type:float)
     |      altitude_amsl             : This altitude measure is strictly above mean sea level and might be non-monotonic (it might reset on events like GPS lock or when a new QNH value is set). It should be the altitude to which global altitude waypoints are compared to. Note that it is *not* the GPS altitude, however, most GPS modules already output MSL by default and not the WGS84 altitude. [m] (type:float)
     |      altitude_local            : This is the local altitude in the local coordinate frame. It is not the altitude above home, but in reference to the coordinate origin (0, 0, 0). It is up-positive. [m] (type:float)
     |      altitude_relative         : This is the altitude above the home position. It resets on each change of the current home position. [m] (type:float)
     |      altitude_terrain          : This is the altitude above terrain. It might be fed by a terrain database or an altimeter. Values smaller than -1000 should be interpreted as unknown. [m] (type:float)
     |      bottom_clearance          : This is not the altitude, but the clear space below the system according to the fused clearance estimate. It generally should max out at the maximum range of e.g. the laser altimeter. It is generally a moving target. A negative value indicates no measurement available. [m] (type:float)
     |  
     |  ap_adc_encode(self, adc1, adc2, adc3, adc4, adc5, adc6)
     |      Raw ADC output.
     |      
     |      adc1                      : ADC output 1. (type:uint16_t)
     |      adc2                      : ADC output 2. (type:uint16_t)
     |      adc3                      : ADC output 3. (type:uint16_t)
     |      adc4                      : ADC output 4. (type:uint16_t)
     |      adc5                      : ADC output 5. (type:uint16_t)
     |      adc6                      : ADC output 6. (type:uint16_t)
     |  
     |  ap_adc_send(self, adc1, adc2, adc3, adc4, adc5, adc6, force_mavlink1=False)
     |      Raw ADC output.
     |      
     |      adc1                      : ADC output 1. (type:uint16_t)
     |      adc2                      : ADC output 2. (type:uint16_t)
     |      adc3                      : ADC output 3. (type:uint16_t)
     |      adc4                      : ADC output 4. (type:uint16_t)
     |      adc5                      : ADC output 5. (type:uint16_t)
     |      adc6                      : ADC output 6. (type:uint16_t)
     |  
     |  att_pos_mocap_encode(self, time_usec, q, x, y, z)
     |      Motion capture attitude and position
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (type:float)
     |      x                         : X position (NED) [m] (type:float)
     |      y                         : Y position (NED) [m] (type:float)
     |      z                         : Z position (NED) [m] (type:float)
     |  
     |  att_pos_mocap_send(self, time_usec, q, x, y, z, force_mavlink1=False)
     |      Motion capture attitude and position
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (type:float)
     |      x                         : X position (NED) [m] (type:float)
     |      y                         : Y position (NED) [m] (type:float)
     |      z                         : Z position (NED) [m] (type:float)
     |  
     |  attitude_encode(self, time_boot_ms, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed)
     |      The attitude in the aeronautical frame (right-handed, Z-down, X-front,
     |      Y-right).
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      roll                      : Roll angle (-pi..+pi) [rad] (type:float)
     |      pitch                     : Pitch angle (-pi..+pi) [rad] (type:float)
     |      yaw                       : Yaw angle (-pi..+pi) [rad] (type:float)
     |      rollspeed                 : Roll angular speed [rad/s] (type:float)
     |      pitchspeed                : Pitch angular speed [rad/s] (type:float)
     |      yawspeed                  : Yaw angular speed [rad/s] (type:float)
     |  
     |  attitude_quaternion_cov_encode(self, time_usec, q, rollspeed, pitchspeed, yawspeed, covariance)
     |      The attitude in the aeronautical frame (right-handed, Z-down, X-front,
     |      Y-right), expressed as quaternion. Quaternion order is
     |      w, x, y, z and a zero rotation would be expressed as
     |      (1 0 0 0).
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      q                         : Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation) (type:float)
     |      rollspeed                 : Roll angular speed [rad/s] (type:float)
     |      pitchspeed                : Pitch angular speed [rad/s] (type:float)
     |      yawspeed                  : Yaw angular speed [rad/s] (type:float)
     |      covariance                : Row-major representation of a 3x3 attitude covariance matrix (states: roll, pitch, yaw; first three entries are the first ROW, next three entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (type:float)
     |  
     |  attitude_quaternion_cov_send(self, time_usec, q, rollspeed, pitchspeed, yawspeed, covariance, force_mavlink1=False)
     |      The attitude in the aeronautical frame (right-handed, Z-down, X-front,
     |      Y-right), expressed as quaternion. Quaternion order is
     |      w, x, y, z and a zero rotation would be expressed as
     |      (1 0 0 0).
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      q                         : Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation) (type:float)
     |      rollspeed                 : Roll angular speed [rad/s] (type:float)
     |      pitchspeed                : Pitch angular speed [rad/s] (type:float)
     |      yawspeed                  : Yaw angular speed [rad/s] (type:float)
     |      covariance                : Row-major representation of a 3x3 attitude covariance matrix (states: roll, pitch, yaw; first three entries are the first ROW, next three entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (type:float)
     |  
     |  attitude_quaternion_encode(self, time_boot_ms, q1, q2, q3, q4, rollspeed, pitchspeed, yawspeed)
     |      The attitude in the aeronautical frame (right-handed, Z-down, X-front,
     |      Y-right), expressed as quaternion. Quaternion order is
     |      w, x, y, z and a zero rotation would be expressed as
     |      (1 0 0 0).
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      q1                        : Quaternion component 1, w (1 in null-rotation) (type:float)
     |      q2                        : Quaternion component 2, x (0 in null-rotation) (type:float)
     |      q3                        : Quaternion component 3, y (0 in null-rotation) (type:float)
     |      q4                        : Quaternion component 4, z (0 in null-rotation) (type:float)
     |      rollspeed                 : Roll angular speed [rad/s] (type:float)
     |      pitchspeed                : Pitch angular speed [rad/s] (type:float)
     |      yawspeed                  : Yaw angular speed [rad/s] (type:float)
     |  
     |  attitude_quaternion_send(self, time_boot_ms, q1, q2, q3, q4, rollspeed, pitchspeed, yawspeed, force_mavlink1=False)
     |      The attitude in the aeronautical frame (right-handed, Z-down, X-front,
     |      Y-right), expressed as quaternion. Quaternion order is
     |      w, x, y, z and a zero rotation would be expressed as
     |      (1 0 0 0).
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      q1                        : Quaternion component 1, w (1 in null-rotation) (type:float)
     |      q2                        : Quaternion component 2, x (0 in null-rotation) (type:float)
     |      q3                        : Quaternion component 3, y (0 in null-rotation) (type:float)
     |      q4                        : Quaternion component 4, z (0 in null-rotation) (type:float)
     |      rollspeed                 : Roll angular speed [rad/s] (type:float)
     |      pitchspeed                : Pitch angular speed [rad/s] (type:float)
     |      yawspeed                  : Yaw angular speed [rad/s] (type:float)
     |  
     |  attitude_send(self, time_boot_ms, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed, force_mavlink1=False)
     |      The attitude in the aeronautical frame (right-handed, Z-down, X-front,
     |      Y-right).
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      roll                      : Roll angle (-pi..+pi) [rad] (type:float)
     |      pitch                     : Pitch angle (-pi..+pi) [rad] (type:float)
     |      yaw                       : Yaw angle (-pi..+pi) [rad] (type:float)
     |      rollspeed                 : Roll angular speed [rad/s] (type:float)
     |      pitchspeed                : Pitch angular speed [rad/s] (type:float)
     |      yawspeed                  : Yaw angular speed [rad/s] (type:float)
     |  
     |  attitude_target_encode(self, time_boot_ms, type_mask, q, body_roll_rate, body_pitch_rate, body_yaw_rate, thrust)
     |      Reports the current commanded attitude of the vehicle as specified by
     |      the autopilot. This should match the commands sent in
     |      a SET_ATTITUDE_TARGET message if the vehicle is being
     |      controlled this way.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      type_mask                 : Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 7: reserved, bit 8: attitude (type:uint8_t)
     |      q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (type:float)
     |      body_roll_rate            : Body roll rate [rad/s] (type:float)
     |      body_pitch_rate           : Body pitch rate [rad/s] (type:float)
     |      body_yaw_rate             : Body yaw rate [rad/s] (type:float)
     |      thrust                    : Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust) (type:float)
     |  
     |  attitude_target_send(self, time_boot_ms, type_mask, q, body_roll_rate, body_pitch_rate, body_yaw_rate, thrust, force_mavlink1=False)
     |      Reports the current commanded attitude of the vehicle as specified by
     |      the autopilot. This should match the commands sent in
     |      a SET_ATTITUDE_TARGET message if the vehicle is being
     |      controlled this way.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      type_mask                 : Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 7: reserved, bit 8: attitude (type:uint8_t)
     |      q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (type:float)
     |      body_roll_rate            : Body roll rate [rad/s] (type:float)
     |      body_pitch_rate           : Body pitch rate [rad/s] (type:float)
     |      body_yaw_rate             : Body yaw rate [rad/s] (type:float)
     |      thrust                    : Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust) (type:float)
     |  
     |  auth_key_encode(self, key)
     |      Emit an encrypted signature / key identifying this system. PLEASE
     |      NOTE: This protocol has been kept simple, so
     |      transmitting the key requires an encrypted channel for
     |      true safety.
     |      
     |      key                       : key (type:char)
     |  
     |  auth_key_send(self, key, force_mavlink1=False)
     |      Emit an encrypted signature / key identifying this system. PLEASE
     |      NOTE: This protocol has been kept simple, so
     |      transmitting the key requires an encrypted channel for
     |      true safety.
     |      
     |      key                       : key (type:char)
     |  
     |  autopilot_version_encode(self, capabilities, flight_sw_version, middleware_sw_version, os_sw_version, board_version, flight_custom_version, middleware_custom_version, os_custom_version, vendor_id, product_id, uid)
     |      Version and capability of autopilot software. This should be emitted
     |      in response to a
     |      MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES command.
     |      
     |      capabilities              : Bitmap of capabilities (type:uint64_t, values:MAV_PROTOCOL_CAPABILITY)
     |      flight_sw_version         : Firmware version number (type:uint32_t)
     |      middleware_sw_version        : Middleware version number (type:uint32_t)
     |      os_sw_version             : Operating system version number (type:uint32_t)
     |      board_version             : HW / board version (last 8 bytes should be silicon ID, if any) (type:uint32_t)
     |      flight_custom_version        : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (type:uint8_t)
     |      middleware_custom_version        : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (type:uint8_t)
     |      os_custom_version         : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (type:uint8_t)
     |      vendor_id                 : ID of the board vendor (type:uint16_t)
     |      product_id                : ID of the product (type:uint16_t)
     |      uid                       : UID if provided by hardware (see uid2) (type:uint64_t)
     |  
     |  autopilot_version_request_encode(self, target_system, target_component)
     |      Request the autopilot version from the system/component.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |  
     |  autopilot_version_request_send(self, target_system, target_component, force_mavlink1=False)
     |      Request the autopilot version from the system/component.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |  
     |  autopilot_version_send(self, capabilities, flight_sw_version, middleware_sw_version, os_sw_version, board_version, flight_custom_version, middleware_custom_version, os_custom_version, vendor_id, product_id, uid, force_mavlink1=False)
     |      Version and capability of autopilot software. This should be emitted
     |      in response to a
     |      MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES command.
     |      
     |      capabilities              : Bitmap of capabilities (type:uint64_t, values:MAV_PROTOCOL_CAPABILITY)
     |      flight_sw_version         : Firmware version number (type:uint32_t)
     |      middleware_sw_version        : Middleware version number (type:uint32_t)
     |      os_sw_version             : Operating system version number (type:uint32_t)
     |      board_version             : HW / board version (last 8 bytes should be silicon ID, if any) (type:uint32_t)
     |      flight_custom_version        : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (type:uint8_t)
     |      middleware_custom_version        : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (type:uint8_t)
     |      os_custom_version         : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (type:uint8_t)
     |      vendor_id                 : ID of the board vendor (type:uint16_t)
     |      product_id                : ID of the product (type:uint16_t)
     |      uid                       : UID if provided by hardware (see uid2) (type:uint64_t)
     |  
     |  battery2_encode(self, voltage, current_battery)
     |      2nd Battery status
     |      
     |      voltage                   : Voltage. [mV] (type:uint16_t)
     |      current_battery           : Battery current, -1: autopilot does not measure the current. [cA] (type:int16_t)
     |  
     |  battery2_send(self, voltage, current_battery, force_mavlink1=False)
     |      2nd Battery status
     |      
     |      voltage                   : Voltage. [mV] (type:uint16_t)
     |      current_battery           : Battery current, -1: autopilot does not measure the current. [cA] (type:int16_t)
     |  
     |  battery_status_encode(self, id, battery_function, type, temperature, voltages, current_battery, current_consumed, energy_consumed, battery_remaining)
     |      Battery information
     |      
     |      id                        : Battery ID (type:uint8_t)
     |      battery_function          : Function of the battery (type:uint8_t, values:MAV_BATTERY_FUNCTION)
     |      type                      : Type (chemistry) of the battery (type:uint8_t, values:MAV_BATTERY_TYPE)
     |      temperature               : Temperature of the battery. INT16_MAX for unknown temperature. [cdegC] (type:int16_t)
     |      voltages                  : Battery voltage of cells. Cells above the valid cell count for this battery should have the UINT16_MAX value. [mV] (type:uint16_t)
     |      current_battery           : Battery current, -1: autopilot does not measure the current [cA] (type:int16_t)
     |      current_consumed          : Consumed charge, -1: autopilot does not provide consumption estimate [mAh] (type:int32_t)
     |      energy_consumed           : Consumed energy, -1: autopilot does not provide energy consumption estimate [hJ] (type:int32_t)
     |      battery_remaining         : Remaining battery energy. Values: [0-100], -1: autopilot does not estimate the remaining battery. [%] (type:int8_t)
     |  
     |  battery_status_send(self, id, battery_function, type, temperature, voltages, current_battery, current_consumed, energy_consumed, battery_remaining, force_mavlink1=False)
     |      Battery information
     |      
     |      id                        : Battery ID (type:uint8_t)
     |      battery_function          : Function of the battery (type:uint8_t, values:MAV_BATTERY_FUNCTION)
     |      type                      : Type (chemistry) of the battery (type:uint8_t, values:MAV_BATTERY_TYPE)
     |      temperature               : Temperature of the battery. INT16_MAX for unknown temperature. [cdegC] (type:int16_t)
     |      voltages                  : Battery voltage of cells. Cells above the valid cell count for this battery should have the UINT16_MAX value. [mV] (type:uint16_t)
     |      current_battery           : Battery current, -1: autopilot does not measure the current [cA] (type:int16_t)
     |      current_consumed          : Consumed charge, -1: autopilot does not provide consumption estimate [mAh] (type:int32_t)
     |      energy_consumed           : Consumed energy, -1: autopilot does not provide energy consumption estimate [hJ] (type:int32_t)
     |      battery_remaining         : Remaining battery energy. Values: [0-100], -1: autopilot does not estimate the remaining battery. [%] (type:int8_t)
     |  
     |  buf_len(self)
     |  
     |  bytes_needed(self)
     |      return number of bytes needed for next parsing stage
     |  
     |  camera_feedback_encode(self, time_usec, target_system, cam_idx, img_idx, lat, lng, alt_msl, alt_rel, roll, pitch, yaw, foc_len, flags)
     |      Camera Capture Feedback.
     |      
     |      time_usec                 : Image timestamp (since UNIX epoch), as passed in by CAMERA_STATUS message (or autopilot if no CCB). [us] (type:uint64_t)
     |      target_system             : System ID. (type:uint8_t)
     |      cam_idx                   : Camera ID. (type:uint8_t)
     |      img_idx                   : Image index. (type:uint16_t)
     |      lat                       : Latitude. [degE7] (type:int32_t)
     |      lng                       : Longitude. [degE7] (type:int32_t)
     |      alt_msl                   : Altitude (MSL). [m] (type:float)
     |      alt_rel                   : Altitude (Relative to HOME location). [m] (type:float)
     |      roll                      : Camera Roll angle (earth frame, +-180). [deg] (type:float)
     |      pitch                     : Camera Pitch angle (earth frame, +-180). [deg] (type:float)
     |      yaw                       : Camera Yaw (earth frame, 0-360, true). [deg] (type:float)
     |      foc_len                   : Focal Length. [mm] (type:float)
     |      flags                     : Feedback flags. (type:uint8_t, values:CAMERA_FEEDBACK_FLAGS)
     |  
     |  camera_feedback_send(self, time_usec, target_system, cam_idx, img_idx, lat, lng, alt_msl, alt_rel, roll, pitch, yaw, foc_len, flags, force_mavlink1=False)
     |      Camera Capture Feedback.
     |      
     |      time_usec                 : Image timestamp (since UNIX epoch), as passed in by CAMERA_STATUS message (or autopilot if no CCB). [us] (type:uint64_t)
     |      target_system             : System ID. (type:uint8_t)
     |      cam_idx                   : Camera ID. (type:uint8_t)
     |      img_idx                   : Image index. (type:uint16_t)
     |      lat                       : Latitude. [degE7] (type:int32_t)
     |      lng                       : Longitude. [degE7] (type:int32_t)
     |      alt_msl                   : Altitude (MSL). [m] (type:float)
     |      alt_rel                   : Altitude (Relative to HOME location). [m] (type:float)
     |      roll                      : Camera Roll angle (earth frame, +-180). [deg] (type:float)
     |      pitch                     : Camera Pitch angle (earth frame, +-180). [deg] (type:float)
     |      yaw                       : Camera Yaw (earth frame, 0-360, true). [deg] (type:float)
     |      foc_len                   : Focal Length. [mm] (type:float)
     |      flags                     : Feedback flags. (type:uint8_t, values:CAMERA_FEEDBACK_FLAGS)
     |  
     |  camera_status_encode(self, time_usec, target_system, cam_idx, img_idx, event_id, p1, p2, p3, p4)
     |      Camera Event.
     |      
     |      time_usec                 : Image timestamp (since UNIX epoch, according to camera clock). [us] (type:uint64_t)
     |      target_system             : System ID. (type:uint8_t)
     |      cam_idx                   : Camera ID. (type:uint8_t)
     |      img_idx                   : Image index. (type:uint16_t)
     |      event_id                  : Event type. (type:uint8_t, values:CAMERA_STATUS_TYPES)
     |      p1                        : Parameter 1 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (type:float)
     |      p2                        : Parameter 2 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (type:float)
     |      p3                        : Parameter 3 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (type:float)
     |      p4                        : Parameter 4 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (type:float)
     |  
     |  camera_status_send(self, time_usec, target_system, cam_idx, img_idx, event_id, p1, p2, p3, p4, force_mavlink1=False)
     |      Camera Event.
     |      
     |      time_usec                 : Image timestamp (since UNIX epoch, according to camera clock). [us] (type:uint64_t)
     |      target_system             : System ID. (type:uint8_t)
     |      cam_idx                   : Camera ID. (type:uint8_t)
     |      img_idx                   : Image index. (type:uint16_t)
     |      event_id                  : Event type. (type:uint8_t, values:CAMERA_STATUS_TYPES)
     |      p1                        : Parameter 1 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (type:float)
     |      p2                        : Parameter 2 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (type:float)
     |      p3                        : Parameter 3 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (type:float)
     |      p4                        : Parameter 4 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (type:float)
     |  
     |  camera_trigger_encode(self, time_usec, seq)
     |      Camera-IMU triggering and synchronisation message.
     |      
     |      time_usec                 : Timestamp for image frame (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      seq                       : Image frame sequence (type:uint32_t)
     |  
     |  camera_trigger_send(self, time_usec, seq, force_mavlink1=False)
     |      Camera-IMU triggering and synchronisation message.
     |      
     |      time_usec                 : Timestamp for image frame (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      seq                       : Image frame sequence (type:uint32_t)
     |  
     |  change_operator_control_ack_encode(self, gcs_system_id, control_request, ack)
     |      Accept / deny control of this MAV
     |      
     |      gcs_system_id             : ID of the GCS this message (type:uint8_t)
     |      control_request           : 0: request control of this MAV, 1: Release control of this MAV (type:uint8_t)
     |      ack                       : 0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control (type:uint8_t)
     |  
     |  change_operator_control_ack_send(self, gcs_system_id, control_request, ack, force_mavlink1=False)
     |      Accept / deny control of this MAV
     |      
     |      gcs_system_id             : ID of the GCS this message (type:uint8_t)
     |      control_request           : 0: request control of this MAV, 1: Release control of this MAV (type:uint8_t)
     |      ack                       : 0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control (type:uint8_t)
     |  
     |  change_operator_control_encode(self, target_system, control_request, version, passkey)
     |      Request to control this MAV
     |      
     |      target_system             : System the GCS requests control for (type:uint8_t)
     |      control_request           : 0: request control of this MAV, 1: Release control of this MAV (type:uint8_t)
     |      version                   : 0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch. [rad] (type:uint8_t)
     |      passkey                   : Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-" (type:char)
     |  
     |  change_operator_control_send(self, target_system, control_request, version, passkey, force_mavlink1=False)
     |      Request to control this MAV
     |      
     |      target_system             : System the GCS requests control for (type:uint8_t)
     |      control_request           : 0: request control of this MAV, 1: Release control of this MAV (type:uint8_t)
     |      version                   : 0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch. [rad] (type:uint8_t)
     |      passkey                   : Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-" (type:char)
     |  
     |  check_signature(self, msgbuf, srcSystem, srcComponent)
     |      check signature on incoming message
     |  
     |  collision_encode(self, src, id, action, threat_level, time_to_minimum_delta, altitude_minimum_delta, horizontal_minimum_delta)
     |      Information about a potential collision
     |      
     |      src                       : Collision data source (type:uint8_t, values:MAV_COLLISION_SRC)
     |      id                        : Unique identifier, domain based on src field (type:uint32_t)
     |      action                    : Action that is being taken to avoid this collision (type:uint8_t, values:MAV_COLLISION_ACTION)
     |      threat_level              : How concerned the aircraft is about this collision (type:uint8_t, values:MAV_COLLISION_THREAT_LEVEL)
     |      time_to_minimum_delta        : Estimated time until collision occurs [s] (type:float)
     |      altitude_minimum_delta        : Closest vertical distance between vehicle and object [m] (type:float)
     |      horizontal_minimum_delta        : Closest horizontal distance between vehicle and object [m] (type:float)
     |  
     |  collision_send(self, src, id, action, threat_level, time_to_minimum_delta, altitude_minimum_delta, horizontal_minimum_delta, force_mavlink1=False)
     |      Information about a potential collision
     |      
     |      src                       : Collision data source (type:uint8_t, values:MAV_COLLISION_SRC)
     |      id                        : Unique identifier, domain based on src field (type:uint32_t)
     |      action                    : Action that is being taken to avoid this collision (type:uint8_t, values:MAV_COLLISION_ACTION)
     |      threat_level              : How concerned the aircraft is about this collision (type:uint8_t, values:MAV_COLLISION_THREAT_LEVEL)
     |      time_to_minimum_delta        : Estimated time until collision occurs [s] (type:float)
     |      altitude_minimum_delta        : Closest vertical distance between vehicle and object [m] (type:float)
     |      horizontal_minimum_delta        : Closest horizontal distance between vehicle and object [m] (type:float)
     |  
     |  command_ack_encode(self, command, result)
     |      Report status of a command. Includes feedback whether the command was
     |      executed. The command microservice is documented at
     |      https://mavlink.io/en/services/command.html
     |      
     |      command                   : Command ID (of acknowledged command). (type:uint16_t, values:MAV_CMD)
     |      result                    : Result of command. (type:uint8_t, values:MAV_RESULT)
     |  
     |  command_ack_send(self, command, result, force_mavlink1=False)
     |      Report status of a command. Includes feedback whether the command was
     |      executed. The command microservice is documented at
     |      https://mavlink.io/en/services/command.html
     |      
     |      command                   : Command ID (of acknowledged command). (type:uint16_t, values:MAV_CMD)
     |      result                    : Result of command. (type:uint8_t, values:MAV_RESULT)
     |  
     |  command_int_encode(self, target_system, target_component, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z)
     |      Message encoding a command with parameters as scaled integers. Scaling
     |      depends on the actual command value. The command
     |      microservice is documented at
     |      https://mavlink.io/en/services/command.html
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      frame                     : The coordinate system of the COMMAND. (type:uint8_t, values:MAV_FRAME)
     |      command                   : The scheduled action for the mission item. (type:uint16_t, values:MAV_CMD)
     |      current                   : false:0, true:1 (type:uint8_t)
     |      autocontinue              : autocontinue to next wp (type:uint8_t)
     |      param1                    : PARAM1, see MAV_CMD enum (type:float)
     |      param2                    : PARAM2, see MAV_CMD enum (type:float)
     |      param3                    : PARAM3, see MAV_CMD enum (type:float)
     |      param4                    : PARAM4, see MAV_CMD enum (type:float)
     |      x                         : PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7 (type:int32_t)
     |      y                         : PARAM6 / local: y position in meters * 1e4, global: longitude in degrees * 10^7 (type:int32_t)
     |      z                         : PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame). (type:float)
     |  
     |  command_int_send(self, target_system, target_component, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z, force_mavlink1=False)
     |      Message encoding a command with parameters as scaled integers. Scaling
     |      depends on the actual command value. The command
     |      microservice is documented at
     |      https://mavlink.io/en/services/command.html
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      frame                     : The coordinate system of the COMMAND. (type:uint8_t, values:MAV_FRAME)
     |      command                   : The scheduled action for the mission item. (type:uint16_t, values:MAV_CMD)
     |      current                   : false:0, true:1 (type:uint8_t)
     |      autocontinue              : autocontinue to next wp (type:uint8_t)
     |      param1                    : PARAM1, see MAV_CMD enum (type:float)
     |      param2                    : PARAM2, see MAV_CMD enum (type:float)
     |      param3                    : PARAM3, see MAV_CMD enum (type:float)
     |      param4                    : PARAM4, see MAV_CMD enum (type:float)
     |      x                         : PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7 (type:int32_t)
     |      y                         : PARAM6 / local: y position in meters * 1e4, global: longitude in degrees * 10^7 (type:int32_t)
     |      z                         : PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame). (type:float)
     |  
     |  command_long_encode(self, target_system, target_component, command, confirmation, param1, param2, param3, param4, param5, param6, param7)
     |      Send a command with up to seven parameters to the MAV. The command
     |      microservice is documented at
     |      https://mavlink.io/en/services/command.html
     |      
     |      target_system             : System which should execute the command (type:uint8_t)
     |      target_component          : Component which should execute the command, 0 for all components (type:uint8_t)
     |      command                   : Command ID (of command to send). (type:uint16_t, values:MAV_CMD)
     |      confirmation              : 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command) (type:uint8_t)
     |      param1                    : Parameter 1 (for the specific command). (type:float)
     |      param2                    : Parameter 2 (for the specific command). (type:float)
     |      param3                    : Parameter 3 (for the specific command). (type:float)
     |      param4                    : Parameter 4 (for the specific command). (type:float)
     |      param5                    : Parameter 5 (for the specific command). (type:float)
     |      param6                    : Parameter 6 (for the specific command). (type:float)
     |      param7                    : Parameter 7 (for the specific command). (type:float)
     |  
     |  command_long_send(self, target_system, target_component, command, confirmation, param1, param2, param3, param4, param5, param6, param7, force_mavlink1=False)
     |      Send a command with up to seven parameters to the MAV. The command
     |      microservice is documented at
     |      https://mavlink.io/en/services/command.html
     |      
     |      target_system             : System which should execute the command (type:uint8_t)
     |      target_component          : Component which should execute the command, 0 for all components (type:uint8_t)
     |      command                   : Command ID (of command to send). (type:uint16_t, values:MAV_CMD)
     |      confirmation              : 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command) (type:uint8_t)
     |      param1                    : Parameter 1 (for the specific command). (type:float)
     |      param2                    : Parameter 2 (for the specific command). (type:float)
     |      param3                    : Parameter 3 (for the specific command). (type:float)
     |      param4                    : Parameter 4 (for the specific command). (type:float)
     |      param5                    : Parameter 5 (for the specific command). (type:float)
     |      param6                    : Parameter 6 (for the specific command). (type:float)
     |      param7                    : Parameter 7 (for the specific command). (type:float)
     |  
     |  compassmot_status_encode(self, throttle, current, interference, CompensationX, CompensationY, CompensationZ)
     |      Status of compassmot calibration.
     |      
     |      throttle                  : Throttle. [d%] (type:uint16_t)
     |      current                   : Current. [A] (type:float)
     |      interference              : Interference. [%] (type:uint16_t)
     |      CompensationX             : Motor Compensation X. (type:float)
     |      CompensationY             : Motor Compensation Y. (type:float)
     |      CompensationZ             : Motor Compensation Z. (type:float)
     |  
     |  compassmot_status_send(self, throttle, current, interference, CompensationX, CompensationY, CompensationZ, force_mavlink1=False)
     |      Status of compassmot calibration.
     |      
     |      throttle                  : Throttle. [d%] (type:uint16_t)
     |      current                   : Current. [A] (type:float)
     |      interference              : Interference. [%] (type:uint16_t)
     |      CompensationX             : Motor Compensation X. (type:float)
     |      CompensationY             : Motor Compensation Y. (type:float)
     |      CompensationZ             : Motor Compensation Z. (type:float)
     |  
     |  control_system_state_encode(self, time_usec, x_acc, y_acc, z_acc, x_vel, y_vel, z_vel, x_pos, y_pos, z_pos, airspeed, vel_variance, pos_variance, q, roll_rate, pitch_rate, yaw_rate)
     |      The smoothed, monotonic system state used to feed the control loops of
     |      the system.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      x_acc                     : X acceleration in body frame [m/s/s] (type:float)
     |      y_acc                     : Y acceleration in body frame [m/s/s] (type:float)
     |      z_acc                     : Z acceleration in body frame [m/s/s] (type:float)
     |      x_vel                     : X velocity in body frame [m/s] (type:float)
     |      y_vel                     : Y velocity in body frame [m/s] (type:float)
     |      z_vel                     : Z velocity in body frame [m/s] (type:float)
     |      x_pos                     : X position in local frame [m] (type:float)
     |      y_pos                     : Y position in local frame [m] (type:float)
     |      z_pos                     : Z position in local frame [m] (type:float)
     |      airspeed                  : Airspeed, set to -1 if unknown [m/s] (type:float)
     |      vel_variance              : Variance of body velocity estimate (type:float)
     |      pos_variance              : Variance in local position (type:float)
     |      q                         : The attitude, represented as Quaternion (type:float)
     |      roll_rate                 : Angular rate in roll axis [rad/s] (type:float)
     |      pitch_rate                : Angular rate in pitch axis [rad/s] (type:float)
     |      yaw_rate                  : Angular rate in yaw axis [rad/s] (type:float)
     |  
     |  control_system_state_send(self, time_usec, x_acc, y_acc, z_acc, x_vel, y_vel, z_vel, x_pos, y_pos, z_pos, airspeed, vel_variance, pos_variance, q, roll_rate, pitch_rate, yaw_rate, force_mavlink1=False)
     |      The smoothed, monotonic system state used to feed the control loops of
     |      the system.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      x_acc                     : X acceleration in body frame [m/s/s] (type:float)
     |      y_acc                     : Y acceleration in body frame [m/s/s] (type:float)
     |      z_acc                     : Z acceleration in body frame [m/s/s] (type:float)
     |      x_vel                     : X velocity in body frame [m/s] (type:float)
     |      y_vel                     : Y velocity in body frame [m/s] (type:float)
     |      z_vel                     : Z velocity in body frame [m/s] (type:float)
     |      x_pos                     : X position in local frame [m] (type:float)
     |      y_pos                     : Y position in local frame [m] (type:float)
     |      z_pos                     : Z position in local frame [m] (type:float)
     |      airspeed                  : Airspeed, set to -1 if unknown [m/s] (type:float)
     |      vel_variance              : Variance of body velocity estimate (type:float)
     |      pos_variance              : Variance in local position (type:float)
     |      q                         : The attitude, represented as Quaternion (type:float)
     |      roll_rate                 : Angular rate in roll axis [rad/s] (type:float)
     |      pitch_rate                : Angular rate in pitch axis [rad/s] (type:float)
     |      yaw_rate                  : Angular rate in yaw axis [rad/s] (type:float)
     |  
     |  data16_encode(self, type, len, data)
     |      Data packet, size 16.
     |      
     |      type                      : Data type. (type:uint8_t)
     |      len                       : Data length. [bytes] (type:uint8_t)
     |      data                      : Raw data. (type:uint8_t)
     |  
     |  data16_send(self, type, len, data, force_mavlink1=False)
     |      Data packet, size 16.
     |      
     |      type                      : Data type. (type:uint8_t)
     |      len                       : Data length. [bytes] (type:uint8_t)
     |      data                      : Raw data. (type:uint8_t)
     |  
     |  data32_encode(self, type, len, data)
     |      Data packet, size 32.
     |      
     |      type                      : Data type. (type:uint8_t)
     |      len                       : Data length. [bytes] (type:uint8_t)
     |      data                      : Raw data. (type:uint8_t)
     |  
     |  data32_send(self, type, len, data, force_mavlink1=False)
     |      Data packet, size 32.
     |      
     |      type                      : Data type. (type:uint8_t)
     |      len                       : Data length. [bytes] (type:uint8_t)
     |      data                      : Raw data. (type:uint8_t)
     |  
     |  data64_encode(self, type, len, data)
     |      Data packet, size 64.
     |      
     |      type                      : Data type. (type:uint8_t)
     |      len                       : Data length. [bytes] (type:uint8_t)
     |      data                      : Raw data. (type:uint8_t)
     |  
     |  data64_send(self, type, len, data, force_mavlink1=False)
     |      Data packet, size 64.
     |      
     |      type                      : Data type. (type:uint8_t)
     |      len                       : Data length. [bytes] (type:uint8_t)
     |      data                      : Raw data. (type:uint8_t)
     |  
     |  data96_encode(self, type, len, data)
     |      Data packet, size 96.
     |      
     |      type                      : Data type. (type:uint8_t)
     |      len                       : Data length. [bytes] (type:uint8_t)
     |      data                      : Raw data. (type:uint8_t)
     |  
     |  data96_send(self, type, len, data, force_mavlink1=False)
     |      Data packet, size 96.
     |      
     |      type                      : Data type. (type:uint8_t)
     |      len                       : Data length. [bytes] (type:uint8_t)
     |      data                      : Raw data. (type:uint8_t)
     |  
     |  data_stream_encode(self, stream_id, message_rate, on_off)
     |      Data stream status information.
     |      
     |      stream_id                 : The ID of the requested data stream (type:uint8_t)
     |      message_rate              : The message rate [Hz] (type:uint16_t)
     |      on_off                    : 1 stream is enabled, 0 stream is stopped. (type:uint8_t)
     |  
     |  data_stream_send(self, stream_id, message_rate, on_off, force_mavlink1=False)
     |      Data stream status information.
     |      
     |      stream_id                 : The ID of the requested data stream (type:uint8_t)
     |      message_rate              : The message rate [Hz] (type:uint16_t)
     |      on_off                    : 1 stream is enabled, 0 stream is stopped. (type:uint8_t)
     |  
     |  data_transmission_handshake_encode(self, type, size, width, height, packets, payload, jpg_quality)
     |      Handshake message to initiate, control and stop image streaming when
     |      using the Image Transmission Protocol: https://mavlink
     |      .io/en/services/image_transmission.html.
     |      
     |      type                      : Type of requested/acknowledged data. (type:uint8_t, values:MAVLINK_DATA_STREAM_TYPE)
     |      size                      : total data size (set on ACK only). [bytes] (type:uint32_t)
     |      width                     : Width of a matrix or image. (type:uint16_t)
     |      height                    : Height of a matrix or image. (type:uint16_t)
     |      packets                   : Number of packets being sent (set on ACK only). (type:uint16_t)
     |      payload                   : Payload size per packet (normally 253 byte, see DATA field size in message ENCAPSULATED_DATA) (set on ACK only). [bytes] (type:uint8_t)
     |      jpg_quality               : JPEG quality. Values: [1-100]. [%] (type:uint8_t)
     |  
     |  data_transmission_handshake_send(self, type, size, width, height, packets, payload, jpg_quality, force_mavlink1=False)
     |      Handshake message to initiate, control and stop image streaming when
     |      using the Image Transmission Protocol: https://mavlink
     |      .io/en/services/image_transmission.html.
     |      
     |      type                      : Type of requested/acknowledged data. (type:uint8_t, values:MAVLINK_DATA_STREAM_TYPE)
     |      size                      : total data size (set on ACK only). [bytes] (type:uint32_t)
     |      width                     : Width of a matrix or image. (type:uint16_t)
     |      height                    : Height of a matrix or image. (type:uint16_t)
     |      packets                   : Number of packets being sent (set on ACK only). (type:uint16_t)
     |      payload                   : Payload size per packet (normally 253 byte, see DATA field size in message ENCAPSULATED_DATA) (set on ACK only). [bytes] (type:uint8_t)
     |      jpg_quality               : JPEG quality. Values: [1-100]. [%] (type:uint8_t)
     |  
     |  debug_encode(self, time_boot_ms, ind, value)
     |      Send a debug value. The index is used to discriminate between values.
     |      These values show up in the plot of QGroundControl as
     |      DEBUG N.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      ind                       : index of debug variable (type:uint8_t)
     |      value                     : DEBUG value (type:float)
     |  
     |  debug_send(self, time_boot_ms, ind, value, force_mavlink1=False)
     |      Send a debug value. The index is used to discriminate between values.
     |      These values show up in the plot of QGroundControl as
     |      DEBUG N.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      ind                       : index of debug variable (type:uint8_t)
     |      value                     : DEBUG value (type:float)
     |  
     |  debug_vect_encode(self, name, time_usec, x, y, z)
     |      To debug something using a named 3D vector.
     |      
     |      name                      : Name (type:char)
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      x                         : x (type:float)
     |      y                         : y (type:float)
     |      z                         : z (type:float)
     |  
     |  debug_vect_send(self, name, time_usec, x, y, z, force_mavlink1=False)
     |      To debug something using a named 3D vector.
     |      
     |      name                      : Name (type:char)
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      x                         : x (type:float)
     |      y                         : y (type:float)
     |      z                         : z (type:float)
     |  
     |  decode(self, msgbuf)
     |      decode a buffer as a MAVLink message
     |  
     |  deepstall_encode(self, landing_lat, landing_lon, path_lat, path_lon, arc_entry_lat, arc_entry_lon, altitude, expected_travel_distance, cross_track_error, stage)
     |      Deepstall path planning.
     |      
     |      landing_lat               : Landing latitude. [degE7] (type:int32_t)
     |      landing_lon               : Landing longitude. [degE7] (type:int32_t)
     |      path_lat                  : Final heading start point, latitude. [degE7] (type:int32_t)
     |      path_lon                  : Final heading start point, longitude. [degE7] (type:int32_t)
     |      arc_entry_lat             : Arc entry point, latitude. [degE7] (type:int32_t)
     |      arc_entry_lon             : Arc entry point, longitude. [degE7] (type:int32_t)
     |      altitude                  : Altitude. [m] (type:float)
     |      expected_travel_distance        : Distance the aircraft expects to travel during the deepstall. [m] (type:float)
     |      cross_track_error         : Deepstall cross track error (only valid when in DEEPSTALL_STAGE_LAND). [m] (type:float)
     |      stage                     : Deepstall stage. (type:uint8_t, values:DEEPSTALL_STAGE)
     |  
     |  deepstall_send(self, landing_lat, landing_lon, path_lat, path_lon, arc_entry_lat, arc_entry_lon, altitude, expected_travel_distance, cross_track_error, stage, force_mavlink1=False)
     |      Deepstall path planning.
     |      
     |      landing_lat               : Landing latitude. [degE7] (type:int32_t)
     |      landing_lon               : Landing longitude. [degE7] (type:int32_t)
     |      path_lat                  : Final heading start point, latitude. [degE7] (type:int32_t)
     |      path_lon                  : Final heading start point, longitude. [degE7] (type:int32_t)
     |      arc_entry_lat             : Arc entry point, latitude. [degE7] (type:int32_t)
     |      arc_entry_lon             : Arc entry point, longitude. [degE7] (type:int32_t)
     |      altitude                  : Altitude. [m] (type:float)
     |      expected_travel_distance        : Distance the aircraft expects to travel during the deepstall. [m] (type:float)
     |      cross_track_error         : Deepstall cross track error (only valid when in DEEPSTALL_STAGE_LAND). [m] (type:float)
     |      stage                     : Deepstall stage. (type:uint8_t, values:DEEPSTALL_STAGE)
     |  
     |  digicam_configure_encode(self, target_system, target_component, mode, shutter_speed, aperture, iso, exposure_type, command_id, engine_cut_off, extra_param, extra_value)
     |      Configure on-board Camera Control System.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      mode                      : Mode enumeration from 1 to N //P, TV, AV, M, etc. (0 means ignore). (type:uint8_t)
     |      shutter_speed             : Divisor number //e.g. 1000 means 1/1000 (0 means ignore). (type:uint16_t)
     |      aperture                  : F stop number x 10 //e.g. 28 means 2.8 (0 means ignore). (type:uint8_t)
     |      iso                       : ISO enumeration from 1 to N //e.g. 80, 100, 200, Etc (0 means ignore). (type:uint8_t)
     |      exposure_type             : Exposure type enumeration from 1 to N (0 means ignore). (type:uint8_t)
     |      command_id                : Command Identity (incremental loop: 0 to 255). //A command sent multiple times will be executed or pooled just once. (type:uint8_t)
     |      engine_cut_off            : Main engine cut-off time before camera trigger (0 means no cut-off). [ds] (type:uint8_t)
     |      extra_param               : Extra parameters enumeration (0 means ignore). (type:uint8_t)
     |      extra_value               : Correspondent value to given extra_param. (type:float)
     |  
     |  digicam_configure_send(self, target_system, target_component, mode, shutter_speed, aperture, iso, exposure_type, command_id, engine_cut_off, extra_param, extra_value, force_mavlink1=False)
     |      Configure on-board Camera Control System.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      mode                      : Mode enumeration from 1 to N //P, TV, AV, M, etc. (0 means ignore). (type:uint8_t)
     |      shutter_speed             : Divisor number //e.g. 1000 means 1/1000 (0 means ignore). (type:uint16_t)
     |      aperture                  : F stop number x 10 //e.g. 28 means 2.8 (0 means ignore). (type:uint8_t)
     |      iso                       : ISO enumeration from 1 to N //e.g. 80, 100, 200, Etc (0 means ignore). (type:uint8_t)
     |      exposure_type             : Exposure type enumeration from 1 to N (0 means ignore). (type:uint8_t)
     |      command_id                : Command Identity (incremental loop: 0 to 255). //A command sent multiple times will be executed or pooled just once. (type:uint8_t)
     |      engine_cut_off            : Main engine cut-off time before camera trigger (0 means no cut-off). [ds] (type:uint8_t)
     |      extra_param               : Extra parameters enumeration (0 means ignore). (type:uint8_t)
     |      extra_value               : Correspondent value to given extra_param. (type:float)
     |  
     |  digicam_control_encode(self, target_system, target_component, session, zoom_pos, zoom_step, focus_lock, shot, command_id, extra_param, extra_value)
     |      Control on-board Camera Control System to take shots.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      session                   : 0: stop, 1: start or keep it up //Session control e.g. show/hide lens. (type:uint8_t)
     |      zoom_pos                  : 1 to N //Zoom's absolute position (0 means ignore). (type:uint8_t)
     |      zoom_step                 : -100 to 100 //Zooming step value to offset zoom from the current position. (type:int8_t)
     |      focus_lock                : 0: unlock focus or keep unlocked, 1: lock focus or keep locked, 3: re-lock focus. (type:uint8_t)
     |      shot                      : 0: ignore, 1: shot or start filming. (type:uint8_t)
     |      command_id                : Command Identity (incremental loop: 0 to 255)//A command sent multiple times will be executed or pooled just once. (type:uint8_t)
     |      extra_param               : Extra parameters enumeration (0 means ignore). (type:uint8_t)
     |      extra_value               : Correspondent value to given extra_param. (type:float)
     |  
     |  digicam_control_send(self, target_system, target_component, session, zoom_pos, zoom_step, focus_lock, shot, command_id, extra_param, extra_value, force_mavlink1=False)
     |      Control on-board Camera Control System to take shots.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      session                   : 0: stop, 1: start or keep it up //Session control e.g. show/hide lens. (type:uint8_t)
     |      zoom_pos                  : 1 to N //Zoom's absolute position (0 means ignore). (type:uint8_t)
     |      zoom_step                 : -100 to 100 //Zooming step value to offset zoom from the current position. (type:int8_t)
     |      focus_lock                : 0: unlock focus or keep unlocked, 1: lock focus or keep locked, 3: re-lock focus. (type:uint8_t)
     |      shot                      : 0: ignore, 1: shot or start filming. (type:uint8_t)
     |      command_id                : Command Identity (incremental loop: 0 to 255)//A command sent multiple times will be executed or pooled just once. (type:uint8_t)
     |      extra_param               : Extra parameters enumeration (0 means ignore). (type:uint8_t)
     |      extra_value               : Correspondent value to given extra_param. (type:float)
     |  
     |  distance_sensor_encode(self, time_boot_ms, min_distance, max_distance, current_distance, type, id, orientation, covariance)
     |      Distance sensor information for an onboard rangefinder.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      min_distance              : Minimum distance the sensor can measure [cm] (type:uint16_t)
     |      max_distance              : Maximum distance the sensor can measure [cm] (type:uint16_t)
     |      current_distance          : Current distance reading [cm] (type:uint16_t)
     |      type                      : Type of distance sensor. (type:uint8_t, values:MAV_DISTANCE_SENSOR)
     |      id                        : Onboard ID of the sensor (type:uint8_t)
     |      orientation               : Direction the sensor faces. downward-facing: ROTATION_PITCH_270, upward-facing: ROTATION_PITCH_90, backward-facing: ROTATION_PITCH_180, forward-facing: ROTATION_NONE, left-facing: ROTATION_YAW_90, right-facing: ROTATION_YAW_270 (type:uint8_t, values:MAV_SENSOR_ORIENTATION)
     |      covariance                : Measurement variance. Max standard deviation is 6cm. 255 if unknown. [cm^2] (type:uint8_t)
     |  
     |  distance_sensor_send(self, time_boot_ms, min_distance, max_distance, current_distance, type, id, orientation, covariance, force_mavlink1=False)
     |      Distance sensor information for an onboard rangefinder.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      min_distance              : Minimum distance the sensor can measure [cm] (type:uint16_t)
     |      max_distance              : Maximum distance the sensor can measure [cm] (type:uint16_t)
     |      current_distance          : Current distance reading [cm] (type:uint16_t)
     |      type                      : Type of distance sensor. (type:uint8_t, values:MAV_DISTANCE_SENSOR)
     |      id                        : Onboard ID of the sensor (type:uint8_t)
     |      orientation               : Direction the sensor faces. downward-facing: ROTATION_PITCH_270, upward-facing: ROTATION_PITCH_90, backward-facing: ROTATION_PITCH_180, forward-facing: ROTATION_NONE, left-facing: ROTATION_YAW_90, right-facing: ROTATION_YAW_270 (type:uint8_t, values:MAV_SENSOR_ORIENTATION)
     |      covariance                : Measurement variance. Max standard deviation is 6cm. 255 if unknown. [cm^2] (type:uint8_t)
     |  
     |  efi_status_encode(self, health, ecu_index, rpm, fuel_consumed, fuel_flow, engine_load, throttle_position, spark_dwell_time, barometric_pressure, intake_manifold_pressure, intake_manifold_temperature, cylinder_head_temperature, ignition_timing, injection_time)
     |      EFI Status Output
     |      
     |      health                    : EFI Health status (type:uint8_t)
     |      ecu_index                 : ECU Index (type:float)
     |      rpm                       : RPM (type:float)
     |      fuel_consumed             : Fuel Consumed [g] (type:float)
     |      fuel_flow                 : Fuel Flow Rate [g/min] (type:float)
     |      engine_load               : Engine Load [%] (type:float)
     |      throttle_position         : Throttle Position [%] (type:float)
     |      spark_dwell_time          : Spark Dwell Time [ms] (type:float)
     |      barometric_pressure        : Barometric Pressure [kPa] (type:float)
     |      intake_manifold_pressure        : Intake Manifold Pressure( [kPa] (type:float)
     |      intake_manifold_temperature        : Intake Manifold Temperature [degC] (type:float)
     |      cylinder_head_temperature        : cylinder_head_temperature [degC] (type:float)
     |      ignition_timing           : Ignition timing (Crank Angle degrees) [deg] (type:float)
     |      injection_time            : Injection time [ms] (type:float)
     |  
     |  efi_status_send(self, health, ecu_index, rpm, fuel_consumed, fuel_flow, engine_load, throttle_position, spark_dwell_time, barometric_pressure, intake_manifold_pressure, intake_manifold_temperature, cylinder_head_temperature, ignition_timing, injection_time, force_mavlink1=False)
     |      EFI Status Output
     |      
     |      health                    : EFI Health status (type:uint8_t)
     |      ecu_index                 : ECU Index (type:float)
     |      rpm                       : RPM (type:float)
     |      fuel_consumed             : Fuel Consumed [g] (type:float)
     |      fuel_flow                 : Fuel Flow Rate [g/min] (type:float)
     |      engine_load               : Engine Load [%] (type:float)
     |      throttle_position         : Throttle Position [%] (type:float)
     |      spark_dwell_time          : Spark Dwell Time [ms] (type:float)
     |      barometric_pressure        : Barometric Pressure [kPa] (type:float)
     |      intake_manifold_pressure        : Intake Manifold Pressure( [kPa] (type:float)
     |      intake_manifold_temperature        : Intake Manifold Temperature [degC] (type:float)
     |      cylinder_head_temperature        : cylinder_head_temperature [degC] (type:float)
     |      ignition_timing           : Ignition timing (Crank Angle degrees) [deg] (type:float)
     |      injection_time            : Injection time [ms] (type:float)
     |  
     |  ekf_status_report_encode(self, flags, velocity_variance, pos_horiz_variance, pos_vert_variance, compass_variance, terrain_alt_variance)
     |      EKF Status message including flags and variances.
     |      
     |      flags                     : Flags. (type:uint16_t, values:EKF_STATUS_FLAGS)
     |      velocity_variance         : Velocity variance. (type:float)
     |      pos_horiz_variance        : Horizontal Position variance. (type:float)
     |      pos_vert_variance         : Vertical Position variance. (type:float)
     |      compass_variance          : Compass variance. (type:float)
     |      terrain_alt_variance        : Terrain Altitude variance. (type:float)
     |  
     |  ekf_status_report_send(self, flags, velocity_variance, pos_horiz_variance, pos_vert_variance, compass_variance, terrain_alt_variance, force_mavlink1=False)
     |      EKF Status message including flags and variances.
     |      
     |      flags                     : Flags. (type:uint16_t, values:EKF_STATUS_FLAGS)
     |      velocity_variance         : Velocity variance. (type:float)
     |      pos_horiz_variance        : Horizontal Position variance. (type:float)
     |      pos_vert_variance         : Vertical Position variance. (type:float)
     |      compass_variance          : Compass variance. (type:float)
     |      terrain_alt_variance        : Terrain Altitude variance. (type:float)
     |  
     |  encapsulated_data_encode(self, seqnr, data)
     |      Data packet for images sent using the Image Transmission Protocol:
     |      https://mavlink.io/en/services/image_transmission.html
     |      .
     |      
     |      seqnr                     : sequence number (starting with 0 on every transmission) (type:uint16_t)
     |      data                      : image data bytes (type:uint8_t)
     |  
     |  encapsulated_data_send(self, seqnr, data, force_mavlink1=False)
     |      Data packet for images sent using the Image Transmission Protocol:
     |      https://mavlink.io/en/services/image_transmission.html
     |      .
     |      
     |      seqnr                     : sequence number (starting with 0 on every transmission) (type:uint16_t)
     |      data                      : image data bytes (type:uint8_t)
     |  
     |  estimator_status_encode(self, time_usec, flags, vel_ratio, pos_horiz_ratio, pos_vert_ratio, mag_ratio, hagl_ratio, tas_ratio, pos_horiz_accuracy, pos_vert_accuracy)
     |      Estimator status message including flags, innovation test ratios and
     |      estimated accuracies. The flags message is an integer
     |      bitmask containing information on which EKF outputs
     |      are valid. See the ESTIMATOR_STATUS_FLAGS enum
     |      definition for further information. The innovation
     |      test ratios show the magnitude of the sensor
     |      innovation divided by the innovation check threshold.
     |      Under normal operation the innovation test ratios
     |      should be below 0.5 with occasional values up to 1.0.
     |      Values greater than 1.0 should be rare under normal
     |      operation and indicate that a measurement has been
     |      rejected by the filter. The user should be notified if
     |      an innovation test ratio greater than 1.0 is recorded.
     |      Notifications for values in the range between 0.5 and
     |      1.0 should be optional and controllable by the user.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      flags                     : Bitmap indicating which EKF outputs are valid. (type:uint16_t, values:ESTIMATOR_STATUS_FLAGS)
     |      vel_ratio                 : Velocity innovation test ratio (type:float)
     |      pos_horiz_ratio           : Horizontal position innovation test ratio (type:float)
     |      pos_vert_ratio            : Vertical position innovation test ratio (type:float)
     |      mag_ratio                 : Magnetometer innovation test ratio (type:float)
     |      hagl_ratio                : Height above terrain innovation test ratio (type:float)
     |      tas_ratio                 : True airspeed innovation test ratio (type:float)
     |      pos_horiz_accuracy        : Horizontal position 1-STD accuracy relative to the EKF local origin [m] (type:float)
     |      pos_vert_accuracy         : Vertical position 1-STD accuracy relative to the EKF local origin [m] (type:float)
     |  
     |  estimator_status_send(self, time_usec, flags, vel_ratio, pos_horiz_ratio, pos_vert_ratio, mag_ratio, hagl_ratio, tas_ratio, pos_horiz_accuracy, pos_vert_accuracy, force_mavlink1=False)
     |      Estimator status message including flags, innovation test ratios and
     |      estimated accuracies. The flags message is an integer
     |      bitmask containing information on which EKF outputs
     |      are valid. See the ESTIMATOR_STATUS_FLAGS enum
     |      definition for further information. The innovation
     |      test ratios show the magnitude of the sensor
     |      innovation divided by the innovation check threshold.
     |      Under normal operation the innovation test ratios
     |      should be below 0.5 with occasional values up to 1.0.
     |      Values greater than 1.0 should be rare under normal
     |      operation and indicate that a measurement has been
     |      rejected by the filter. The user should be notified if
     |      an innovation test ratio greater than 1.0 is recorded.
     |      Notifications for values in the range between 0.5 and
     |      1.0 should be optional and controllable by the user.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      flags                     : Bitmap indicating which EKF outputs are valid. (type:uint16_t, values:ESTIMATOR_STATUS_FLAGS)
     |      vel_ratio                 : Velocity innovation test ratio (type:float)
     |      pos_horiz_ratio           : Horizontal position innovation test ratio (type:float)
     |      pos_vert_ratio            : Vertical position innovation test ratio (type:float)
     |      mag_ratio                 : Magnetometer innovation test ratio (type:float)
     |      hagl_ratio                : Height above terrain innovation test ratio (type:float)
     |      tas_ratio                 : True airspeed innovation test ratio (type:float)
     |      pos_horiz_accuracy        : Horizontal position 1-STD accuracy relative to the EKF local origin [m] (type:float)
     |      pos_vert_accuracy         : Vertical position 1-STD accuracy relative to the EKF local origin [m] (type:float)
     |  
     |  extended_sys_state_encode(self, vtol_state, landed_state)
     |      Provides state for additional features
     |      
     |      vtol_state                : The VTOL state if applicable. Is set to MAV_VTOL_STATE_UNDEFINED if UAV is not in VTOL configuration. (type:uint8_t, values:MAV_VTOL_STATE)
     |      landed_state              : The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown. (type:uint8_t, values:MAV_LANDED_STATE)
     |  
     |  extended_sys_state_send(self, vtol_state, landed_state, force_mavlink1=False)
     |      Provides state for additional features
     |      
     |      vtol_state                : The VTOL state if applicable. Is set to MAV_VTOL_STATE_UNDEFINED if UAV is not in VTOL configuration. (type:uint8_t, values:MAV_VTOL_STATE)
     |      landed_state              : The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown. (type:uint8_t, values:MAV_LANDED_STATE)
     |  
     |  fence_fetch_point_encode(self, target_system, target_component, idx)
     |      Request a current fence point from MAV.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      idx                       : Point index (first point is 1, 0 is for return point). (type:uint8_t)
     |  
     |  fence_fetch_point_send(self, target_system, target_component, idx, force_mavlink1=False)
     |      Request a current fence point from MAV.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      idx                       : Point index (first point is 1, 0 is for return point). (type:uint8_t)
     |  
     |  fence_point_encode(self, target_system, target_component, idx, count, lat, lng)
     |      A fence point. Used to set a point when from GCS -> MAV. Also used to
     |      return a point from MAV -> GCS.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      idx                       : Point index (first point is 1, 0 is for return point). (type:uint8_t)
     |      count                     : Total number of points (for sanity checking). (type:uint8_t)
     |      lat                       : Latitude of point. [deg] (type:float)
     |      lng                       : Longitude of point. [deg] (type:float)
     |  
     |  fence_point_send(self, target_system, target_component, idx, count, lat, lng, force_mavlink1=False)
     |      A fence point. Used to set a point when from GCS -> MAV. Also used to
     |      return a point from MAV -> GCS.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      idx                       : Point index (first point is 1, 0 is for return point). (type:uint8_t)
     |      count                     : Total number of points (for sanity checking). (type:uint8_t)
     |      lat                       : Latitude of point. [deg] (type:float)
     |      lng                       : Longitude of point. [deg] (type:float)
     |  
     |  fence_status_encode(self, breach_status, breach_count, breach_type, breach_time)
     |      Status of geo-fencing. Sent in extended status stream when fencing
     |      enabled.
     |      
     |      breach_status             : Breach status (0 if currently inside fence, 1 if outside). (type:uint8_t)
     |      breach_count              : Number of fence breaches. (type:uint16_t)
     |      breach_type               : Last breach type. (type:uint8_t, values:FENCE_BREACH)
     |      breach_time               : Time (since boot) of last breach. [ms] (type:uint32_t)
     |  
     |  fence_status_send(self, breach_status, breach_count, breach_type, breach_time, force_mavlink1=False)
     |      Status of geo-fencing. Sent in extended status stream when fencing
     |      enabled.
     |      
     |      breach_status             : Breach status (0 if currently inside fence, 1 if outside). (type:uint8_t)
     |      breach_count              : Number of fence breaches. (type:uint16_t)
     |      breach_type               : Last breach type. (type:uint8_t, values:FENCE_BREACH)
     |      breach_time               : Time (since boot) of last breach. [ms] (type:uint32_t)
     |  
     |  file_transfer_protocol_encode(self, target_network, target_system, target_component, payload)
     |      File transfer message
     |      
     |      target_network            : Network ID (0 for broadcast) (type:uint8_t)
     |      target_system             : System ID (0 for broadcast) (type:uint8_t)
     |      target_component          : Component ID (0 for broadcast) (type:uint8_t)
     |      payload                   : Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as part of the mavlink specification. (type:uint8_t)
     |  
     |  file_transfer_protocol_send(self, target_network, target_system, target_component, payload, force_mavlink1=False)
     |      File transfer message
     |      
     |      target_network            : Network ID (0 for broadcast) (type:uint8_t)
     |      target_system             : System ID (0 for broadcast) (type:uint8_t)
     |      target_component          : Component ID (0 for broadcast) (type:uint8_t)
     |      payload                   : Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as part of the mavlink specification. (type:uint8_t)
     |  
     |  follow_target_encode(self, timestamp, est_capabilities, lat, lon, alt, vel, acc, attitude_q, rates, position_cov, custom_state)
     |      Current motion information from a designated system
     |      
     |      timestamp                 : Timestamp (time since system boot). [ms] (type:uint64_t)
     |      est_capabilities          : bit positions for tracker reporting capabilities (POS = 0, VEL = 1, ACCEL = 2, ATT + RATES = 3) (type:uint8_t)
     |      lat                       : Latitude (WGS84) [degE7] (type:int32_t)
     |      lon                       : Longitude (WGS84) [degE7] (type:int32_t)
     |      alt                       : Altitude (MSL) [m] (type:float)
     |      vel                       : target velocity (0,0,0) for unknown [m/s] (type:float)
     |      acc                       : linear target acceleration (0,0,0) for unknown [m/s/s] (type:float)
     |      attitude_q                : (1 0 0 0 for unknown) (type:float)
     |      rates                     : (0 0 0 for unknown) (type:float)
     |      position_cov              : eph epv (type:float)
     |      custom_state              : button states or switches of a tracker device (type:uint64_t)
     |  
     |  follow_target_send(self, timestamp, est_capabilities, lat, lon, alt, vel, acc, attitude_q, rates, position_cov, custom_state, force_mavlink1=False)
     |      Current motion information from a designated system
     |      
     |      timestamp                 : Timestamp (time since system boot). [ms] (type:uint64_t)
     |      est_capabilities          : bit positions for tracker reporting capabilities (POS = 0, VEL = 1, ACCEL = 2, ATT + RATES = 3) (type:uint8_t)
     |      lat                       : Latitude (WGS84) [degE7] (type:int32_t)
     |      lon                       : Longitude (WGS84) [degE7] (type:int32_t)
     |      alt                       : Altitude (MSL) [m] (type:float)
     |      vel                       : target velocity (0,0,0) for unknown [m/s] (type:float)
     |      acc                       : linear target acceleration (0,0,0) for unknown [m/s/s] (type:float)
     |      attitude_q                : (1 0 0 0 for unknown) (type:float)
     |      rates                     : (0 0 0 for unknown) (type:float)
     |      position_cov              : eph epv (type:float)
     |      custom_state              : button states or switches of a tracker device (type:uint64_t)
     |  
     |  gimbal_control_encode(self, target_system, target_component, demanded_rate_x, demanded_rate_y, demanded_rate_z)
     |      Control message for rate gimbal.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      demanded_rate_x           : Demanded angular rate X. [rad/s] (type:float)
     |      demanded_rate_y           : Demanded angular rate Y. [rad/s] (type:float)
     |      demanded_rate_z           : Demanded angular rate Z. [rad/s] (type:float)
     |  
     |  gimbal_control_send(self, target_system, target_component, demanded_rate_x, demanded_rate_y, demanded_rate_z, force_mavlink1=False)
     |      Control message for rate gimbal.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      demanded_rate_x           : Demanded angular rate X. [rad/s] (type:float)
     |      demanded_rate_y           : Demanded angular rate Y. [rad/s] (type:float)
     |      demanded_rate_z           : Demanded angular rate Z. [rad/s] (type:float)
     |  
     |  gimbal_report_encode(self, target_system, target_component, delta_time, delta_angle_x, delta_angle_y, delta_angle_z, delta_velocity_x, delta_velocity_y, delta_velocity_z, joint_roll, joint_el, joint_az)
     |      3 axis gimbal measurements.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      delta_time                : Time since last update. [s] (type:float)
     |      delta_angle_x             : Delta angle X. [rad] (type:float)
     |      delta_angle_y             : Delta angle Y. [rad] (type:float)
     |      delta_angle_z             : Delta angle X. [rad] (type:float)
     |      delta_velocity_x          : Delta velocity X. [m/s] (type:float)
     |      delta_velocity_y          : Delta velocity Y. [m/s] (type:float)
     |      delta_velocity_z          : Delta velocity Z. [m/s] (type:float)
     |      joint_roll                : Joint ROLL. [rad] (type:float)
     |      joint_el                  : Joint EL. [rad] (type:float)
     |      joint_az                  : Joint AZ. [rad] (type:float)
     |  
     |  gimbal_report_send(self, target_system, target_component, delta_time, delta_angle_x, delta_angle_y, delta_angle_z, delta_velocity_x, delta_velocity_y, delta_velocity_z, joint_roll, joint_el, joint_az, force_mavlink1=False)
     |      3 axis gimbal measurements.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      delta_time                : Time since last update. [s] (type:float)
     |      delta_angle_x             : Delta angle X. [rad] (type:float)
     |      delta_angle_y             : Delta angle Y. [rad] (type:float)
     |      delta_angle_z             : Delta angle X. [rad] (type:float)
     |      delta_velocity_x          : Delta velocity X. [m/s] (type:float)
     |      delta_velocity_y          : Delta velocity Y. [m/s] (type:float)
     |      delta_velocity_z          : Delta velocity Z. [m/s] (type:float)
     |      joint_roll                : Joint ROLL. [rad] (type:float)
     |      joint_el                  : Joint EL. [rad] (type:float)
     |      joint_az                  : Joint AZ. [rad] (type:float)
     |  
     |  gimbal_torque_cmd_report_encode(self, target_system, target_component, rl_torque_cmd, el_torque_cmd, az_torque_cmd)
     |      100 Hz gimbal torque command telemetry.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      rl_torque_cmd             : Roll Torque Command. (type:int16_t)
     |      el_torque_cmd             : Elevation Torque Command. (type:int16_t)
     |      az_torque_cmd             : Azimuth Torque Command. (type:int16_t)
     |  
     |  gimbal_torque_cmd_report_send(self, target_system, target_component, rl_torque_cmd, el_torque_cmd, az_torque_cmd, force_mavlink1=False)
     |      100 Hz gimbal torque command telemetry.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      rl_torque_cmd             : Roll Torque Command. (type:int16_t)
     |      el_torque_cmd             : Elevation Torque Command. (type:int16_t)
     |      az_torque_cmd             : Azimuth Torque Command. (type:int16_t)
     |  
     |  global_position_int_cov_encode(self, time_usec, estimator_type, lat, lon, alt, relative_alt, vx, vy, vz, covariance)
     |      The filtered global position (e.g. fused GPS and accelerometers). The
     |      position is in GPS-frame (right-handed, Z-up). It  is
     |      designed as scaled integer message since the
     |      resolution of float is not sufficient. NOTE: This
     |      message is intended for onboard networks / companion
     |      computers and higher-bandwidth links and optimized for
     |      accuracy and completeness. Please use the
     |      GLOBAL_POSITION_INT message for a minimal subset.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      estimator_type            : Class id of the estimator this estimate originated from. (type:uint8_t, values:MAV_ESTIMATOR_TYPE)
     |      lat                       : Latitude [degE7] (type:int32_t)
     |      lon                       : Longitude [degE7] (type:int32_t)
     |      alt                       : Altitude in meters above MSL [mm] (type:int32_t)
     |      relative_alt              : Altitude above ground [mm] (type:int32_t)
     |      vx                        : Ground X Speed (Latitude) [m/s] (type:float)
     |      vy                        : Ground Y Speed (Longitude) [m/s] (type:float)
     |      vz                        : Ground Z Speed (Altitude) [m/s] (type:float)
     |      covariance                : Row-major representation of a 6x6 position and velocity 6x6 cross-covariance matrix (states: lat, lon, alt, vx, vy, vz; first six entries are the first ROW, next six entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (type:float)
     |  
     |  global_position_int_cov_send(self, time_usec, estimator_type, lat, lon, alt, relative_alt, vx, vy, vz, covariance, force_mavlink1=False)
     |      The filtered global position (e.g. fused GPS and accelerometers). The
     |      position is in GPS-frame (right-handed, Z-up). It  is
     |      designed as scaled integer message since the
     |      resolution of float is not sufficient. NOTE: This
     |      message is intended for onboard networks / companion
     |      computers and higher-bandwidth links and optimized for
     |      accuracy and completeness. Please use the
     |      GLOBAL_POSITION_INT message for a minimal subset.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      estimator_type            : Class id of the estimator this estimate originated from. (type:uint8_t, values:MAV_ESTIMATOR_TYPE)
     |      lat                       : Latitude [degE7] (type:int32_t)
     |      lon                       : Longitude [degE7] (type:int32_t)
     |      alt                       : Altitude in meters above MSL [mm] (type:int32_t)
     |      relative_alt              : Altitude above ground [mm] (type:int32_t)
     |      vx                        : Ground X Speed (Latitude) [m/s] (type:float)
     |      vy                        : Ground Y Speed (Longitude) [m/s] (type:float)
     |      vz                        : Ground Z Speed (Altitude) [m/s] (type:float)
     |      covariance                : Row-major representation of a 6x6 position and velocity 6x6 cross-covariance matrix (states: lat, lon, alt, vx, vy, vz; first six entries are the first ROW, next six entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (type:float)
     |  
     |  global_position_int_encode(self, time_boot_ms, lat, lon, alt, relative_alt, vx, vy, vz, hdg)
     |      The filtered global position (e.g. fused GPS and accelerometers). The
     |      position is in GPS-frame (right-handed, Z-up). It
     |      is designed as scaled integer message since the
     |      resolution of float is not sufficient.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      lat                       : Latitude, expressed [degE7] (type:int32_t)
     |      lon                       : Longitude, expressed [degE7] (type:int32_t)
     |      alt                       : Altitude (MSL). Note that virtually all GPS modules provide both WGS84 and MSL. [mm] (type:int32_t)
     |      relative_alt              : Altitude above ground [mm] (type:int32_t)
     |      vx                        : Ground X Speed (Latitude, positive north) [cm/s] (type:int16_t)
     |      vy                        : Ground Y Speed (Longitude, positive east) [cm/s] (type:int16_t)
     |      vz                        : Ground Z Speed (Altitude, positive down) [cm/s] (type:int16_t)
     |      hdg                       : Vehicle heading (yaw angle), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX [cdeg] (type:uint16_t)
     |  
     |  global_position_int_send(self, time_boot_ms, lat, lon, alt, relative_alt, vx, vy, vz, hdg, force_mavlink1=False)
     |      The filtered global position (e.g. fused GPS and accelerometers). The
     |      position is in GPS-frame (right-handed, Z-up). It
     |      is designed as scaled integer message since the
     |      resolution of float is not sufficient.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      lat                       : Latitude, expressed [degE7] (type:int32_t)
     |      lon                       : Longitude, expressed [degE7] (type:int32_t)
     |      alt                       : Altitude (MSL). Note that virtually all GPS modules provide both WGS84 and MSL. [mm] (type:int32_t)
     |      relative_alt              : Altitude above ground [mm] (type:int32_t)
     |      vx                        : Ground X Speed (Latitude, positive north) [cm/s] (type:int16_t)
     |      vy                        : Ground Y Speed (Longitude, positive east) [cm/s] (type:int16_t)
     |      vz                        : Ground Z Speed (Altitude, positive down) [cm/s] (type:int16_t)
     |      hdg                       : Vehicle heading (yaw angle), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX [cdeg] (type:uint16_t)
     |  
     |  global_vision_position_estimate_encode(self, usec, x, y, z, roll, pitch, yaw)
     |      Global position/attitude estimate from a vision source.
     |      
     |      usec                      : Timestamp (UNIX time or since system boot) [us] (type:uint64_t)
     |      x                         : Global X position [m] (type:float)
     |      y                         : Global Y position [m] (type:float)
     |      z                         : Global Z position [m] (type:float)
     |      roll                      : Roll angle [rad] (type:float)
     |      pitch                     : Pitch angle [rad] (type:float)
     |      yaw                       : Yaw angle [rad] (type:float)
     |  
     |  global_vision_position_estimate_send(self, usec, x, y, z, roll, pitch, yaw, force_mavlink1=False)
     |      Global position/attitude estimate from a vision source.
     |      
     |      usec                      : Timestamp (UNIX time or since system boot) [us] (type:uint64_t)
     |      x                         : Global X position [m] (type:float)
     |      y                         : Global Y position [m] (type:float)
     |      z                         : Global Z position [m] (type:float)
     |      roll                      : Roll angle [rad] (type:float)
     |      pitch                     : Pitch angle [rad] (type:float)
     |      yaw                       : Yaw angle [rad] (type:float)
     |  
     |  gopro_get_request_encode(self, target_system, target_component, cmd_id)
     |      Request a GOPRO_COMMAND response from the GoPro.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      cmd_id                    : Command ID. (type:uint8_t, values:GOPRO_COMMAND)
     |  
     |  gopro_get_request_send(self, target_system, target_component, cmd_id, force_mavlink1=False)
     |      Request a GOPRO_COMMAND response from the GoPro.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      cmd_id                    : Command ID. (type:uint8_t, values:GOPRO_COMMAND)
     |  
     |  gopro_get_response_encode(self, cmd_id, status, value)
     |      Response from a GOPRO_COMMAND get request.
     |      
     |      cmd_id                    : Command ID. (type:uint8_t, values:GOPRO_COMMAND)
     |      status                    : Status. (type:uint8_t, values:GOPRO_REQUEST_STATUS)
     |      value                     : Value. (type:uint8_t)
     |  
     |  gopro_get_response_send(self, cmd_id, status, value, force_mavlink1=False)
     |      Response from a GOPRO_COMMAND get request.
     |      
     |      cmd_id                    : Command ID. (type:uint8_t, values:GOPRO_COMMAND)
     |      status                    : Status. (type:uint8_t, values:GOPRO_REQUEST_STATUS)
     |      value                     : Value. (type:uint8_t)
     |  
     |  gopro_heartbeat_encode(self, status, capture_mode, flags)
     |      Heartbeat from a HeroBus attached GoPro.
     |      
     |      status                    : Status. (type:uint8_t, values:GOPRO_HEARTBEAT_STATUS)
     |      capture_mode              : Current capture mode. (type:uint8_t, values:GOPRO_CAPTURE_MODE)
     |      flags                     : Additional status bits. (type:uint8_t, values:GOPRO_HEARTBEAT_FLAGS)
     |  
     |  gopro_heartbeat_send(self, status, capture_mode, flags, force_mavlink1=False)
     |      Heartbeat from a HeroBus attached GoPro.
     |      
     |      status                    : Status. (type:uint8_t, values:GOPRO_HEARTBEAT_STATUS)
     |      capture_mode              : Current capture mode. (type:uint8_t, values:GOPRO_CAPTURE_MODE)
     |      flags                     : Additional status bits. (type:uint8_t, values:GOPRO_HEARTBEAT_FLAGS)
     |  
     |  gopro_set_request_encode(self, target_system, target_component, cmd_id, value)
     |      Request to set a GOPRO_COMMAND with a desired.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      cmd_id                    : Command ID. (type:uint8_t, values:GOPRO_COMMAND)
     |      value                     : Value. (type:uint8_t)
     |  
     |  gopro_set_request_send(self, target_system, target_component, cmd_id, value, force_mavlink1=False)
     |      Request to set a GOPRO_COMMAND with a desired.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      cmd_id                    : Command ID. (type:uint8_t, values:GOPRO_COMMAND)
     |      value                     : Value. (type:uint8_t)
     |  
     |  gopro_set_response_encode(self, cmd_id, status)
     |      Response from a GOPRO_COMMAND set request.
     |      
     |      cmd_id                    : Command ID. (type:uint8_t, values:GOPRO_COMMAND)
     |      status                    : Status. (type:uint8_t, values:GOPRO_REQUEST_STATUS)
     |  
     |  gopro_set_response_send(self, cmd_id, status, force_mavlink1=False)
     |      Response from a GOPRO_COMMAND set request.
     |      
     |      cmd_id                    : Command ID. (type:uint8_t, values:GOPRO_COMMAND)
     |      status                    : Status. (type:uint8_t, values:GOPRO_REQUEST_STATUS)
     |  
     |  gps2_raw_encode(self, time_usec, fix_type, lat, lon, alt, eph, epv, vel, cog, satellites_visible, dgps_numch, dgps_age)
     |      Second GPS data.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      fix_type                  : GPS fix type. (type:uint8_t, values:GPS_FIX_TYPE)
     |      lat                       : Latitude (WGS84) [degE7] (type:int32_t)
     |      lon                       : Longitude (WGS84) [degE7] (type:int32_t)
     |      alt                       : Altitude (MSL). Positive for up. [mm] (type:int32_t)
     |      eph                       : GPS HDOP horizontal dilution of position. If unknown, set to: UINT16_MAX [cm] (type:uint16_t)
     |      epv                       : GPS VDOP vertical dilution of position. If unknown, set to: UINT16_MAX [cm] (type:uint16_t)
     |      vel                       : GPS ground speed. If unknown, set to: UINT16_MAX [cm/s] (type:uint16_t)
     |      cog                       : Course over ground (NOT heading, but direction of movement): 0.0..359.99 degrees. If unknown, set to: UINT16_MAX [cdeg] (type:uint16_t)
     |      satellites_visible        : Number of satellites visible. If unknown, set to 255 (type:uint8_t)
     |      dgps_numch                : Number of DGPS satellites (type:uint8_t)
     |      dgps_age                  : Age of DGPS info [ms] (type:uint32_t)
     |  
     |  gps2_raw_send(self, time_usec, fix_type, lat, lon, alt, eph, epv, vel, cog, satellites_visible, dgps_numch, dgps_age, force_mavlink1=False)
     |      Second GPS data.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      fix_type                  : GPS fix type. (type:uint8_t, values:GPS_FIX_TYPE)
     |      lat                       : Latitude (WGS84) [degE7] (type:int32_t)
     |      lon                       : Longitude (WGS84) [degE7] (type:int32_t)
     |      alt                       : Altitude (MSL). Positive for up. [mm] (type:int32_t)
     |      eph                       : GPS HDOP horizontal dilution of position. If unknown, set to: UINT16_MAX [cm] (type:uint16_t)
     |      epv                       : GPS VDOP vertical dilution of position. If unknown, set to: UINT16_MAX [cm] (type:uint16_t)
     |      vel                       : GPS ground speed. If unknown, set to: UINT16_MAX [cm/s] (type:uint16_t)
     |      cog                       : Course over ground (NOT heading, but direction of movement): 0.0..359.99 degrees. If unknown, set to: UINT16_MAX [cdeg] (type:uint16_t)
     |      satellites_visible        : Number of satellites visible. If unknown, set to 255 (type:uint8_t)
     |      dgps_numch                : Number of DGPS satellites (type:uint8_t)
     |      dgps_age                  : Age of DGPS info [ms] (type:uint32_t)
     |  
     |  gps2_rtk_encode(self, time_last_baseline_ms, rtk_receiver_id, wn, tow, rtk_health, rtk_rate, nsats, baseline_coords_type, baseline_a_mm, baseline_b_mm, baseline_c_mm, accuracy, iar_num_hypotheses)
     |      RTK GPS data. Gives information on the relative baseline calculation
     |      the GPS is reporting
     |      
     |      time_last_baseline_ms        : Time since boot of last baseline message received. [ms] (type:uint32_t)
     |      rtk_receiver_id           : Identification of connected RTK receiver. (type:uint8_t)
     |      wn                        : GPS Week Number of last baseline (type:uint16_t)
     |      tow                       : GPS Time of Week of last baseline [ms] (type:uint32_t)
     |      rtk_health                : GPS-specific health report for RTK data. (type:uint8_t)
     |      rtk_rate                  : Rate of baseline messages being received by GPS [Hz] (type:uint8_t)
     |      nsats                     : Current number of sats used for RTK calculation. (type:uint8_t)
     |      baseline_coords_type        : Coordinate system of baseline (type:uint8_t, values:RTK_BASELINE_COORDINATE_SYSTEM)
     |      baseline_a_mm             : Current baseline in ECEF x or NED north component. [mm] (type:int32_t)
     |      baseline_b_mm             : Current baseline in ECEF y or NED east component. [mm] (type:int32_t)
     |      baseline_c_mm             : Current baseline in ECEF z or NED down component. [mm] (type:int32_t)
     |      accuracy                  : Current estimate of baseline accuracy. (type:uint32_t)
     |      iar_num_hypotheses        : Current number of integer ambiguity hypotheses. (type:int32_t)
     |  
     |  gps2_rtk_send(self, time_last_baseline_ms, rtk_receiver_id, wn, tow, rtk_health, rtk_rate, nsats, baseline_coords_type, baseline_a_mm, baseline_b_mm, baseline_c_mm, accuracy, iar_num_hypotheses, force_mavlink1=False)
     |      RTK GPS data. Gives information on the relative baseline calculation
     |      the GPS is reporting
     |      
     |      time_last_baseline_ms        : Time since boot of last baseline message received. [ms] (type:uint32_t)
     |      rtk_receiver_id           : Identification of connected RTK receiver. (type:uint8_t)
     |      wn                        : GPS Week Number of last baseline (type:uint16_t)
     |      tow                       : GPS Time of Week of last baseline [ms] (type:uint32_t)
     |      rtk_health                : GPS-specific health report for RTK data. (type:uint8_t)
     |      rtk_rate                  : Rate of baseline messages being received by GPS [Hz] (type:uint8_t)
     |      nsats                     : Current number of sats used for RTK calculation. (type:uint8_t)
     |      baseline_coords_type        : Coordinate system of baseline (type:uint8_t, values:RTK_BASELINE_COORDINATE_SYSTEM)
     |      baseline_a_mm             : Current baseline in ECEF x or NED north component. [mm] (type:int32_t)
     |      baseline_b_mm             : Current baseline in ECEF y or NED east component. [mm] (type:int32_t)
     |      baseline_c_mm             : Current baseline in ECEF z or NED down component. [mm] (type:int32_t)
     |      accuracy                  : Current estimate of baseline accuracy. (type:uint32_t)
     |      iar_num_hypotheses        : Current number of integer ambiguity hypotheses. (type:int32_t)
     |  
     |  gps_global_origin_encode(self, latitude, longitude, altitude)
     |      Publishes the GPS co-ordinates of the vehicle local origin (0,0,0)
     |      position. Emitted whenever a new GPS-Local position
     |      mapping is requested or set - e.g. following
     |      SET_GPS_GLOBAL_ORIGIN message.
     |      
     |      latitude                  : Latitude (WGS84) [degE7] (type:int32_t)
     |      longitude                 : Longitude (WGS84) [degE7] (type:int32_t)
     |      altitude                  : Altitude (MSL). Positive for up. [mm] (type:int32_t)
     |  
     |  gps_global_origin_send(self, latitude, longitude, altitude, force_mavlink1=False)
     |      Publishes the GPS co-ordinates of the vehicle local origin (0,0,0)
     |      position. Emitted whenever a new GPS-Local position
     |      mapping is requested or set - e.g. following
     |      SET_GPS_GLOBAL_ORIGIN message.
     |      
     |      latitude                  : Latitude (WGS84) [degE7] (type:int32_t)
     |      longitude                 : Longitude (WGS84) [degE7] (type:int32_t)
     |      altitude                  : Altitude (MSL). Positive for up. [mm] (type:int32_t)
     |  
     |  gps_inject_data_encode(self, target_system, target_component, len, data)
     |      Data for injecting into the onboard GPS (used for DGPS)
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      len                       : Data length [bytes] (type:uint8_t)
     |      data                      : Raw data (110 is enough for 12 satellites of RTCMv2) (type:uint8_t)
     |  
     |  gps_inject_data_send(self, target_system, target_component, len, data, force_mavlink1=False)
     |      Data for injecting into the onboard GPS (used for DGPS)
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      len                       : Data length [bytes] (type:uint8_t)
     |      data                      : Raw data (110 is enough for 12 satellites of RTCMv2) (type:uint8_t)
     |  
     |  gps_input_encode(self, time_usec, gps_id, ignore_flags, time_week_ms, time_week, fix_type, lat, lon, alt, hdop, vdop, vn, ve, vd, speed_accuracy, horiz_accuracy, vert_accuracy, satellites_visible)
     |      GPS sensor input message.  This is a raw sensor value sent by the GPS.
     |      This is NOT the global position estimate of the
     |      system.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      gps_id                    : ID of the GPS for multiple GPS inputs (type:uint8_t)
     |      ignore_flags              : Bitmap indicating which GPS input flags fields to ignore.  All other fields must be provided. (type:uint16_t, values:GPS_INPUT_IGNORE_FLAGS)
     |      time_week_ms              : GPS time (from start of GPS week) [ms] (type:uint32_t)
     |      time_week                 : GPS week number (type:uint16_t)
     |      fix_type                  : 0-1: no fix, 2: 2D fix, 3: 3D fix. 4: 3D with DGPS. 5: 3D with RTK (type:uint8_t)
     |      lat                       : Latitude (WGS84) [degE7] (type:int32_t)
     |      lon                       : Longitude (WGS84) [degE7] (type:int32_t)
     |      alt                       : Altitude (MSL). Positive for up. [m] (type:float)
     |      hdop                      : GPS HDOP horizontal dilution of position [m] (type:float)
     |      vdop                      : GPS VDOP vertical dilution of position [m] (type:float)
     |      vn                        : GPS velocity in north direction in earth-fixed NED frame [m/s] (type:float)
     |      ve                        : GPS velocity in east direction in earth-fixed NED frame [m/s] (type:float)
     |      vd                        : GPS velocity in down direction in earth-fixed NED frame [m/s] (type:float)
     |      speed_accuracy            : GPS speed accuracy [m/s] (type:float)
     |      horiz_accuracy            : GPS horizontal accuracy [m] (type:float)
     |      vert_accuracy             : GPS vertical accuracy [m] (type:float)
     |      satellites_visible        : Number of satellites visible. (type:uint8_t)
     |  
     |  gps_input_send(self, time_usec, gps_id, ignore_flags, time_week_ms, time_week, fix_type, lat, lon, alt, hdop, vdop, vn, ve, vd, speed_accuracy, horiz_accuracy, vert_accuracy, satellites_visible, force_mavlink1=False)
     |      GPS sensor input message.  This is a raw sensor value sent by the GPS.
     |      This is NOT the global position estimate of the
     |      system.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      gps_id                    : ID of the GPS for multiple GPS inputs (type:uint8_t)
     |      ignore_flags              : Bitmap indicating which GPS input flags fields to ignore.  All other fields must be provided. (type:uint16_t, values:GPS_INPUT_IGNORE_FLAGS)
     |      time_week_ms              : GPS time (from start of GPS week) [ms] (type:uint32_t)
     |      time_week                 : GPS week number (type:uint16_t)
     |      fix_type                  : 0-1: no fix, 2: 2D fix, 3: 3D fix. 4: 3D with DGPS. 5: 3D with RTK (type:uint8_t)
     |      lat                       : Latitude (WGS84) [degE7] (type:int32_t)
     |      lon                       : Longitude (WGS84) [degE7] (type:int32_t)
     |      alt                       : Altitude (MSL). Positive for up. [m] (type:float)
     |      hdop                      : GPS HDOP horizontal dilution of position [m] (type:float)
     |      vdop                      : GPS VDOP vertical dilution of position [m] (type:float)
     |      vn                        : GPS velocity in north direction in earth-fixed NED frame [m/s] (type:float)
     |      ve                        : GPS velocity in east direction in earth-fixed NED frame [m/s] (type:float)
     |      vd                        : GPS velocity in down direction in earth-fixed NED frame [m/s] (type:float)
     |      speed_accuracy            : GPS speed accuracy [m/s] (type:float)
     |      horiz_accuracy            : GPS horizontal accuracy [m] (type:float)
     |      vert_accuracy             : GPS vertical accuracy [m] (type:float)
     |      satellites_visible        : Number of satellites visible. (type:uint8_t)
     |  
     |  gps_raw_int_encode(self, time_usec, fix_type, lat, lon, alt, eph, epv, vel, cog, satellites_visible)
     |      The global position, as returned by the Global Positioning System
     |      (GPS). This is                 NOT the global position
     |      estimate of the system, but rather a RAW sensor value.
     |      See message GLOBAL_POSITION for the global position
     |      estimate.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      fix_type                  : GPS fix type. (type:uint8_t, values:GPS_FIX_TYPE)
     |      lat                       : Latitude (WGS84, EGM96 ellipsoid) [degE7] (type:int32_t)
     |      lon                       : Longitude (WGS84, EGM96 ellipsoid) [degE7] (type:int32_t)
     |      alt                       : Altitude (MSL). Positive for up. Note that virtually all GPS modules provide the MSL altitude in addition to the WGS84 altitude. [mm] (type:int32_t)
     |      eph                       : GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX (type:uint16_t)
     |      epv                       : GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX (type:uint16_t)
     |      vel                       : GPS ground speed. If unknown, set to: UINT16_MAX [cm/s] (type:uint16_t)
     |      cog                       : Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX [cdeg] (type:uint16_t)
     |      satellites_visible        : Number of satellites visible. If unknown, set to 255 (type:uint8_t)
     |  
     |  gps_raw_int_send(self, time_usec, fix_type, lat, lon, alt, eph, epv, vel, cog, satellites_visible, force_mavlink1=False)
     |      The global position, as returned by the Global Positioning System
     |      (GPS). This is                 NOT the global position
     |      estimate of the system, but rather a RAW sensor value.
     |      See message GLOBAL_POSITION for the global position
     |      estimate.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      fix_type                  : GPS fix type. (type:uint8_t, values:GPS_FIX_TYPE)
     |      lat                       : Latitude (WGS84, EGM96 ellipsoid) [degE7] (type:int32_t)
     |      lon                       : Longitude (WGS84, EGM96 ellipsoid) [degE7] (type:int32_t)
     |      alt                       : Altitude (MSL). Positive for up. Note that virtually all GPS modules provide the MSL altitude in addition to the WGS84 altitude. [mm] (type:int32_t)
     |      eph                       : GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX (type:uint16_t)
     |      epv                       : GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX (type:uint16_t)
     |      vel                       : GPS ground speed. If unknown, set to: UINT16_MAX [cm/s] (type:uint16_t)
     |      cog                       : Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX [cdeg] (type:uint16_t)
     |      satellites_visible        : Number of satellites visible. If unknown, set to 255 (type:uint8_t)
     |  
     |  gps_rtcm_data_encode(self, flags, len, data)
     |      RTCM message for injecting into the onboard GPS (used for DGPS)
     |      
     |      flags                     : LSB: 1 means message is fragmented, next 2 bits are the fragment ID, the remaining 5 bits are used for the sequence ID. Messages are only to be flushed to the GPS when the entire message has been reconstructed on the autopilot. The fragment ID specifies which order the fragments should be assembled into a buffer, while the sequence ID is used to detect a mismatch between different buffers. The buffer is considered fully reconstructed when either all 4 fragments are present, or all the fragments before the first fragment with a non full payload is received. This management is used to ensure that normal GPS operation doesn't corrupt RTCM data, and to recover from a unreliable transport delivery order. (type:uint8_t)
     |      len                       : data length [bytes] (type:uint8_t)
     |      data                      : RTCM message (may be fragmented) (type:uint8_t)
     |  
     |  gps_rtcm_data_send(self, flags, len, data, force_mavlink1=False)
     |      RTCM message for injecting into the onboard GPS (used for DGPS)
     |      
     |      flags                     : LSB: 1 means message is fragmented, next 2 bits are the fragment ID, the remaining 5 bits are used for the sequence ID. Messages are only to be flushed to the GPS when the entire message has been reconstructed on the autopilot. The fragment ID specifies which order the fragments should be assembled into a buffer, while the sequence ID is used to detect a mismatch between different buffers. The buffer is considered fully reconstructed when either all 4 fragments are present, or all the fragments before the first fragment with a non full payload is received. This management is used to ensure that normal GPS operation doesn't corrupt RTCM data, and to recover from a unreliable transport delivery order. (type:uint8_t)
     |      len                       : data length [bytes] (type:uint8_t)
     |      data                      : RTCM message (may be fragmented) (type:uint8_t)
     |  
     |  gps_rtk_encode(self, time_last_baseline_ms, rtk_receiver_id, wn, tow, rtk_health, rtk_rate, nsats, baseline_coords_type, baseline_a_mm, baseline_b_mm, baseline_c_mm, accuracy, iar_num_hypotheses)
     |      RTK GPS data. Gives information on the relative baseline calculation
     |      the GPS is reporting
     |      
     |      time_last_baseline_ms        : Time since boot of last baseline message received. [ms] (type:uint32_t)
     |      rtk_receiver_id           : Identification of connected RTK receiver. (type:uint8_t)
     |      wn                        : GPS Week Number of last baseline (type:uint16_t)
     |      tow                       : GPS Time of Week of last baseline [ms] (type:uint32_t)
     |      rtk_health                : GPS-specific health report for RTK data. (type:uint8_t)
     |      rtk_rate                  : Rate of baseline messages being received by GPS [Hz] (type:uint8_t)
     |      nsats                     : Current number of sats used for RTK calculation. (type:uint8_t)
     |      baseline_coords_type        : Coordinate system of baseline (type:uint8_t, values:RTK_BASELINE_COORDINATE_SYSTEM)
     |      baseline_a_mm             : Current baseline in ECEF x or NED north component. [mm] (type:int32_t)
     |      baseline_b_mm             : Current baseline in ECEF y or NED east component. [mm] (type:int32_t)
     |      baseline_c_mm             : Current baseline in ECEF z or NED down component. [mm] (type:int32_t)
     |      accuracy                  : Current estimate of baseline accuracy. (type:uint32_t)
     |      iar_num_hypotheses        : Current number of integer ambiguity hypotheses. (type:int32_t)
     |  
     |  gps_rtk_send(self, time_last_baseline_ms, rtk_receiver_id, wn, tow, rtk_health, rtk_rate, nsats, baseline_coords_type, baseline_a_mm, baseline_b_mm, baseline_c_mm, accuracy, iar_num_hypotheses, force_mavlink1=False)
     |      RTK GPS data. Gives information on the relative baseline calculation
     |      the GPS is reporting
     |      
     |      time_last_baseline_ms        : Time since boot of last baseline message received. [ms] (type:uint32_t)
     |      rtk_receiver_id           : Identification of connected RTK receiver. (type:uint8_t)
     |      wn                        : GPS Week Number of last baseline (type:uint16_t)
     |      tow                       : GPS Time of Week of last baseline [ms] (type:uint32_t)
     |      rtk_health                : GPS-specific health report for RTK data. (type:uint8_t)
     |      rtk_rate                  : Rate of baseline messages being received by GPS [Hz] (type:uint8_t)
     |      nsats                     : Current number of sats used for RTK calculation. (type:uint8_t)
     |      baseline_coords_type        : Coordinate system of baseline (type:uint8_t, values:RTK_BASELINE_COORDINATE_SYSTEM)
     |      baseline_a_mm             : Current baseline in ECEF x or NED north component. [mm] (type:int32_t)
     |      baseline_b_mm             : Current baseline in ECEF y or NED east component. [mm] (type:int32_t)
     |      baseline_c_mm             : Current baseline in ECEF z or NED down component. [mm] (type:int32_t)
     |      accuracy                  : Current estimate of baseline accuracy. (type:uint32_t)
     |      iar_num_hypotheses        : Current number of integer ambiguity hypotheses. (type:int32_t)
     |  
     |  gps_status_encode(self, satellites_visible, satellite_prn, satellite_used, satellite_elevation, satellite_azimuth, satellite_snr)
     |      The positioning status, as reported by GPS. This message is intended
     |      to display status information about each satellite
     |      visible to the receiver. See message GLOBAL_POSITION
     |      for the global position estimate. This message can
     |      contain information for up to 20 satellites.
     |      
     |      satellites_visible        : Number of satellites visible (type:uint8_t)
     |      satellite_prn             : Global satellite ID (type:uint8_t)
     |      satellite_used            : 0: Satellite not used, 1: used for localization (type:uint8_t)
     |      satellite_elevation        : Elevation (0: right on top of receiver, 90: on the horizon) of satellite [deg] (type:uint8_t)
     |      satellite_azimuth         : Direction of satellite, 0: 0 deg, 255: 360 deg. [deg] (type:uint8_t)
     |      satellite_snr             : Signal to noise ratio of satellite [dB] (type:uint8_t)
     |  
     |  gps_status_send(self, satellites_visible, satellite_prn, satellite_used, satellite_elevation, satellite_azimuth, satellite_snr, force_mavlink1=False)
     |      The positioning status, as reported by GPS. This message is intended
     |      to display status information about each satellite
     |      visible to the receiver. See message GLOBAL_POSITION
     |      for the global position estimate. This message can
     |      contain information for up to 20 satellites.
     |      
     |      satellites_visible        : Number of satellites visible (type:uint8_t)
     |      satellite_prn             : Global satellite ID (type:uint8_t)
     |      satellite_used            : 0: Satellite not used, 1: used for localization (type:uint8_t)
     |      satellite_elevation        : Elevation (0: right on top of receiver, 90: on the horizon) of satellite [deg] (type:uint8_t)
     |      satellite_azimuth         : Direction of satellite, 0: 0 deg, 255: 360 deg. [deg] (type:uint8_t)
     |      satellite_snr             : Signal to noise ratio of satellite [dB] (type:uint8_t)
     |  
     |  heartbeat_encode(self, type, autopilot, base_mode, custom_mode, system_status, mavlink_version=3)
     |      The heartbeat message shows that a system or component is present and
     |      responding. The type and autopilot fields (along with
     |      the message component id), allow the receiving system
     |      to treat further messages from this system
     |      appropriately (e.g. by laying out the user interface
     |      based on the autopilot). This microservice is
     |      documented at
     |      https://mavlink.io/en/services/heartbeat.html
     |      
     |      type                      : Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type. (type:uint8_t, values:MAV_TYPE)
     |      autopilot                 : Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers. (type:uint8_t, values:MAV_AUTOPILOT)
     |      base_mode                 : System mode bitmap. (type:uint8_t, values:MAV_MODE_FLAG)
     |      custom_mode               : A bitfield for use for autopilot-specific flags (type:uint32_t)
     |      system_status             : System status flag. (type:uint8_t, values:MAV_STATE)
     |      mavlink_version           : MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version (type:uint8_t)
     |  
     |  heartbeat_send(self, type, autopilot, base_mode, custom_mode, system_status, mavlink_version=3, force_mavlink1=False)
     |      The heartbeat message shows that a system or component is present and
     |      responding. The type and autopilot fields (along with
     |      the message component id), allow the receiving system
     |      to treat further messages from this system
     |      appropriately (e.g. by laying out the user interface
     |      based on the autopilot). This microservice is
     |      documented at
     |      https://mavlink.io/en/services/heartbeat.html
     |      
     |      type                      : Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type. (type:uint8_t, values:MAV_TYPE)
     |      autopilot                 : Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers. (type:uint8_t, values:MAV_AUTOPILOT)
     |      base_mode                 : System mode bitmap. (type:uint8_t, values:MAV_MODE_FLAG)
     |      custom_mode               : A bitfield for use for autopilot-specific flags (type:uint32_t)
     |      system_status             : System status flag. (type:uint8_t, values:MAV_STATE)
     |      mavlink_version           : MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version (type:uint8_t)
     |  
     |  high_latency_encode(self, base_mode, custom_mode, landed_state, roll, pitch, heading, throttle, heading_sp, latitude, longitude, altitude_amsl, altitude_sp, airspeed, airspeed_sp, groundspeed, climb_rate, gps_nsat, gps_fix_type, battery_remaining, temperature, temperature_air, failsafe, wp_num, wp_distance)
     |      Message appropriate for high latency connections like Iridium
     |      
     |      base_mode                 : Bitmap of enabled system modes. (type:uint8_t, values:MAV_MODE_FLAG)
     |      custom_mode               : A bitfield for use for autopilot-specific flags. (type:uint32_t)
     |      landed_state              : The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown. (type:uint8_t, values:MAV_LANDED_STATE)
     |      roll                      : roll [cdeg] (type:int16_t)
     |      pitch                     : pitch [cdeg] (type:int16_t)
     |      heading                   : heading [cdeg] (type:uint16_t)
     |      throttle                  : throttle (percentage) [%] (type:int8_t)
     |      heading_sp                : heading setpoint [cdeg] (type:int16_t)
     |      latitude                  : Latitude [degE7] (type:int32_t)
     |      longitude                 : Longitude [degE7] (type:int32_t)
     |      altitude_amsl             : Altitude above mean sea level [m] (type:int16_t)
     |      altitude_sp               : Altitude setpoint relative to the home position [m] (type:int16_t)
     |      airspeed                  : airspeed [m/s] (type:uint8_t)
     |      airspeed_sp               : airspeed setpoint [m/s] (type:uint8_t)
     |      groundspeed               : groundspeed [m/s] (type:uint8_t)
     |      climb_rate                : climb rate [m/s] (type:int8_t)
     |      gps_nsat                  : Number of satellites visible. If unknown, set to 255 (type:uint8_t)
     |      gps_fix_type              : GPS Fix type. (type:uint8_t, values:GPS_FIX_TYPE)
     |      battery_remaining         : Remaining battery (percentage) [%] (type:uint8_t)
     |      temperature               : Autopilot temperature (degrees C) [degC] (type:int8_t)
     |      temperature_air           : Air temperature (degrees C) from airspeed sensor [degC] (type:int8_t)
     |      failsafe                  : failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, bit1:batt, bit2:GPS, bit3:GCS, bit4:fence) (type:uint8_t)
     |      wp_num                    : current waypoint number (type:uint8_t)
     |      wp_distance               : distance to target [m] (type:uint16_t)
     |  
     |  high_latency_send(self, base_mode, custom_mode, landed_state, roll, pitch, heading, throttle, heading_sp, latitude, longitude, altitude_amsl, altitude_sp, airspeed, airspeed_sp, groundspeed, climb_rate, gps_nsat, gps_fix_type, battery_remaining, temperature, temperature_air, failsafe, wp_num, wp_distance, force_mavlink1=False)
     |      Message appropriate for high latency connections like Iridium
     |      
     |      base_mode                 : Bitmap of enabled system modes. (type:uint8_t, values:MAV_MODE_FLAG)
     |      custom_mode               : A bitfield for use for autopilot-specific flags. (type:uint32_t)
     |      landed_state              : The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown. (type:uint8_t, values:MAV_LANDED_STATE)
     |      roll                      : roll [cdeg] (type:int16_t)
     |      pitch                     : pitch [cdeg] (type:int16_t)
     |      heading                   : heading [cdeg] (type:uint16_t)
     |      throttle                  : throttle (percentage) [%] (type:int8_t)
     |      heading_sp                : heading setpoint [cdeg] (type:int16_t)
     |      latitude                  : Latitude [degE7] (type:int32_t)
     |      longitude                 : Longitude [degE7] (type:int32_t)
     |      altitude_amsl             : Altitude above mean sea level [m] (type:int16_t)
     |      altitude_sp               : Altitude setpoint relative to the home position [m] (type:int16_t)
     |      airspeed                  : airspeed [m/s] (type:uint8_t)
     |      airspeed_sp               : airspeed setpoint [m/s] (type:uint8_t)
     |      groundspeed               : groundspeed [m/s] (type:uint8_t)
     |      climb_rate                : climb rate [m/s] (type:int8_t)
     |      gps_nsat                  : Number of satellites visible. If unknown, set to 255 (type:uint8_t)
     |      gps_fix_type              : GPS Fix type. (type:uint8_t, values:GPS_FIX_TYPE)
     |      battery_remaining         : Remaining battery (percentage) [%] (type:uint8_t)
     |      temperature               : Autopilot temperature (degrees C) [degC] (type:int8_t)
     |      temperature_air           : Air temperature (degrees C) from airspeed sensor [degC] (type:int8_t)
     |      failsafe                  : failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, bit1:batt, bit2:GPS, bit3:GCS, bit4:fence) (type:uint8_t)
     |      wp_num                    : current waypoint number (type:uint8_t)
     |      wp_distance               : distance to target [m] (type:uint16_t)
     |  
     |  highres_imu_encode(self, time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, abs_pressure, diff_pressure, pressure_alt, temperature, fields_updated)
     |      The IMU readings in SI units in NED body frame
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      xacc                      : X acceleration [m/s/s] (type:float)
     |      yacc                      : Y acceleration [m/s/s] (type:float)
     |      zacc                      : Z acceleration [m/s/s] (type:float)
     |      xgyro                     : Angular speed around X axis [rad/s] (type:float)
     |      ygyro                     : Angular speed around Y axis [rad/s] (type:float)
     |      zgyro                     : Angular speed around Z axis [rad/s] (type:float)
     |      xmag                      : X Magnetic field [gauss] (type:float)
     |      ymag                      : Y Magnetic field [gauss] (type:float)
     |      zmag                      : Z Magnetic field [gauss] (type:float)
     |      abs_pressure              : Absolute pressure [mbar] (type:float)
     |      diff_pressure             : Differential pressure [mbar] (type:float)
     |      pressure_alt              : Altitude calculated from pressure (type:float)
     |      temperature               : Temperature [degC] (type:float)
     |      fields_updated            : Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature (type:uint16_t)
     |  
     |  highres_imu_send(self, time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, abs_pressure, diff_pressure, pressure_alt, temperature, fields_updated, force_mavlink1=False)
     |      The IMU readings in SI units in NED body frame
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      xacc                      : X acceleration [m/s/s] (type:float)
     |      yacc                      : Y acceleration [m/s/s] (type:float)
     |      zacc                      : Z acceleration [m/s/s] (type:float)
     |      xgyro                     : Angular speed around X axis [rad/s] (type:float)
     |      ygyro                     : Angular speed around Y axis [rad/s] (type:float)
     |      zgyro                     : Angular speed around Z axis [rad/s] (type:float)
     |      xmag                      : X Magnetic field [gauss] (type:float)
     |      ymag                      : Y Magnetic field [gauss] (type:float)
     |      zmag                      : Z Magnetic field [gauss] (type:float)
     |      abs_pressure              : Absolute pressure [mbar] (type:float)
     |      diff_pressure             : Differential pressure [mbar] (type:float)
     |      pressure_alt              : Altitude calculated from pressure (type:float)
     |      temperature               : Temperature [degC] (type:float)
     |      fields_updated            : Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature (type:uint16_t)
     |  
     |  hil_actuator_controls_encode(self, time_usec, controls, mode, flags)
     |      Sent from autopilot to simulation. Hardware in the loop control
     |      outputs (replacement for HIL_CONTROLS)
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      controls                  : Control outputs -1 .. 1. Channel assignment depends on the simulated hardware. (type:float)
     |      mode                      : System mode. Includes arming state. (type:uint8_t, values:MAV_MODE_FLAG)
     |      flags                     : Flags as bitfield, reserved for future use. (type:uint64_t)
     |  
     |  hil_actuator_controls_send(self, time_usec, controls, mode, flags, force_mavlink1=False)
     |      Sent from autopilot to simulation. Hardware in the loop control
     |      outputs (replacement for HIL_CONTROLS)
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      controls                  : Control outputs -1 .. 1. Channel assignment depends on the simulated hardware. (type:float)
     |      mode                      : System mode. Includes arming state. (type:uint8_t, values:MAV_MODE_FLAG)
     |      flags                     : Flags as bitfield, reserved for future use. (type:uint64_t)
     |  
     |  hil_controls_encode(self, time_usec, roll_ailerons, pitch_elevator, yaw_rudder, throttle, aux1, aux2, aux3, aux4, mode, nav_mode)
     |      Sent from autopilot to simulation. Hardware in the loop control
     |      outputs
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      roll_ailerons             : Control output -1 .. 1 (type:float)
     |      pitch_elevator            : Control output -1 .. 1 (type:float)
     |      yaw_rudder                : Control output -1 .. 1 (type:float)
     |      throttle                  : Throttle 0 .. 1 (type:float)
     |      aux1                      : Aux 1, -1 .. 1 (type:float)
     |      aux2                      : Aux 2, -1 .. 1 (type:float)
     |      aux3                      : Aux 3, -1 .. 1 (type:float)
     |      aux4                      : Aux 4, -1 .. 1 (type:float)
     |      mode                      : System mode. (type:uint8_t, values:MAV_MODE)
     |      nav_mode                  : Navigation mode (MAV_NAV_MODE) (type:uint8_t)
     |  
     |  hil_controls_send(self, time_usec, roll_ailerons, pitch_elevator, yaw_rudder, throttle, aux1, aux2, aux3, aux4, mode, nav_mode, force_mavlink1=False)
     |      Sent from autopilot to simulation. Hardware in the loop control
     |      outputs
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      roll_ailerons             : Control output -1 .. 1 (type:float)
     |      pitch_elevator            : Control output -1 .. 1 (type:float)
     |      yaw_rudder                : Control output -1 .. 1 (type:float)
     |      throttle                  : Throttle 0 .. 1 (type:float)
     |      aux1                      : Aux 1, -1 .. 1 (type:float)
     |      aux2                      : Aux 2, -1 .. 1 (type:float)
     |      aux3                      : Aux 3, -1 .. 1 (type:float)
     |      aux4                      : Aux 4, -1 .. 1 (type:float)
     |      mode                      : System mode. (type:uint8_t, values:MAV_MODE)
     |      nav_mode                  : Navigation mode (MAV_NAV_MODE) (type:uint8_t)
     |  
     |  hil_gps_encode(self, time_usec, fix_type, lat, lon, alt, eph, epv, vel, vn, ve, vd, cog, satellites_visible)
     |      The global position, as returned by the Global Positioning System
     |      (GPS). This is                  NOT the global
     |      position estimate of the sytem, but rather a RAW
     |      sensor value. See message GLOBAL_POSITION for the
     |      global position estimate.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      fix_type                  : 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix. (type:uint8_t)
     |      lat                       : Latitude (WGS84) [degE7] (type:int32_t)
     |      lon                       : Longitude (WGS84) [degE7] (type:int32_t)
     |      alt                       : Altitude (MSL). Positive for up. [mm] (type:int32_t)
     |      eph                       : GPS HDOP horizontal dilution of position. If unknown, set to: 65535 [cm] (type:uint16_t)
     |      epv                       : GPS VDOP vertical dilution of position. If unknown, set to: 65535 [cm] (type:uint16_t)
     |      vel                       : GPS ground speed. If unknown, set to: 65535 [cm/s] (type:uint16_t)
     |      vn                        : GPS velocity in north direction in earth-fixed NED frame [cm/s] (type:int16_t)
     |      ve                        : GPS velocity in east direction in earth-fixed NED frame [cm/s] (type:int16_t)
     |      vd                        : GPS velocity in down direction in earth-fixed NED frame [cm/s] (type:int16_t)
     |      cog                       : Course over ground (NOT heading, but direction of movement), 0.0..359.99 degrees. If unknown, set to: 65535 [cdeg] (type:uint16_t)
     |      satellites_visible        : Number of satellites visible. If unknown, set to 255 (type:uint8_t)
     |  
     |  hil_gps_send(self, time_usec, fix_type, lat, lon, alt, eph, epv, vel, vn, ve, vd, cog, satellites_visible, force_mavlink1=False)
     |      The global position, as returned by the Global Positioning System
     |      (GPS). This is                  NOT the global
     |      position estimate of the sytem, but rather a RAW
     |      sensor value. See message GLOBAL_POSITION for the
     |      global position estimate.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      fix_type                  : 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix. (type:uint8_t)
     |      lat                       : Latitude (WGS84) [degE7] (type:int32_t)
     |      lon                       : Longitude (WGS84) [degE7] (type:int32_t)
     |      alt                       : Altitude (MSL). Positive for up. [mm] (type:int32_t)
     |      eph                       : GPS HDOP horizontal dilution of position. If unknown, set to: 65535 [cm] (type:uint16_t)
     |      epv                       : GPS VDOP vertical dilution of position. If unknown, set to: 65535 [cm] (type:uint16_t)
     |      vel                       : GPS ground speed. If unknown, set to: 65535 [cm/s] (type:uint16_t)
     |      vn                        : GPS velocity in north direction in earth-fixed NED frame [cm/s] (type:int16_t)
     |      ve                        : GPS velocity in east direction in earth-fixed NED frame [cm/s] (type:int16_t)
     |      vd                        : GPS velocity in down direction in earth-fixed NED frame [cm/s] (type:int16_t)
     |      cog                       : Course over ground (NOT heading, but direction of movement), 0.0..359.99 degrees. If unknown, set to: 65535 [cdeg] (type:uint16_t)
     |      satellites_visible        : Number of satellites visible. If unknown, set to 255 (type:uint8_t)
     |  
     |  hil_optical_flow_encode(self, time_usec, sensor_id, integration_time_us, integrated_x, integrated_y, integrated_xgyro, integrated_ygyro, integrated_zgyro, temperature, quality, time_delta_distance_us, distance)
     |      Simulated optical flow from a flow sensor (e.g. PX4FLOW or optical
     |      mouse sensor)
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      sensor_id                 : Sensor ID (type:uint8_t)
     |      integration_time_us        : Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the. [us] (type:uint32_t)
     |      integrated_x              : Flow in radians around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.) [rad] (type:float)
     |      integrated_y              : Flow in radians around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.) [rad] (type:float)
     |      integrated_xgyro          : RH rotation around X axis [rad] (type:float)
     |      integrated_ygyro          : RH rotation around Y axis [rad] (type:float)
     |      integrated_zgyro          : RH rotation around Z axis [rad] (type:float)
     |      temperature               : Temperature [cdegC] (type:int16_t)
     |      quality                   : Optical flow quality / confidence. 0: no valid flow, 255: maximum quality (type:uint8_t)
     |      time_delta_distance_us        : Time since the distance was sampled. [us] (type:uint32_t)
     |      distance                  : Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance. [m] (type:float)
     |  
     |  hil_optical_flow_send(self, time_usec, sensor_id, integration_time_us, integrated_x, integrated_y, integrated_xgyro, integrated_ygyro, integrated_zgyro, temperature, quality, time_delta_distance_us, distance, force_mavlink1=False)
     |      Simulated optical flow from a flow sensor (e.g. PX4FLOW or optical
     |      mouse sensor)
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      sensor_id                 : Sensor ID (type:uint8_t)
     |      integration_time_us        : Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the. [us] (type:uint32_t)
     |      integrated_x              : Flow in radians around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.) [rad] (type:float)
     |      integrated_y              : Flow in radians around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.) [rad] (type:float)
     |      integrated_xgyro          : RH rotation around X axis [rad] (type:float)
     |      integrated_ygyro          : RH rotation around Y axis [rad] (type:float)
     |      integrated_zgyro          : RH rotation around Z axis [rad] (type:float)
     |      temperature               : Temperature [cdegC] (type:int16_t)
     |      quality                   : Optical flow quality / confidence. 0: no valid flow, 255: maximum quality (type:uint8_t)
     |      time_delta_distance_us        : Time since the distance was sampled. [us] (type:uint32_t)
     |      distance                  : Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance. [m] (type:float)
     |  
     |  hil_rc_inputs_raw_encode(self, time_usec, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, chan9_raw, chan10_raw, chan11_raw, chan12_raw, rssi)
     |      Sent from simulation to autopilot. The RAW values of the RC channels
     |      received. The standard PPM modulation is as follows:
     |      1000 microseconds: 0%, 2000 microseconds: 100%.
     |      Individual receivers/transmitters might violate this
     |      specification.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      chan1_raw                 : RC channel 1 value [us] (type:uint16_t)
     |      chan2_raw                 : RC channel 2 value [us] (type:uint16_t)
     |      chan3_raw                 : RC channel 3 value [us] (type:uint16_t)
     |      chan4_raw                 : RC channel 4 value [us] (type:uint16_t)
     |      chan5_raw                 : RC channel 5 value [us] (type:uint16_t)
     |      chan6_raw                 : RC channel 6 value [us] (type:uint16_t)
     |      chan7_raw                 : RC channel 7 value [us] (type:uint16_t)
     |      chan8_raw                 : RC channel 8 value [us] (type:uint16_t)
     |      chan9_raw                 : RC channel 9 value [us] (type:uint16_t)
     |      chan10_raw                : RC channel 10 value [us] (type:uint16_t)
     |      chan11_raw                : RC channel 11 value [us] (type:uint16_t)
     |      chan12_raw                : RC channel 12 value [us] (type:uint16_t)
     |      rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
     |  
     |  hil_rc_inputs_raw_send(self, time_usec, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, chan9_raw, chan10_raw, chan11_raw, chan12_raw, rssi, force_mavlink1=False)
     |      Sent from simulation to autopilot. The RAW values of the RC channels
     |      received. The standard PPM modulation is as follows:
     |      1000 microseconds: 0%, 2000 microseconds: 100%.
     |      Individual receivers/transmitters might violate this
     |      specification.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      chan1_raw                 : RC channel 1 value [us] (type:uint16_t)
     |      chan2_raw                 : RC channel 2 value [us] (type:uint16_t)
     |      chan3_raw                 : RC channel 3 value [us] (type:uint16_t)
     |      chan4_raw                 : RC channel 4 value [us] (type:uint16_t)
     |      chan5_raw                 : RC channel 5 value [us] (type:uint16_t)
     |      chan6_raw                 : RC channel 6 value [us] (type:uint16_t)
     |      chan7_raw                 : RC channel 7 value [us] (type:uint16_t)
     |      chan8_raw                 : RC channel 8 value [us] (type:uint16_t)
     |      chan9_raw                 : RC channel 9 value [us] (type:uint16_t)
     |      chan10_raw                : RC channel 10 value [us] (type:uint16_t)
     |      chan11_raw                : RC channel 11 value [us] (type:uint16_t)
     |      chan12_raw                : RC channel 12 value [us] (type:uint16_t)
     |      rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
     |  
     |  hil_sensor_encode(self, time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, abs_pressure, diff_pressure, pressure_alt, temperature, fields_updated)
     |      The IMU readings in SI units in NED body frame
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      xacc                      : X acceleration [m/s/s] (type:float)
     |      yacc                      : Y acceleration [m/s/s] (type:float)
     |      zacc                      : Z acceleration [m/s/s] (type:float)
     |      xgyro                     : Angular speed around X axis in body frame [rad/s] (type:float)
     |      ygyro                     : Angular speed around Y axis in body frame [rad/s] (type:float)
     |      zgyro                     : Angular speed around Z axis in body frame [rad/s] (type:float)
     |      xmag                      : X Magnetic field [gauss] (type:float)
     |      ymag                      : Y Magnetic field [gauss] (type:float)
     |      zmag                      : Z Magnetic field [gauss] (type:float)
     |      abs_pressure              : Absolute pressure [mbar] (type:float)
     |      diff_pressure             : Differential pressure (airspeed) [mbar] (type:float)
     |      pressure_alt              : Altitude calculated from pressure (type:float)
     |      temperature               : Temperature [degC] (type:float)
     |      fields_updated            : Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature, bit 31: full reset of attitude/position/velocities/etc was performed in sim. (type:uint32_t)
     |  
     |  hil_sensor_send(self, time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, abs_pressure, diff_pressure, pressure_alt, temperature, fields_updated, force_mavlink1=False)
     |      The IMU readings in SI units in NED body frame
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      xacc                      : X acceleration [m/s/s] (type:float)
     |      yacc                      : Y acceleration [m/s/s] (type:float)
     |      zacc                      : Z acceleration [m/s/s] (type:float)
     |      xgyro                     : Angular speed around X axis in body frame [rad/s] (type:float)
     |      ygyro                     : Angular speed around Y axis in body frame [rad/s] (type:float)
     |      zgyro                     : Angular speed around Z axis in body frame [rad/s] (type:float)
     |      xmag                      : X Magnetic field [gauss] (type:float)
     |      ymag                      : Y Magnetic field [gauss] (type:float)
     |      zmag                      : Z Magnetic field [gauss] (type:float)
     |      abs_pressure              : Absolute pressure [mbar] (type:float)
     |      diff_pressure             : Differential pressure (airspeed) [mbar] (type:float)
     |      pressure_alt              : Altitude calculated from pressure (type:float)
     |      temperature               : Temperature [degC] (type:float)
     |      fields_updated            : Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature, bit 31: full reset of attitude/position/velocities/etc was performed in sim. (type:uint32_t)
     |  
     |  hil_state_encode(self, time_usec, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, xacc, yacc, zacc)
     |      Sent from simulation to autopilot. This packet is useful for high
     |      throughput applications such as hardware in the loop
     |      simulations.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      roll                      : Roll angle [rad] (type:float)
     |      pitch                     : Pitch angle [rad] (type:float)
     |      yaw                       : Yaw angle [rad] (type:float)
     |      rollspeed                 : Body frame roll / phi angular speed [rad/s] (type:float)
     |      pitchspeed                : Body frame pitch / theta angular speed [rad/s] (type:float)
     |      yawspeed                  : Body frame yaw / psi angular speed [rad/s] (type:float)
     |      lat                       : Latitude [degE7] (type:int32_t)
     |      lon                       : Longitude [degE7] (type:int32_t)
     |      alt                       : Altitude [mm] (type:int32_t)
     |      vx                        : Ground X Speed (Latitude) [cm/s] (type:int16_t)
     |      vy                        : Ground Y Speed (Longitude) [cm/s] (type:int16_t)
     |      vz                        : Ground Z Speed (Altitude) [cm/s] (type:int16_t)
     |      xacc                      : X acceleration [mG] (type:int16_t)
     |      yacc                      : Y acceleration [mG] (type:int16_t)
     |      zacc                      : Z acceleration [mG] (type:int16_t)
     |  
     |  hil_state_quaternion_encode(self, time_usec, attitude_quaternion, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, ind_airspeed, true_airspeed, xacc, yacc, zacc)
     |      Sent from simulation to autopilot, avoids in contrast to HIL_STATE
     |      singularities. This packet is useful for high
     |      throughput applications such as hardware in the loop
     |      simulations.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      attitude_quaternion        : Vehicle attitude expressed as normalized quaternion in w, x, y, z order (with 1 0 0 0 being the null-rotation) (type:float)
     |      rollspeed                 : Body frame roll / phi angular speed [rad/s] (type:float)
     |      pitchspeed                : Body frame pitch / theta angular speed [rad/s] (type:float)
     |      yawspeed                  : Body frame yaw / psi angular speed [rad/s] (type:float)
     |      lat                       : Latitude [degE7] (type:int32_t)
     |      lon                       : Longitude [degE7] (type:int32_t)
     |      alt                       : Altitude [mm] (type:int32_t)
     |      vx                        : Ground X Speed (Latitude) [cm/s] (type:int16_t)
     |      vy                        : Ground Y Speed (Longitude) [cm/s] (type:int16_t)
     |      vz                        : Ground Z Speed (Altitude) [cm/s] (type:int16_t)
     |      ind_airspeed              : Indicated airspeed [cm/s] (type:uint16_t)
     |      true_airspeed             : True airspeed [cm/s] (type:uint16_t)
     |      xacc                      : X acceleration [mG] (type:int16_t)
     |      yacc                      : Y acceleration [mG] (type:int16_t)
     |      zacc                      : Z acceleration [mG] (type:int16_t)
     |  
     |  hil_state_quaternion_send(self, time_usec, attitude_quaternion, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, ind_airspeed, true_airspeed, xacc, yacc, zacc, force_mavlink1=False)
     |      Sent from simulation to autopilot, avoids in contrast to HIL_STATE
     |      singularities. This packet is useful for high
     |      throughput applications such as hardware in the loop
     |      simulations.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      attitude_quaternion        : Vehicle attitude expressed as normalized quaternion in w, x, y, z order (with 1 0 0 0 being the null-rotation) (type:float)
     |      rollspeed                 : Body frame roll / phi angular speed [rad/s] (type:float)
     |      pitchspeed                : Body frame pitch / theta angular speed [rad/s] (type:float)
     |      yawspeed                  : Body frame yaw / psi angular speed [rad/s] (type:float)
     |      lat                       : Latitude [degE7] (type:int32_t)
     |      lon                       : Longitude [degE7] (type:int32_t)
     |      alt                       : Altitude [mm] (type:int32_t)
     |      vx                        : Ground X Speed (Latitude) [cm/s] (type:int16_t)
     |      vy                        : Ground Y Speed (Longitude) [cm/s] (type:int16_t)
     |      vz                        : Ground Z Speed (Altitude) [cm/s] (type:int16_t)
     |      ind_airspeed              : Indicated airspeed [cm/s] (type:uint16_t)
     |      true_airspeed             : True airspeed [cm/s] (type:uint16_t)
     |      xacc                      : X acceleration [mG] (type:int16_t)
     |      yacc                      : Y acceleration [mG] (type:int16_t)
     |      zacc                      : Z acceleration [mG] (type:int16_t)
     |  
     |  hil_state_send(self, time_usec, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, xacc, yacc, zacc, force_mavlink1=False)
     |      Sent from simulation to autopilot. This packet is useful for high
     |      throughput applications such as hardware in the loop
     |      simulations.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      roll                      : Roll angle [rad] (type:float)
     |      pitch                     : Pitch angle [rad] (type:float)
     |      yaw                       : Yaw angle [rad] (type:float)
     |      rollspeed                 : Body frame roll / phi angular speed [rad/s] (type:float)
     |      pitchspeed                : Body frame pitch / theta angular speed [rad/s] (type:float)
     |      yawspeed                  : Body frame yaw / psi angular speed [rad/s] (type:float)
     |      lat                       : Latitude [degE7] (type:int32_t)
     |      lon                       : Longitude [degE7] (type:int32_t)
     |      alt                       : Altitude [mm] (type:int32_t)
     |      vx                        : Ground X Speed (Latitude) [cm/s] (type:int16_t)
     |      vy                        : Ground Y Speed (Longitude) [cm/s] (type:int16_t)
     |      vz                        : Ground Z Speed (Altitude) [cm/s] (type:int16_t)
     |      xacc                      : X acceleration [mG] (type:int16_t)
     |      yacc                      : Y acceleration [mG] (type:int16_t)
     |      zacc                      : Z acceleration [mG] (type:int16_t)
     |  
     |  home_position_encode(self, latitude, longitude, altitude, x, y, z, q, approach_x, approach_y, approach_z)
     |      This message can be requested by sending the MAV_CMD_GET_HOME_POSITION
     |      command. The position the system will return to and
     |      land on. The position is set automatically by the
     |      system during the takeoff in case it was not
     |      explicitly set by the operator before or after. The
     |      position the system will return to and land on. The
     |      global and local positions encode the position in the
     |      respective coordinate frames, while the q parameter
     |      encodes the orientation of the surface. Under normal
     |      conditions it describes the heading and terrain slope,
     |      which can be used by the aircraft to adjust the
     |      approach. The approach 3D vector describes the point
     |      to which the system should fly in normal flight mode
     |      and then perform a landing sequence along the vector.
     |      
     |      latitude                  : Latitude (WGS84) [degE7] (type:int32_t)
     |      longitude                 : Longitude (WGS84) [degE7] (type:int32_t)
     |      altitude                  : Altitude (MSL). Positive for up. [mm] (type:int32_t)
     |      x                         : Local X position of this position in the local coordinate frame [m] (type:float)
     |      y                         : Local Y position of this position in the local coordinate frame [m] (type:float)
     |      z                         : Local Z position of this position in the local coordinate frame [m] (type:float)
     |      q                         : World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground (type:float)
     |      approach_x                : Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
     |      approach_y                : Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
     |      approach_z                : Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
     |  
     |  home_position_send(self, latitude, longitude, altitude, x, y, z, q, approach_x, approach_y, approach_z, force_mavlink1=False)
     |      This message can be requested by sending the MAV_CMD_GET_HOME_POSITION
     |      command. The position the system will return to and
     |      land on. The position is set automatically by the
     |      system during the takeoff in case it was not
     |      explicitly set by the operator before or after. The
     |      position the system will return to and land on. The
     |      global and local positions encode the position in the
     |      respective coordinate frames, while the q parameter
     |      encodes the orientation of the surface. Under normal
     |      conditions it describes the heading and terrain slope,
     |      which can be used by the aircraft to adjust the
     |      approach. The approach 3D vector describes the point
     |      to which the system should fly in normal flight mode
     |      and then perform a landing sequence along the vector.
     |      
     |      latitude                  : Latitude (WGS84) [degE7] (type:int32_t)
     |      longitude                 : Longitude (WGS84) [degE7] (type:int32_t)
     |      altitude                  : Altitude (MSL). Positive for up. [mm] (type:int32_t)
     |      x                         : Local X position of this position in the local coordinate frame [m] (type:float)
     |      y                         : Local Y position of this position in the local coordinate frame [m] (type:float)
     |      z                         : Local Z position of this position in the local coordinate frame [m] (type:float)
     |      q                         : World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground (type:float)
     |      approach_x                : Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
     |      approach_y                : Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
     |      approach_z                : Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
     |  
     |  hwstatus_encode(self, Vcc, I2Cerr)
     |      Status of key hardware.
     |      
     |      Vcc                       : Board voltage. [mV] (type:uint16_t)
     |      I2Cerr                    : I2C error count. (type:uint8_t)
     |  
     |  hwstatus_send(self, Vcc, I2Cerr, force_mavlink1=False)
     |      Status of key hardware.
     |      
     |      Vcc                       : Board voltage. [mV] (type:uint16_t)
     |      I2Cerr                    : I2C error count. (type:uint8_t)
     |  
     |  landing_target_encode(self, time_usec, target_num, frame, angle_x, angle_y, distance, size_x, size_y)
     |      The location of a landing target. See:
     |      https://mavlink.io/en/services/landing_target.html
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      target_num                : The ID of the target if multiple targets are present (type:uint8_t)
     |      frame                     : Coordinate frame used for following fields. (type:uint8_t, values:MAV_FRAME)
     |      angle_x                   : X-axis angular offset of the target from the center of the image [rad] (type:float)
     |      angle_y                   : Y-axis angular offset of the target from the center of the image [rad] (type:float)
     |      distance                  : Distance to the target from the vehicle [m] (type:float)
     |      size_x                    : Size of target along x-axis [rad] (type:float)
     |      size_y                    : Size of target along y-axis [rad] (type:float)
     |  
     |  landing_target_send(self, time_usec, target_num, frame, angle_x, angle_y, distance, size_x, size_y, force_mavlink1=False)
     |      The location of a landing target. See:
     |      https://mavlink.io/en/services/landing_target.html
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      target_num                : The ID of the target if multiple targets are present (type:uint8_t)
     |      frame                     : Coordinate frame used for following fields. (type:uint8_t, values:MAV_FRAME)
     |      angle_x                   : X-axis angular offset of the target from the center of the image [rad] (type:float)
     |      angle_y                   : Y-axis angular offset of the target from the center of the image [rad] (type:float)
     |      distance                  : Distance to the target from the vehicle [m] (type:float)
     |      size_x                    : Size of target along x-axis [rad] (type:float)
     |      size_y                    : Size of target along y-axis [rad] (type:float)
     |  
     |  led_control_encode(self, target_system, target_component, instance, pattern, custom_len, custom_bytes)
     |      Control vehicle LEDs.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      instance                  : Instance (LED instance to control or 255 for all LEDs). (type:uint8_t)
     |      pattern                   : Pattern (see LED_PATTERN_ENUM). (type:uint8_t)
     |      custom_len                : Custom Byte Length. (type:uint8_t)
     |      custom_bytes              : Custom Bytes. (type:uint8_t)
     |  
     |  led_control_send(self, target_system, target_component, instance, pattern, custom_len, custom_bytes, force_mavlink1=False)
     |      Control vehicle LEDs.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      instance                  : Instance (LED instance to control or 255 for all LEDs). (type:uint8_t)
     |      pattern                   : Pattern (see LED_PATTERN_ENUM). (type:uint8_t)
     |      custom_len                : Custom Byte Length. (type:uint8_t)
     |      custom_bytes              : Custom Bytes. (type:uint8_t)
     |  
     |  limits_status_encode(self, limits_state, last_trigger, last_action, last_recovery, last_clear, breach_count, mods_enabled, mods_required, mods_triggered)
     |      Status of AP_Limits. Sent in extended status stream when AP_Limits is
     |      enabled.
     |      
     |      limits_state              : State of AP_Limits. (type:uint8_t, values:LIMITS_STATE)
     |      last_trigger              : Time (since boot) of last breach. [ms] (type:uint32_t)
     |      last_action               : Time (since boot) of last recovery action. [ms] (type:uint32_t)
     |      last_recovery             : Time (since boot) of last successful recovery. [ms] (type:uint32_t)
     |      last_clear                : Time (since boot) of last all-clear. [ms] (type:uint32_t)
     |      breach_count              : Number of fence breaches. (type:uint16_t)
     |      mods_enabled              : AP_Limit_Module bitfield of enabled modules. (type:uint8_t, values:LIMIT_MODULE)
     |      mods_required             : AP_Limit_Module bitfield of required modules. (type:uint8_t, values:LIMIT_MODULE)
     |      mods_triggered            : AP_Limit_Module bitfield of triggered modules. (type:uint8_t, values:LIMIT_MODULE)
     |  
     |  limits_status_send(self, limits_state, last_trigger, last_action, last_recovery, last_clear, breach_count, mods_enabled, mods_required, mods_triggered, force_mavlink1=False)
     |      Status of AP_Limits. Sent in extended status stream when AP_Limits is
     |      enabled.
     |      
     |      limits_state              : State of AP_Limits. (type:uint8_t, values:LIMITS_STATE)
     |      last_trigger              : Time (since boot) of last breach. [ms] (type:uint32_t)
     |      last_action               : Time (since boot) of last recovery action. [ms] (type:uint32_t)
     |      last_recovery             : Time (since boot) of last successful recovery. [ms] (type:uint32_t)
     |      last_clear                : Time (since boot) of last all-clear. [ms] (type:uint32_t)
     |      breach_count              : Number of fence breaches. (type:uint16_t)
     |      mods_enabled              : AP_Limit_Module bitfield of enabled modules. (type:uint8_t, values:LIMIT_MODULE)
     |      mods_required             : AP_Limit_Module bitfield of required modules. (type:uint8_t, values:LIMIT_MODULE)
     |      mods_triggered            : AP_Limit_Module bitfield of triggered modules. (type:uint8_t, values:LIMIT_MODULE)
     |  
     |  local_position_ned_cov_encode(self, time_usec, estimator_type, x, y, z, vx, vy, vz, ax, ay, az, covariance)
     |      The filtered local position (e.g. fused computer vision and
     |      accelerometers). Coordinate frame is right-handed,
     |      Z-axis down (aeronautical frame, NED / north-east-down
     |      convention)
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      estimator_type            : Class id of the estimator this estimate originated from. (type:uint8_t, values:MAV_ESTIMATOR_TYPE)
     |      x                         : X Position [m] (type:float)
     |      y                         : Y Position [m] (type:float)
     |      z                         : Z Position [m] (type:float)
     |      vx                        : X Speed [m/s] (type:float)
     |      vy                        : Y Speed [m/s] (type:float)
     |      vz                        : Z Speed [m/s] (type:float)
     |      ax                        : X Acceleration [m/s/s] (type:float)
     |      ay                        : Y Acceleration [m/s/s] (type:float)
     |      az                        : Z Acceleration [m/s/s] (type:float)
     |      covariance                : Row-major representation of position, velocity and acceleration 9x9 cross-covariance matrix upper right triangle (states: x, y, z, vx, vy, vz, ax, ay, az; first nine entries are the first ROW, next eight entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (type:float)
     |  
     |  local_position_ned_cov_send(self, time_usec, estimator_type, x, y, z, vx, vy, vz, ax, ay, az, covariance, force_mavlink1=False)
     |      The filtered local position (e.g. fused computer vision and
     |      accelerometers). Coordinate frame is right-handed,
     |      Z-axis down (aeronautical frame, NED / north-east-down
     |      convention)
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      estimator_type            : Class id of the estimator this estimate originated from. (type:uint8_t, values:MAV_ESTIMATOR_TYPE)
     |      x                         : X Position [m] (type:float)
     |      y                         : Y Position [m] (type:float)
     |      z                         : Z Position [m] (type:float)
     |      vx                        : X Speed [m/s] (type:float)
     |      vy                        : Y Speed [m/s] (type:float)
     |      vz                        : Z Speed [m/s] (type:float)
     |      ax                        : X Acceleration [m/s/s] (type:float)
     |      ay                        : Y Acceleration [m/s/s] (type:float)
     |      az                        : Z Acceleration [m/s/s] (type:float)
     |      covariance                : Row-major representation of position, velocity and acceleration 9x9 cross-covariance matrix upper right triangle (states: x, y, z, vx, vy, vz, ax, ay, az; first nine entries are the first ROW, next eight entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (type:float)
     |  
     |  local_position_ned_encode(self, time_boot_ms, x, y, z, vx, vy, vz)
     |      The filtered local position (e.g. fused computer vision and
     |      accelerometers). Coordinate frame is right-handed,
     |      Z-axis down (aeronautical frame, NED / north-east-down
     |      convention)
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      x                         : X Position [m] (type:float)
     |      y                         : Y Position [m] (type:float)
     |      z                         : Z Position [m] (type:float)
     |      vx                        : X Speed [m/s] (type:float)
     |      vy                        : Y Speed [m/s] (type:float)
     |      vz                        : Z Speed [m/s] (type:float)
     |  
     |  local_position_ned_send(self, time_boot_ms, x, y, z, vx, vy, vz, force_mavlink1=False)
     |      The filtered local position (e.g. fused computer vision and
     |      accelerometers). Coordinate frame is right-handed,
     |      Z-axis down (aeronautical frame, NED / north-east-down
     |      convention)
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      x                         : X Position [m] (type:float)
     |      y                         : Y Position [m] (type:float)
     |      z                         : Z Position [m] (type:float)
     |      vx                        : X Speed [m/s] (type:float)
     |      vy                        : Y Speed [m/s] (type:float)
     |      vz                        : Z Speed [m/s] (type:float)
     |  
     |  local_position_ned_system_global_offset_encode(self, time_boot_ms, x, y, z, roll, pitch, yaw)
     |      The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages
     |      of MAV X and the global coordinate frame in NED
     |      coordinates. Coordinate frame is right-handed, Z-axis
     |      down (aeronautical frame, NED / north-east-down
     |      convention)
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      x                         : X Position [m] (type:float)
     |      y                         : Y Position [m] (type:float)
     |      z                         : Z Position [m] (type:float)
     |      roll                      : Roll [rad] (type:float)
     |      pitch                     : Pitch [rad] (type:float)
     |      yaw                       : Yaw [rad] (type:float)
     |  
     |  local_position_ned_system_global_offset_send(self, time_boot_ms, x, y, z, roll, pitch, yaw, force_mavlink1=False)
     |      The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages
     |      of MAV X and the global coordinate frame in NED
     |      coordinates. Coordinate frame is right-handed, Z-axis
     |      down (aeronautical frame, NED / north-east-down
     |      convention)
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      x                         : X Position [m] (type:float)
     |      y                         : Y Position [m] (type:float)
     |      z                         : Z Position [m] (type:float)
     |      roll                      : Roll [rad] (type:float)
     |      pitch                     : Pitch [rad] (type:float)
     |      yaw                       : Yaw [rad] (type:float)
     |  
     |  log_data_encode(self, id, ofs, count, data)
     |      Reply to LOG_REQUEST_DATA
     |      
     |      id                        : Log id (from LOG_ENTRY reply) (type:uint16_t)
     |      ofs                       : Offset into the log (type:uint32_t)
     |      count                     : Number of bytes (zero for end of log) [bytes] (type:uint8_t)
     |      data                      : log data (type:uint8_t)
     |  
     |  log_data_send(self, id, ofs, count, data, force_mavlink1=False)
     |      Reply to LOG_REQUEST_DATA
     |      
     |      id                        : Log id (from LOG_ENTRY reply) (type:uint16_t)
     |      ofs                       : Offset into the log (type:uint32_t)
     |      count                     : Number of bytes (zero for end of log) [bytes] (type:uint8_t)
     |      data                      : log data (type:uint8_t)
     |  
     |  log_entry_encode(self, id, num_logs, last_log_num, time_utc, size)
     |      Reply to LOG_REQUEST_LIST
     |      
     |      id                        : Log id (type:uint16_t)
     |      num_logs                  : Total number of logs (type:uint16_t)
     |      last_log_num              : High log number (type:uint16_t)
     |      time_utc                  : UTC timestamp of log since 1970, or 0 if not available [s] (type:uint32_t)
     |      size                      : Size of the log (may be approximate) [bytes] (type:uint32_t)
     |  
     |  log_entry_send(self, id, num_logs, last_log_num, time_utc, size, force_mavlink1=False)
     |      Reply to LOG_REQUEST_LIST
     |      
     |      id                        : Log id (type:uint16_t)
     |      num_logs                  : Total number of logs (type:uint16_t)
     |      last_log_num              : High log number (type:uint16_t)
     |      time_utc                  : UTC timestamp of log since 1970, or 0 if not available [s] (type:uint32_t)
     |      size                      : Size of the log (may be approximate) [bytes] (type:uint32_t)
     |  
     |  log_erase_encode(self, target_system, target_component)
     |      Erase all logs
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |  
     |  log_erase_send(self, target_system, target_component, force_mavlink1=False)
     |      Erase all logs
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |  
     |  log_request_data_encode(self, target_system, target_component, id, ofs, count)
     |      Request a chunk of a log
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      id                        : Log id (from LOG_ENTRY reply) (type:uint16_t)
     |      ofs                       : Offset into the log (type:uint32_t)
     |      count                     : Number of bytes [bytes] (type:uint32_t)
     |  
     |  log_request_data_send(self, target_system, target_component, id, ofs, count, force_mavlink1=False)
     |      Request a chunk of a log
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      id                        : Log id (from LOG_ENTRY reply) (type:uint16_t)
     |      ofs                       : Offset into the log (type:uint32_t)
     |      count                     : Number of bytes [bytes] (type:uint32_t)
     |  
     |  log_request_end_encode(self, target_system, target_component)
     |      Stop log transfer and resume normal logging
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |  
     |  log_request_end_send(self, target_system, target_component, force_mavlink1=False)
     |      Stop log transfer and resume normal logging
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |  
     |  log_request_list_encode(self, target_system, target_component, start, end)
     |      Request a list of available logs. On some systems calling this may
     |      stop on-board logging until LOG_REQUEST_END is called.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      start                     : First log id (0 for first available) (type:uint16_t)
     |      end                       : Last log id (0xffff for last available) (type:uint16_t)
     |  
     |  log_request_list_send(self, target_system, target_component, start, end, force_mavlink1=False)
     |      Request a list of available logs. On some systems calling this may
     |      stop on-board logging until LOG_REQUEST_END is called.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      start                     : First log id (0 for first available) (type:uint16_t)
     |      end                       : Last log id (0xffff for last available) (type:uint16_t)
     |  
     |  mag_cal_progress_encode(self, compass_id, cal_mask, cal_status, attempt, completion_pct, completion_mask, direction_x, direction_y, direction_z)
     |      Reports progress of compass calibration.
     |      
     |      compass_id                : Compass being calibrated. (type:uint8_t)
     |      cal_mask                  : Bitmask of compasses being calibrated. (type:uint8_t)
     |      cal_status                : Calibration Status. (type:uint8_t, values:MAG_CAL_STATUS)
     |      attempt                   : Attempt number. (type:uint8_t)
     |      completion_pct            : Completion percentage. [%] (type:uint8_t)
     |      completion_mask           : Bitmask of sphere sections (see http://en.wikipedia.org/wiki/Geodesic_grid). (type:uint8_t)
     |      direction_x               : Body frame direction vector for display. (type:float)
     |      direction_y               : Body frame direction vector for display. (type:float)
     |      direction_z               : Body frame direction vector for display. (type:float)
     |  
     |  mag_cal_progress_send(self, compass_id, cal_mask, cal_status, attempt, completion_pct, completion_mask, direction_x, direction_y, direction_z, force_mavlink1=False)
     |      Reports progress of compass calibration.
     |      
     |      compass_id                : Compass being calibrated. (type:uint8_t)
     |      cal_mask                  : Bitmask of compasses being calibrated. (type:uint8_t)
     |      cal_status                : Calibration Status. (type:uint8_t, values:MAG_CAL_STATUS)
     |      attempt                   : Attempt number. (type:uint8_t)
     |      completion_pct            : Completion percentage. [%] (type:uint8_t)
     |      completion_mask           : Bitmask of sphere sections (see http://en.wikipedia.org/wiki/Geodesic_grid). (type:uint8_t)
     |      direction_x               : Body frame direction vector for display. (type:float)
     |      direction_y               : Body frame direction vector for display. (type:float)
     |      direction_z               : Body frame direction vector for display. (type:float)
     |  
     |  mag_cal_report_encode(self, compass_id, cal_mask, cal_status, autosaved, fitness, ofs_x, ofs_y, ofs_z, diag_x, diag_y, diag_z, offdiag_x, offdiag_y, offdiag_z)
     |      Reports results of completed compass calibration. Sent until
     |      MAG_CAL_ACK received.
     |      
     |      compass_id                : Compass being calibrated. (type:uint8_t)
     |      cal_mask                  : Bitmask of compasses being calibrated. (type:uint8_t)
     |      cal_status                : Calibration Status. (type:uint8_t, values:MAG_CAL_STATUS)
     |      autosaved                 : 0=requires a MAV_CMD_DO_ACCEPT_MAG_CAL, 1=saved to parameters. (type:uint8_t)
     |      fitness                   : RMS milligauss residuals. [mgauss] (type:float)
     |      ofs_x                     : X offset. (type:float)
     |      ofs_y                     : Y offset. (type:float)
     |      ofs_z                     : Z offset. (type:float)
     |      diag_x                    : X diagonal (matrix 11). (type:float)
     |      diag_y                    : Y diagonal (matrix 22). (type:float)
     |      diag_z                    : Z diagonal (matrix 33). (type:float)
     |      offdiag_x                 : X off-diagonal (matrix 12 and 21). (type:float)
     |      offdiag_y                 : Y off-diagonal (matrix 13 and 31). (type:float)
     |      offdiag_z                 : Z off-diagonal (matrix 32 and 23). (type:float)
     |  
     |  mag_cal_report_send(self, compass_id, cal_mask, cal_status, autosaved, fitness, ofs_x, ofs_y, ofs_z, diag_x, diag_y, diag_z, offdiag_x, offdiag_y, offdiag_z, force_mavlink1=False)
     |      Reports results of completed compass calibration. Sent until
     |      MAG_CAL_ACK received.
     |      
     |      compass_id                : Compass being calibrated. (type:uint8_t)
     |      cal_mask                  : Bitmask of compasses being calibrated. (type:uint8_t)
     |      cal_status                : Calibration Status. (type:uint8_t, values:MAG_CAL_STATUS)
     |      autosaved                 : 0=requires a MAV_CMD_DO_ACCEPT_MAG_CAL, 1=saved to parameters. (type:uint8_t)
     |      fitness                   : RMS milligauss residuals. [mgauss] (type:float)
     |      ofs_x                     : X offset. (type:float)
     |      ofs_y                     : Y offset. (type:float)
     |      ofs_z                     : Z offset. (type:float)
     |      diag_x                    : X diagonal (matrix 11). (type:float)
     |      diag_y                    : Y diagonal (matrix 22). (type:float)
     |      diag_z                    : Z diagonal (matrix 33). (type:float)
     |      offdiag_x                 : X off-diagonal (matrix 12 and 21). (type:float)
     |      offdiag_y                 : Y off-diagonal (matrix 13 and 31). (type:float)
     |      offdiag_z                 : Z off-diagonal (matrix 32 and 23). (type:float)
     |  
     |  manual_control_encode(self, target, x, y, z, r, buttons)
     |      This message provides an API for manually controlling the vehicle
     |      using standard joystick axes nomenclature, along with
     |      a joystick-like input device. Unused axes can be
     |      disabled an buttons are also transmit as boolean
     |      values of their
     |      
     |      target                    : The system to be controlled. (type:uint8_t)
     |      x                         : X-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to forward(1000)-backward(-1000) movement on a joystick and the pitch of a vehicle. (type:int16_t)
     |      y                         : Y-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to left(-1000)-right(1000) movement on a joystick and the roll of a vehicle. (type:int16_t)
     |      z                         : Z-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a separate slider movement with maximum being 1000 and minimum being -1000 on a joystick and the thrust of a vehicle. Positive values are positive thrust, negative values are negative thrust. (type:int16_t)
     |      r                         : R-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a twisting of the joystick, with counter-clockwise being 1000 and clockwise being -1000, and the yaw of a vehicle. (type:int16_t)
     |      buttons                   : A bitfield corresponding to the joystick buttons' current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 1. (type:uint16_t)
     |  
     |  manual_control_send(self, target, x, y, z, r, buttons, force_mavlink1=False)
     |      This message provides an API for manually controlling the vehicle
     |      using standard joystick axes nomenclature, along with
     |      a joystick-like input device. Unused axes can be
     |      disabled an buttons are also transmit as boolean
     |      values of their
     |      
     |      target                    : The system to be controlled. (type:uint8_t)
     |      x                         : X-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to forward(1000)-backward(-1000) movement on a joystick and the pitch of a vehicle. (type:int16_t)
     |      y                         : Y-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to left(-1000)-right(1000) movement on a joystick and the roll of a vehicle. (type:int16_t)
     |      z                         : Z-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a separate slider movement with maximum being 1000 and minimum being -1000 on a joystick and the thrust of a vehicle. Positive values are positive thrust, negative values are negative thrust. (type:int16_t)
     |      r                         : R-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a twisting of the joystick, with counter-clockwise being 1000 and clockwise being -1000, and the yaw of a vehicle. (type:int16_t)
     |      buttons                   : A bitfield corresponding to the joystick buttons' current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 1. (type:uint16_t)
     |  
     |  manual_setpoint_encode(self, time_boot_ms, roll, pitch, yaw, thrust, mode_switch, manual_override_switch)
     |      Setpoint in roll, pitch, yaw and thrust from the operator
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      roll                      : Desired roll rate [rad/s] (type:float)
     |      pitch                     : Desired pitch rate [rad/s] (type:float)
     |      yaw                       : Desired yaw rate [rad/s] (type:float)
     |      thrust                    : Collective thrust, normalized to 0 .. 1 (type:float)
     |      mode_switch               : Flight mode switch position, 0.. 255 (type:uint8_t)
     |      manual_override_switch        : Override mode switch position, 0.. 255 (type:uint8_t)
     |  
     |  manual_setpoint_send(self, time_boot_ms, roll, pitch, yaw, thrust, mode_switch, manual_override_switch, force_mavlink1=False)
     |      Setpoint in roll, pitch, yaw and thrust from the operator
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      roll                      : Desired roll rate [rad/s] (type:float)
     |      pitch                     : Desired pitch rate [rad/s] (type:float)
     |      yaw                       : Desired yaw rate [rad/s] (type:float)
     |      thrust                    : Collective thrust, normalized to 0 .. 1 (type:float)
     |      mode_switch               : Flight mode switch position, 0.. 255 (type:uint8_t)
     |      manual_override_switch        : Override mode switch position, 0.. 255 (type:uint8_t)
     |  
     |  meminfo_encode(self, brkval, freemem)
     |      State of APM memory.
     |      
     |      brkval                    : Heap top. (type:uint16_t)
     |      freemem                   : Free memory. [bytes] (type:uint16_t)
     |  
     |  meminfo_send(self, brkval, freemem, force_mavlink1=False)
     |      State of APM memory.
     |      
     |      brkval                    : Heap top. (type:uint16_t)
     |      freemem                   : Free memory. [bytes] (type:uint16_t)
     |  
     |  memory_vect_encode(self, address, ver, type, value)
     |      Send raw controller memory. The use of this message is discouraged for
     |      normal packets, but a quite efficient way for testing
     |      new messages and getting experimental debug output.
     |      
     |      address                   : Starting address of the debug variables (type:uint16_t)
     |      ver                       : Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below (type:uint8_t)
     |      type                      : Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14 (type:uint8_t)
     |      value                     : Memory contents at specified address (type:int8_t)
     |  
     |  memory_vect_send(self, address, ver, type, value, force_mavlink1=False)
     |      Send raw controller memory. The use of this message is discouraged for
     |      normal packets, but a quite efficient way for testing
     |      new messages and getting experimental debug output.
     |      
     |      address                   : Starting address of the debug variables (type:uint16_t)
     |      ver                       : Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below (type:uint8_t)
     |      type                      : Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14 (type:uint8_t)
     |      value                     : Memory contents at specified address (type:int8_t)
     |  
     |  message_interval_encode(self, message_id, interval_us)
     |      The interval between messages for a particular MAVLink message ID.
     |      This message is the response to the
     |      MAV_CMD_GET_MESSAGE_INTERVAL command. This interface
     |      replaces DATA_STREAM.
     |      
     |      message_id                : The ID of the requested MAVLink message. v1.0 is limited to 254 messages. (type:uint16_t)
     |      interval_us               : The interval between two messages. A value of -1 indicates this stream is disabled, 0 indicates it is not available, > 0 indicates the interval at which it is sent. [us] (type:int32_t)
     |  
     |  message_interval_send(self, message_id, interval_us, force_mavlink1=False)
     |      The interval between messages for a particular MAVLink message ID.
     |      This message is the response to the
     |      MAV_CMD_GET_MESSAGE_INTERVAL command. This interface
     |      replaces DATA_STREAM.
     |      
     |      message_id                : The ID of the requested MAVLink message. v1.0 is limited to 254 messages. (type:uint16_t)
     |      interval_us               : The interval between two messages. A value of -1 indicates this stream is disabled, 0 indicates it is not available, > 0 indicates the interval at which it is sent. [us] (type:int32_t)
     |  
     |  mission_ack_encode(self, target_system, target_component, type)
     |      Acknowledgment message during waypoint handling. The type field states
     |      if this message is a positive ack (type=0) or if an
     |      error happened (type=non-zero).
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      type                      : Mission result. (type:uint8_t, values:MAV_MISSION_RESULT)
     |  
     |  mission_ack_send(self, target_system, target_component, type, force_mavlink1=False)
     |      Acknowledgment message during waypoint handling. The type field states
     |      if this message is a positive ack (type=0) or if an
     |      error happened (type=non-zero).
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      type                      : Mission result. (type:uint8_t, values:MAV_MISSION_RESULT)
     |  
     |  mission_clear_all_encode(self, target_system, target_component)
     |      Delete all mission items at once.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |  
     |  mission_clear_all_send(self, target_system, target_component, force_mavlink1=False)
     |      Delete all mission items at once.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |  
     |  mission_count_encode(self, target_system, target_component, count)
     |      This message is emitted as response to MISSION_REQUEST_LIST by the MAV
     |      and to initiate a write transaction. The GCS can then
     |      request the individual mission item based on the
     |      knowledge of the total number of waypoints.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      count                     : Number of mission items in the sequence (type:uint16_t)
     |  
     |  mission_count_send(self, target_system, target_component, count, force_mavlink1=False)
     |      This message is emitted as response to MISSION_REQUEST_LIST by the MAV
     |      and to initiate a write transaction. The GCS can then
     |      request the individual mission item based on the
     |      knowledge of the total number of waypoints.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      count                     : Number of mission items in the sequence (type:uint16_t)
     |  
     |  mission_current_encode(self, seq)
     |      Message that announces the sequence number of the current active
     |      mission item. The MAV will fly towards this mission
     |      item.
     |      
     |      seq                       : Sequence (type:uint16_t)
     |  
     |  mission_current_send(self, seq, force_mavlink1=False)
     |      Message that announces the sequence number of the current active
     |      mission item. The MAV will fly towards this mission
     |      item.
     |      
     |      seq                       : Sequence (type:uint16_t)
     |  
     |  mission_item_encode(self, target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z)
     |      Message encoding a mission item. This message is emitted to announce
     |      the presence of a mission item and to set a mission
     |      item on the system. The mission item can be either in
     |      x, y, z meters (type: LOCAL) or x:lat, y:lon,
     |      z:altitude. Local frame is Z-down, right handed (NED),
     |      global frame is Z-up, right handed (ENU). See also
     |      https://mavlink.io/en/services/mission.html.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      seq                       : Sequence (type:uint16_t)
     |      frame                     : The coordinate system of the waypoint. (type:uint8_t, values:MAV_FRAME)
     |      command                   : The scheduled action for the waypoint. (type:uint16_t, values:MAV_CMD)
     |      current                   : false:0, true:1 (type:uint8_t)
     |      autocontinue              : Autocontinue to next waypoint (type:uint8_t)
     |      param1                    : PARAM1, see MAV_CMD enum (type:float)
     |      param2                    : PARAM2, see MAV_CMD enum (type:float)
     |      param3                    : PARAM3, see MAV_CMD enum (type:float)
     |      param4                    : PARAM4, see MAV_CMD enum (type:float)
     |      x                         : PARAM5 / local: X coordinate, global: latitude (type:float)
     |      y                         : PARAM6 / local: Y coordinate, global: longitude (type:float)
     |      z                         : PARAM7 / local: Z coordinate, global: altitude (relative or absolute, depending on frame). (type:float)
     |  
     |  mission_item_int_encode(self, target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z)
     |      Message encoding a mission item. This message is emitted to announce
     |      the presence of a mission item and to set a mission
     |      item on the system. The mission item can be either in
     |      x, y, z meters (type: LOCAL) or x:lat, y:lon,
     |      z:altitude. Local frame is Z-down, right handed (NED),
     |      global frame is Z-up, right handed (ENU). See also
     |      https://mavlink.io/en/services/mission.html.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      seq                       : Waypoint ID (sequence number). Starts at zero. Increases monotonically for each waypoint, no gaps in the sequence (0,1,2,3,4). (type:uint16_t)
     |      frame                     : The coordinate system of the waypoint. (type:uint8_t, values:MAV_FRAME)
     |      command                   : The scheduled action for the waypoint. (type:uint16_t, values:MAV_CMD)
     |      current                   : false:0, true:1 (type:uint8_t)
     |      autocontinue              : Autocontinue to next waypoint (type:uint8_t)
     |      param1                    : PARAM1, see MAV_CMD enum (type:float)
     |      param2                    : PARAM2, see MAV_CMD enum (type:float)
     |      param3                    : PARAM3, see MAV_CMD enum (type:float)
     |      param4                    : PARAM4, see MAV_CMD enum (type:float)
     |      x                         : PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7 (type:int32_t)
     |      y                         : PARAM6 / y position: local: x position in meters * 1e4, global: longitude in degrees *10^7 (type:int32_t)
     |      z                         : PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame. (type:float)
     |  
     |  mission_item_int_send(self, target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z, force_mavlink1=False)
     |      Message encoding a mission item. This message is emitted to announce
     |      the presence of a mission item and to set a mission
     |      item on the system. The mission item can be either in
     |      x, y, z meters (type: LOCAL) or x:lat, y:lon,
     |      z:altitude. Local frame is Z-down, right handed (NED),
     |      global frame is Z-up, right handed (ENU). See also
     |      https://mavlink.io/en/services/mission.html.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      seq                       : Waypoint ID (sequence number). Starts at zero. Increases monotonically for each waypoint, no gaps in the sequence (0,1,2,3,4). (type:uint16_t)
     |      frame                     : The coordinate system of the waypoint. (type:uint8_t, values:MAV_FRAME)
     |      command                   : The scheduled action for the waypoint. (type:uint16_t, values:MAV_CMD)
     |      current                   : false:0, true:1 (type:uint8_t)
     |      autocontinue              : Autocontinue to next waypoint (type:uint8_t)
     |      param1                    : PARAM1, see MAV_CMD enum (type:float)
     |      param2                    : PARAM2, see MAV_CMD enum (type:float)
     |      param3                    : PARAM3, see MAV_CMD enum (type:float)
     |      param4                    : PARAM4, see MAV_CMD enum (type:float)
     |      x                         : PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7 (type:int32_t)
     |      y                         : PARAM6 / y position: local: x position in meters * 1e4, global: longitude in degrees *10^7 (type:int32_t)
     |      z                         : PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame. (type:float)
     |  
     |  mission_item_reached_encode(self, seq)
     |      A certain mission item has been reached. The system will either hold
     |      this position (or circle on the orbit) or (if the
     |      autocontinue on the WP was set) continue to the next
     |      waypoint.
     |      
     |      seq                       : Sequence (type:uint16_t)
     |  
     |  mission_item_reached_send(self, seq, force_mavlink1=False)
     |      A certain mission item has been reached. The system will either hold
     |      this position (or circle on the orbit) or (if the
     |      autocontinue on the WP was set) continue to the next
     |      waypoint.
     |      
     |      seq                       : Sequence (type:uint16_t)
     |  
     |  mission_item_send(self, target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z, force_mavlink1=False)
     |      Message encoding a mission item. This message is emitted to announce
     |      the presence of a mission item and to set a mission
     |      item on the system. The mission item can be either in
     |      x, y, z meters (type: LOCAL) or x:lat, y:lon,
     |      z:altitude. Local frame is Z-down, right handed (NED),
     |      global frame is Z-up, right handed (ENU). See also
     |      https://mavlink.io/en/services/mission.html.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      seq                       : Sequence (type:uint16_t)
     |      frame                     : The coordinate system of the waypoint. (type:uint8_t, values:MAV_FRAME)
     |      command                   : The scheduled action for the waypoint. (type:uint16_t, values:MAV_CMD)
     |      current                   : false:0, true:1 (type:uint8_t)
     |      autocontinue              : Autocontinue to next waypoint (type:uint8_t)
     |      param1                    : PARAM1, see MAV_CMD enum (type:float)
     |      param2                    : PARAM2, see MAV_CMD enum (type:float)
     |      param3                    : PARAM3, see MAV_CMD enum (type:float)
     |      param4                    : PARAM4, see MAV_CMD enum (type:float)
     |      x                         : PARAM5 / local: X coordinate, global: latitude (type:float)
     |      y                         : PARAM6 / local: Y coordinate, global: longitude (type:float)
     |      z                         : PARAM7 / local: Z coordinate, global: altitude (relative or absolute, depending on frame). (type:float)
     |  
     |  mission_request_encode(self, target_system, target_component, seq)
     |      Request the information of the mission item with the sequence number
     |      seq. The response of the system to this message should
     |      be a MISSION_ITEM message.
     |      https://mavlink.io/en/services/mission.html
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      seq                       : Sequence (type:uint16_t)
     |  
     |  mission_request_int_encode(self, target_system, target_component, seq)
     |      Request the information of the mission item with the sequence number
     |      seq. The response of the system to this message should
     |      be a MISSION_ITEM_INT message.
     |      https://mavlink.io/en/services/mission.html
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      seq                       : Sequence (type:uint16_t)
     |  
     |  mission_request_int_send(self, target_system, target_component, seq, force_mavlink1=False)
     |      Request the information of the mission item with the sequence number
     |      seq. The response of the system to this message should
     |      be a MISSION_ITEM_INT message.
     |      https://mavlink.io/en/services/mission.html
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      seq                       : Sequence (type:uint16_t)
     |  
     |  mission_request_list_encode(self, target_system, target_component)
     |      Request the overall list of mission items from the system/component.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |  
     |  mission_request_list_send(self, target_system, target_component, force_mavlink1=False)
     |      Request the overall list of mission items from the system/component.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |  
     |  mission_request_partial_list_encode(self, target_system, target_component, start_index, end_index)
     |      Request a partial list of mission items from the system/component.
     |      https://mavlink.io/en/services/mission.html. If start
     |      and end index are the same, just send one waypoint.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      start_index               : Start index (type:int16_t)
     |      end_index                 : End index, -1 by default (-1: send list to end). Else a valid index of the list (type:int16_t)
     |  
     |  mission_request_partial_list_send(self, target_system, target_component, start_index, end_index, force_mavlink1=False)
     |      Request a partial list of mission items from the system/component.
     |      https://mavlink.io/en/services/mission.html. If start
     |      and end index are the same, just send one waypoint.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      start_index               : Start index (type:int16_t)
     |      end_index                 : End index, -1 by default (-1: send list to end). Else a valid index of the list (type:int16_t)
     |  
     |  mission_request_send(self, target_system, target_component, seq, force_mavlink1=False)
     |      Request the information of the mission item with the sequence number
     |      seq. The response of the system to this message should
     |      be a MISSION_ITEM message.
     |      https://mavlink.io/en/services/mission.html
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      seq                       : Sequence (type:uint16_t)
     |  
     |  mission_set_current_encode(self, target_system, target_component, seq)
     |      Set the mission item with sequence number seq as current item. This
     |      means that the MAV will continue to this mission item
     |      on the shortest path (not following the mission items
     |      in-between).
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      seq                       : Sequence (type:uint16_t)
     |  
     |  mission_set_current_send(self, target_system, target_component, seq, force_mavlink1=False)
     |      Set the mission item with sequence number seq as current item. This
     |      means that the MAV will continue to this mission item
     |      on the shortest path (not following the mission items
     |      in-between).
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      seq                       : Sequence (type:uint16_t)
     |  
     |  mission_write_partial_list_encode(self, target_system, target_component, start_index, end_index)
     |      This message is sent to the MAV to write a partial list. If start
     |      index == end index, only one item will be transmitted
     |      / updated. If the start index is NOT 0 and above the
     |      current list size, this request should be REJECTED!
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      start_index               : Start index. Must be smaller / equal to the largest index of the current onboard list. (type:int16_t)
     |      end_index                 : End index, equal or greater than start index. (type:int16_t)
     |  
     |  mission_write_partial_list_send(self, target_system, target_component, start_index, end_index, force_mavlink1=False)
     |      This message is sent to the MAV to write a partial list. If start
     |      index == end index, only one item will be transmitted
     |      / updated. If the start index is NOT 0 and above the
     |      current list size, this request should be REJECTED!
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      start_index               : Start index. Must be smaller / equal to the largest index of the current onboard list. (type:int16_t)
     |      end_index                 : End index, equal or greater than start index. (type:int16_t)
     |  
     |  mount_configure_encode(self, target_system, target_component, mount_mode, stab_roll, stab_pitch, stab_yaw)
     |      Message to configure a camera mount, directional antenna, etc.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      mount_mode                : Mount operating mode. (type:uint8_t, values:MAV_MOUNT_MODE)
     |      stab_roll                 : (1 = yes, 0 = no). (type:uint8_t)
     |      stab_pitch                : (1 = yes, 0 = no). (type:uint8_t)
     |      stab_yaw                  : (1 = yes, 0 = no). (type:uint8_t)
     |  
     |  mount_configure_send(self, target_system, target_component, mount_mode, stab_roll, stab_pitch, stab_yaw, force_mavlink1=False)
     |      Message to configure a camera mount, directional antenna, etc.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      mount_mode                : Mount operating mode. (type:uint8_t, values:MAV_MOUNT_MODE)
     |      stab_roll                 : (1 = yes, 0 = no). (type:uint8_t)
     |      stab_pitch                : (1 = yes, 0 = no). (type:uint8_t)
     |      stab_yaw                  : (1 = yes, 0 = no). (type:uint8_t)
     |  
     |  mount_control_encode(self, target_system, target_component, input_a, input_b, input_c, save_position)
     |      Message to control a camera mount, directional antenna, etc.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      input_a                   : Pitch (centi-degrees) or lat (degE7), depending on mount mode. (type:int32_t)
     |      input_b                   : Roll (centi-degrees) or lon (degE7) depending on mount mode. (type:int32_t)
     |      input_c                   : Yaw (centi-degrees) or alt (cm) depending on mount mode. (type:int32_t)
     |      save_position             : If "1" it will save current trimmed position on EEPROM (just valid for NEUTRAL and LANDING). (type:uint8_t)
     |  
     |  mount_control_send(self, target_system, target_component, input_a, input_b, input_c, save_position, force_mavlink1=False)
     |      Message to control a camera mount, directional antenna, etc.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      input_a                   : Pitch (centi-degrees) or lat (degE7), depending on mount mode. (type:int32_t)
     |      input_b                   : Roll (centi-degrees) or lon (degE7) depending on mount mode. (type:int32_t)
     |      input_c                   : Yaw (centi-degrees) or alt (cm) depending on mount mode. (type:int32_t)
     |      save_position             : If "1" it will save current trimmed position on EEPROM (just valid for NEUTRAL and LANDING). (type:uint8_t)
     |  
     |  mount_status_encode(self, target_system, target_component, pointing_a, pointing_b, pointing_c)
     |      Message with some status from APM to GCS about camera or antenna
     |      mount.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      pointing_a                : Pitch. [cdeg] (type:int32_t)
     |      pointing_b                : Roll. [cdeg] (type:int32_t)
     |      pointing_c                : Yaw. [cdeg] (type:int32_t)
     |  
     |  mount_status_send(self, target_system, target_component, pointing_a, pointing_b, pointing_c, force_mavlink1=False)
     |      Message with some status from APM to GCS about camera or antenna
     |      mount.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      pointing_a                : Pitch. [cdeg] (type:int32_t)
     |      pointing_b                : Roll. [cdeg] (type:int32_t)
     |      pointing_c                : Yaw. [cdeg] (type:int32_t)
     |  
     |  named_value_float_encode(self, time_boot_ms, name, value)
     |      Send a key-value pair as float. The use of this message is discouraged
     |      for normal packets, but a quite efficient way for
     |      testing new messages and getting experimental debug
     |      output.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      name                      : Name of the debug variable (type:char)
     |      value                     : Floating point value (type:float)
     |  
     |  named_value_float_send(self, time_boot_ms, name, value, force_mavlink1=False)
     |      Send a key-value pair as float. The use of this message is discouraged
     |      for normal packets, but a quite efficient way for
     |      testing new messages and getting experimental debug
     |      output.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      name                      : Name of the debug variable (type:char)
     |      value                     : Floating point value (type:float)
     |  
     |  named_value_int_encode(self, time_boot_ms, name, value)
     |      Send a key-value pair as integer. The use of this message is
     |      discouraged for normal packets, but a quite efficient
     |      way for testing new messages and getting experimental
     |      debug output.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      name                      : Name of the debug variable (type:char)
     |      value                     : Signed integer value (type:int32_t)
     |  
     |  named_value_int_send(self, time_boot_ms, name, value, force_mavlink1=False)
     |      Send a key-value pair as integer. The use of this message is
     |      discouraged for normal packets, but a quite efficient
     |      way for testing new messages and getting experimental
     |      debug output.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      name                      : Name of the debug variable (type:char)
     |      value                     : Signed integer value (type:int32_t)
     |  
     |  nav_controller_output_encode(self, nav_roll, nav_pitch, nav_bearing, target_bearing, wp_dist, alt_error, aspd_error, xtrack_error)
     |      The state of the fixed wing navigation and position controller.
     |      
     |      nav_roll                  : Current desired roll [deg] (type:float)
     |      nav_pitch                 : Current desired pitch [deg] (type:float)
     |      nav_bearing               : Current desired heading [deg] (type:int16_t)
     |      target_bearing            : Bearing to current waypoint/target [deg] (type:int16_t)
     |      wp_dist                   : Distance to active waypoint [m] (type:uint16_t)
     |      alt_error                 : Current altitude error [m] (type:float)
     |      aspd_error                : Current airspeed error [m/s] (type:float)
     |      xtrack_error              : Current crosstrack error on x-y plane [m] (type:float)
     |  
     |  nav_controller_output_send(self, nav_roll, nav_pitch, nav_bearing, target_bearing, wp_dist, alt_error, aspd_error, xtrack_error, force_mavlink1=False)
     |      The state of the fixed wing navigation and position controller.
     |      
     |      nav_roll                  : Current desired roll [deg] (type:float)
     |      nav_pitch                 : Current desired pitch [deg] (type:float)
     |      nav_bearing               : Current desired heading [deg] (type:int16_t)
     |      target_bearing            : Bearing to current waypoint/target [deg] (type:int16_t)
     |      wp_dist                   : Distance to active waypoint [m] (type:uint16_t)
     |      alt_error                 : Current altitude error [m] (type:float)
     |      aspd_error                : Current airspeed error [m/s] (type:float)
     |      xtrack_error              : Current crosstrack error on x-y plane [m] (type:float)
     |  
     |  optical_flow_encode(self, time_usec, sensor_id, flow_x, flow_y, flow_comp_m_x, flow_comp_m_y, quality, ground_distance)
     |      Optical flow from a flow sensor (e.g. optical mouse sensor)
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      sensor_id                 : Sensor ID (type:uint8_t)
     |      flow_x                    : Flow in x-sensor direction [dpix] (type:int16_t)
     |      flow_y                    : Flow in y-sensor direction [dpix] (type:int16_t)
     |      flow_comp_m_x             : Flow in x-sensor direction, angular-speed compensated [m/s] (type:float)
     |      flow_comp_m_y             : Flow in y-sensor direction, angular-speed compensated [m/s] (type:float)
     |      quality                   : Optical flow quality / confidence. 0: bad, 255: maximum quality (type:uint8_t)
     |      ground_distance           : Ground distance. Positive value: distance known. Negative value: Unknown distance [m] (type:float)
     |  
     |  optical_flow_rad_encode(self, time_usec, sensor_id, integration_time_us, integrated_x, integrated_y, integrated_xgyro, integrated_ygyro, integrated_zgyro, temperature, quality, time_delta_distance_us, distance)
     |      Optical flow from an angular rate flow sensor (e.g. PX4FLOW or mouse
     |      sensor)
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      sensor_id                 : Sensor ID (type:uint8_t)
     |      integration_time_us        : Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the. [us] (type:uint32_t)
     |      integrated_x              : Flow around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.) [rad] (type:float)
     |      integrated_y              : Flow around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.) [rad] (type:float)
     |      integrated_xgyro          : RH rotation around X axis [rad] (type:float)
     |      integrated_ygyro          : RH rotation around Y axis [rad] (type:float)
     |      integrated_zgyro          : RH rotation around Z axis [rad] (type:float)
     |      temperature               : Temperature [cdegC] (type:int16_t)
     |      quality                   : Optical flow quality / confidence. 0: no valid flow, 255: maximum quality (type:uint8_t)
     |      time_delta_distance_us        : Time since the distance was sampled. [us] (type:uint32_t)
     |      distance                  : Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance. [m] (type:float)
     |  
     |  optical_flow_rad_send(self, time_usec, sensor_id, integration_time_us, integrated_x, integrated_y, integrated_xgyro, integrated_ygyro, integrated_zgyro, temperature, quality, time_delta_distance_us, distance, force_mavlink1=False)
     |      Optical flow from an angular rate flow sensor (e.g. PX4FLOW or mouse
     |      sensor)
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      sensor_id                 : Sensor ID (type:uint8_t)
     |      integration_time_us        : Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the. [us] (type:uint32_t)
     |      integrated_x              : Flow around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.) [rad] (type:float)
     |      integrated_y              : Flow around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.) [rad] (type:float)
     |      integrated_xgyro          : RH rotation around X axis [rad] (type:float)
     |      integrated_ygyro          : RH rotation around Y axis [rad] (type:float)
     |      integrated_zgyro          : RH rotation around Z axis [rad] (type:float)
     |      temperature               : Temperature [cdegC] (type:int16_t)
     |      quality                   : Optical flow quality / confidence. 0: no valid flow, 255: maximum quality (type:uint8_t)
     |      time_delta_distance_us        : Time since the distance was sampled. [us] (type:uint32_t)
     |      distance                  : Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance. [m] (type:float)
     |  
     |  optical_flow_send(self, time_usec, sensor_id, flow_x, flow_y, flow_comp_m_x, flow_comp_m_y, quality, ground_distance, force_mavlink1=False)
     |      Optical flow from a flow sensor (e.g. optical mouse sensor)
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      sensor_id                 : Sensor ID (type:uint8_t)
     |      flow_x                    : Flow in x-sensor direction [dpix] (type:int16_t)
     |      flow_y                    : Flow in y-sensor direction [dpix] (type:int16_t)
     |      flow_comp_m_x             : Flow in x-sensor direction, angular-speed compensated [m/s] (type:float)
     |      flow_comp_m_y             : Flow in y-sensor direction, angular-speed compensated [m/s] (type:float)
     |      quality                   : Optical flow quality / confidence. 0: bad, 255: maximum quality (type:uint8_t)
     |      ground_distance           : Ground distance. Positive value: distance known. Negative value: Unknown distance [m] (type:float)
     |  
     |  param_map_rc_encode(self, target_system, target_component, param_id, param_index, parameter_rc_channel_index, param_value0, scale, param_value_min, param_value_max)
     |      Bind a RC channel to a parameter. The parameter should change
     |      according to the RC channel value.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (type:char)
     |      param_index               : Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored), send -2 to disable any existing map for this rc_channel_index. (type:int16_t)
     |      parameter_rc_channel_index        : Index of parameter RC channel. Not equal to the RC channel id. Typically corresponds to a potentiometer-knob on the RC. (type:uint8_t)
     |      param_value0              : Initial parameter value (type:float)
     |      scale                     : Scale, maps the RC range [-1, 1] to a parameter value (type:float)
     |      param_value_min           : Minimum param value. The protocol does not define if this overwrites an onboard minimum value. (Depends on implementation) (type:float)
     |      param_value_max           : Maximum param value. The protocol does not define if this overwrites an onboard maximum value. (Depends on implementation) (type:float)
     |  
     |  param_map_rc_send(self, target_system, target_component, param_id, param_index, parameter_rc_channel_index, param_value0, scale, param_value_min, param_value_max, force_mavlink1=False)
     |      Bind a RC channel to a parameter. The parameter should change
     |      according to the RC channel value.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (type:char)
     |      param_index               : Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored), send -2 to disable any existing map for this rc_channel_index. (type:int16_t)
     |      parameter_rc_channel_index        : Index of parameter RC channel. Not equal to the RC channel id. Typically corresponds to a potentiometer-knob on the RC. (type:uint8_t)
     |      param_value0              : Initial parameter value (type:float)
     |      scale                     : Scale, maps the RC range [-1, 1] to a parameter value (type:float)
     |      param_value_min           : Minimum param value. The protocol does not define if this overwrites an onboard minimum value. (Depends on implementation) (type:float)
     |      param_value_max           : Maximum param value. The protocol does not define if this overwrites an onboard maximum value. (Depends on implementation) (type:float)
     |  
     |  param_request_list_encode(self, target_system, target_component)
     |      Request all parameters of this component. After this request, all
     |      parameters are emitted. The parameter microservice is
     |      documented at
     |      https://mavlink.io/en/services/parameter.html
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |  
     |  param_request_list_send(self, target_system, target_component, force_mavlink1=False)
     |      Request all parameters of this component. After this request, all
     |      parameters are emitted. The parameter microservice is
     |      documented at
     |      https://mavlink.io/en/services/parameter.html
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |  
     |  param_request_read_encode(self, target_system, target_component, param_id, param_index)
     |      Request to read the onboard parameter with the param_id string id.
     |      Onboard parameters are stored as key[const char*] ->
     |      value[float]. This allows to send a parameter to any
     |      other component (such as the GCS) without the need of
     |      previous knowledge of possible parameter names. Thus
     |      the same GCS can store different parameters for
     |      different autopilots. See also
     |      https://mavlink.io/en/services/parameter.html for a
     |      full documentation of QGroundControl and IMU code.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (type:char)
     |      param_index               : Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored) (type:int16_t)
     |  
     |  param_request_read_send(self, target_system, target_component, param_id, param_index, force_mavlink1=False)
     |      Request to read the onboard parameter with the param_id string id.
     |      Onboard parameters are stored as key[const char*] ->
     |      value[float]. This allows to send a parameter to any
     |      other component (such as the GCS) without the need of
     |      previous knowledge of possible parameter names. Thus
     |      the same GCS can store different parameters for
     |      different autopilots. See also
     |      https://mavlink.io/en/services/parameter.html for a
     |      full documentation of QGroundControl and IMU code.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (type:char)
     |      param_index               : Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored) (type:int16_t)
     |  
     |  param_set_encode(self, target_system, target_component, param_id, param_value, param_type)
     |      Set a parameter value (write new value to permanent storage).
     |      IMPORTANT: The receiving component should acknowledge
     |      the new parameter value by sending a PARAM_VALUE
     |      message to all communication partners. This will also
     |      ensure that multiple GCS all have an up-to-date list
     |      of all parameters. If the sending GCS did not receive
     |      a PARAM_VALUE message within its timeout time, it
     |      should re-send the PARAM_SET message. The parameter
     |      microservice is documented at
     |      https://mavlink.io/en/services/parameter.html
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (type:char)
     |      param_value               : Onboard parameter value (type:float)
     |      param_type                : Onboard parameter type. (type:uint8_t, values:MAV_PARAM_TYPE)
     |  
     |  param_set_send(self, target_system, target_component, param_id, param_value, param_type, force_mavlink1=False)
     |      Set a parameter value (write new value to permanent storage).
     |      IMPORTANT: The receiving component should acknowledge
     |      the new parameter value by sending a PARAM_VALUE
     |      message to all communication partners. This will also
     |      ensure that multiple GCS all have an up-to-date list
     |      of all parameters. If the sending GCS did not receive
     |      a PARAM_VALUE message within its timeout time, it
     |      should re-send the PARAM_SET message. The parameter
     |      microservice is documented at
     |      https://mavlink.io/en/services/parameter.html
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (type:char)
     |      param_value               : Onboard parameter value (type:float)
     |      param_type                : Onboard parameter type. (type:uint8_t, values:MAV_PARAM_TYPE)
     |  
     |  param_value_encode(self, param_id, param_value, param_type, param_count, param_index)
     |      Emit the value of a onboard parameter. The inclusion of param_count
     |      and param_index in the message allows the recipient to
     |      keep track of received parameters and allows him to
     |      re-request missing parameters after a loss or timeout.
     |      The parameter microservice is documented at
     |      https://mavlink.io/en/services/parameter.html
     |      
     |      param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (type:char)
     |      param_value               : Onboard parameter value (type:float)
     |      param_type                : Onboard parameter type. (type:uint8_t, values:MAV_PARAM_TYPE)
     |      param_count               : Total number of onboard parameters (type:uint16_t)
     |      param_index               : Index of this onboard parameter (type:uint16_t)
     |  
     |  param_value_send(self, param_id, param_value, param_type, param_count, param_index, force_mavlink1=False)
     |      Emit the value of a onboard parameter. The inclusion of param_count
     |      and param_index in the message allows the recipient to
     |      keep track of received parameters and allows him to
     |      re-request missing parameters after a loss or timeout.
     |      The parameter microservice is documented at
     |      https://mavlink.io/en/services/parameter.html
     |      
     |      param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (type:char)
     |      param_value               : Onboard parameter value (type:float)
     |      param_type                : Onboard parameter type. (type:uint8_t, values:MAV_PARAM_TYPE)
     |      param_count               : Total number of onboard parameters (type:uint16_t)
     |      param_index               : Index of this onboard parameter (type:uint16_t)
     |  
     |  parse_buffer(self, s)
     |      input some data bytes, possibly returning a list of new messages
     |  
     |  parse_char(self, c)
     |      input some data bytes, possibly returning a new message
     |  
     |  pid_tuning_encode(self, axis, desired, achieved, FF, P, I, D)
     |      PID tuning information.
     |      
     |      axis                      : Axis. (type:uint8_t, values:PID_TUNING_AXIS)
     |      desired                   : Desired rate. [deg/s] (type:float)
     |      achieved                  : Achieved rate. [deg/s] (type:float)
     |      FF                        : FF component. (type:float)
     |      P                         : P component. (type:float)
     |      I                         : I component. (type:float)
     |      D                         : D component. (type:float)
     |  
     |  pid_tuning_send(self, axis, desired, achieved, FF, P, I, D, force_mavlink1=False)
     |      PID tuning information.
     |      
     |      axis                      : Axis. (type:uint8_t, values:PID_TUNING_AXIS)
     |      desired                   : Desired rate. [deg/s] (type:float)
     |      achieved                  : Achieved rate. [deg/s] (type:float)
     |      FF                        : FF component. (type:float)
     |      P                         : P component. (type:float)
     |      I                         : I component. (type:float)
     |      D                         : D component. (type:float)
     |  
     |  ping_encode(self, time_usec, seq, target_system, target_component)
     |      A ping message either requesting or responding to a ping. This allows
     |      to measure the system latencies, including serial
     |      port, radio modem and UDP connections. The ping
     |      microservice is documented at
     |      https://mavlink.io/en/services/ping.html
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      seq                       : PING sequence (type:uint32_t)
     |      target_system             : 0: request ping from all receiving systems. If greater than 0: message is a ping response and number is the system id of the requesting system (type:uint8_t)
     |      target_component          : 0: request ping from all receiving components. If greater than 0: message is a ping response and number is the component id of the requesting component. (type:uint8_t)
     |  
     |  ping_send(self, time_usec, seq, target_system, target_component, force_mavlink1=False)
     |      A ping message either requesting or responding to a ping. This allows
     |      to measure the system latencies, including serial
     |      port, radio modem and UDP connections. The ping
     |      microservice is documented at
     |      https://mavlink.io/en/services/ping.html
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      seq                       : PING sequence (type:uint32_t)
     |      target_system             : 0: request ping from all receiving systems. If greater than 0: message is a ping response and number is the system id of the requesting system (type:uint8_t)
     |      target_component          : 0: request ping from all receiving components. If greater than 0: message is a ping response and number is the component id of the requesting component. (type:uint8_t)
     |  
     |  position_target_global_int_encode(self, time_boot_ms, coordinate_frame, type_mask, lat_int, lon_int, alt, vx, vy, vz, afx, afy, afz, yaw, yaw_rate)
     |      Reports the current commanded vehicle position, velocity, and
     |      acceleration as specified by the autopilot. This
     |      should match the commands sent in
     |      SET_POSITION_TARGET_GLOBAL_INT if the vehicle is being
     |      controlled this way.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency. [ms] (type:uint32_t)
     |      coordinate_frame          : Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11 (type:uint8_t, values:MAV_FRAME)
     |      type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (type:uint16_t, values:POSITION_TARGET_TYPEMASK)
     |      lat_int                   : X Position in WGS84 frame [degE7] (type:int32_t)
     |      lon_int                   : Y Position in WGS84 frame [degE7] (type:int32_t)
     |      alt                       : Altitude (MSL, AGL or relative to home altitude, depending on frame) [m] (type:float)
     |      vx                        : X velocity in NED frame [m/s] (type:float)
     |      vy                        : Y velocity in NED frame [m/s] (type:float)
     |      vz                        : Z velocity in NED frame [m/s] (type:float)
     |      afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      yaw                       : yaw setpoint [rad] (type:float)
     |      yaw_rate                  : yaw rate setpoint [rad/s] (type:float)
     |  
     |  position_target_global_int_send(self, time_boot_ms, coordinate_frame, type_mask, lat_int, lon_int, alt, vx, vy, vz, afx, afy, afz, yaw, yaw_rate, force_mavlink1=False)
     |      Reports the current commanded vehicle position, velocity, and
     |      acceleration as specified by the autopilot. This
     |      should match the commands sent in
     |      SET_POSITION_TARGET_GLOBAL_INT if the vehicle is being
     |      controlled this way.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency. [ms] (type:uint32_t)
     |      coordinate_frame          : Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11 (type:uint8_t, values:MAV_FRAME)
     |      type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (type:uint16_t, values:POSITION_TARGET_TYPEMASK)
     |      lat_int                   : X Position in WGS84 frame [degE7] (type:int32_t)
     |      lon_int                   : Y Position in WGS84 frame [degE7] (type:int32_t)
     |      alt                       : Altitude (MSL, AGL or relative to home altitude, depending on frame) [m] (type:float)
     |      vx                        : X velocity in NED frame [m/s] (type:float)
     |      vy                        : Y velocity in NED frame [m/s] (type:float)
     |      vz                        : Z velocity in NED frame [m/s] (type:float)
     |      afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      yaw                       : yaw setpoint [rad] (type:float)
     |      yaw_rate                  : yaw rate setpoint [rad/s] (type:float)
     |  
     |  position_target_local_ned_encode(self, time_boot_ms, coordinate_frame, type_mask, x, y, z, vx, vy, vz, afx, afy, afz, yaw, yaw_rate)
     |      Reports the current commanded vehicle position, velocity, and
     |      acceleration as specified by the autopilot. This
     |      should match the commands sent in
     |      SET_POSITION_TARGET_LOCAL_NED if the vehicle is being
     |      controlled this way.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      coordinate_frame          : Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9 (type:uint8_t, values:MAV_FRAME)
     |      type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (type:uint16_t, values:POSITION_TARGET_TYPEMASK)
     |      x                         : X Position in NED frame [m] (type:float)
     |      y                         : Y Position in NED frame [m] (type:float)
     |      z                         : Z Position in NED frame (note, altitude is negative in NED) [m] (type:float)
     |      vx                        : X velocity in NED frame [m/s] (type:float)
     |      vy                        : Y velocity in NED frame [m/s] (type:float)
     |      vz                        : Z velocity in NED frame [m/s] (type:float)
     |      afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      yaw                       : yaw setpoint [rad] (type:float)
     |      yaw_rate                  : yaw rate setpoint [rad/s] (type:float)
     |  
     |  position_target_local_ned_send(self, time_boot_ms, coordinate_frame, type_mask, x, y, z, vx, vy, vz, afx, afy, afz, yaw, yaw_rate, force_mavlink1=False)
     |      Reports the current commanded vehicle position, velocity, and
     |      acceleration as specified by the autopilot. This
     |      should match the commands sent in
     |      SET_POSITION_TARGET_LOCAL_NED if the vehicle is being
     |      controlled this way.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      coordinate_frame          : Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9 (type:uint8_t, values:MAV_FRAME)
     |      type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (type:uint16_t, values:POSITION_TARGET_TYPEMASK)
     |      x                         : X Position in NED frame [m] (type:float)
     |      y                         : Y Position in NED frame [m] (type:float)
     |      z                         : Z Position in NED frame (note, altitude is negative in NED) [m] (type:float)
     |      vx                        : X velocity in NED frame [m/s] (type:float)
     |      vy                        : Y velocity in NED frame [m/s] (type:float)
     |      vz                        : Z velocity in NED frame [m/s] (type:float)
     |      afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      yaw                       : yaw setpoint [rad] (type:float)
     |      yaw_rate                  : yaw rate setpoint [rad/s] (type:float)
     |  
     |  power_status_encode(self, Vcc, Vservo, flags)
     |      Power supply status
     |      
     |      Vcc                       : 5V rail voltage. [mV] (type:uint16_t)
     |      Vservo                    : Servo rail voltage. [mV] (type:uint16_t)
     |      flags                     : Bitmap of power supply status flags. (type:uint16_t, values:MAV_POWER_STATUS)
     |  
     |  power_status_send(self, Vcc, Vservo, flags, force_mavlink1=False)
     |      Power supply status
     |      
     |      Vcc                       : 5V rail voltage. [mV] (type:uint16_t)
     |      Vservo                    : Servo rail voltage. [mV] (type:uint16_t)
     |      flags                     : Bitmap of power supply status flags. (type:uint16_t, values:MAV_POWER_STATUS)
     |  
     |  radio_encode(self, rssi, remrssi, txbuf, noise, remnoise, rxerrors, fixed)
     |      Status generated by radio.
     |      
     |      rssi                      : Local signal strength. (type:uint8_t)
     |      remrssi                   : Remote signal strength. (type:uint8_t)
     |      txbuf                     : How full the tx buffer is. [%] (type:uint8_t)
     |      noise                     : Background noise level. (type:uint8_t)
     |      remnoise                  : Remote background noise level. (type:uint8_t)
     |      rxerrors                  : Receive errors. (type:uint16_t)
     |      fixed                     : Count of error corrected packets. (type:uint16_t)
     |  
     |  radio_send(self, rssi, remrssi, txbuf, noise, remnoise, rxerrors, fixed, force_mavlink1=False)
     |      Status generated by radio.
     |      
     |      rssi                      : Local signal strength. (type:uint8_t)
     |      remrssi                   : Remote signal strength. (type:uint8_t)
     |      txbuf                     : How full the tx buffer is. [%] (type:uint8_t)
     |      noise                     : Background noise level. (type:uint8_t)
     |      remnoise                  : Remote background noise level. (type:uint8_t)
     |      rxerrors                  : Receive errors. (type:uint16_t)
     |      fixed                     : Count of error corrected packets. (type:uint16_t)
     |  
     |  radio_status_encode(self, rssi, remrssi, txbuf, noise, remnoise, rxerrors, fixed)
     |      Status generated by radio and injected into MAVLink stream.
     |      
     |      rssi                      : Local (message sender) recieved signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
     |      remrssi                   : Remote (message receiver) signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
     |      txbuf                     : Remaining free transmitter buffer space. [%] (type:uint8_t)
     |      noise                     : Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown. (type:uint8_t)
     |      remnoise                  : Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown. (type:uint8_t)
     |      rxerrors                  : Count of radio packet receive errors (since boot). (type:uint16_t)
     |      fixed                     : Count of error corrected radio packets (since boot). (type:uint16_t)
     |  
     |  radio_status_send(self, rssi, remrssi, txbuf, noise, remnoise, rxerrors, fixed, force_mavlink1=False)
     |      Status generated by radio and injected into MAVLink stream.
     |      
     |      rssi                      : Local (message sender) recieved signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
     |      remrssi                   : Remote (message receiver) signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
     |      txbuf                     : Remaining free transmitter buffer space. [%] (type:uint8_t)
     |      noise                     : Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown. (type:uint8_t)
     |      remnoise                  : Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown. (type:uint8_t)
     |      rxerrors                  : Count of radio packet receive errors (since boot). (type:uint16_t)
     |      fixed                     : Count of error corrected radio packets (since boot). (type:uint16_t)
     |  
     |  rally_fetch_point_encode(self, target_system, target_component, idx)
     |      Request a current rally point from MAV. MAV should respond with a
     |      RALLY_POINT message. MAV should not respond if the
     |      request is invalid.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      idx                       : Point index (first point is 0). (type:uint8_t)
     |  
     |  rally_fetch_point_send(self, target_system, target_component, idx, force_mavlink1=False)
     |      Request a current rally point from MAV. MAV should respond with a
     |      RALLY_POINT message. MAV should not respond if the
     |      request is invalid.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      idx                       : Point index (first point is 0). (type:uint8_t)
     |  
     |  rally_point_encode(self, target_system, target_component, idx, count, lat, lng, alt, break_alt, land_dir, flags)
     |      A rally point. Used to set a point when from GCS -> MAV. Also used to
     |      return a point from MAV -> GCS.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      idx                       : Point index (first point is 0). (type:uint8_t)
     |      count                     : Total number of points (for sanity checking). (type:uint8_t)
     |      lat                       : Latitude of point. [degE7] (type:int32_t)
     |      lng                       : Longitude of point. [degE7] (type:int32_t)
     |      alt                       : Transit / loiter altitude relative to home. [m] (type:int16_t)
     |      break_alt                 : Break altitude relative to home. [m] (type:int16_t)
     |      land_dir                  : Heading to aim for when landing. [cdeg] (type:uint16_t)
     |      flags                     : Configuration flags. (type:uint8_t, values:RALLY_FLAGS)
     |  
     |  rally_point_send(self, target_system, target_component, idx, count, lat, lng, alt, break_alt, land_dir, flags, force_mavlink1=False)
     |      A rally point. Used to set a point when from GCS -> MAV. Also used to
     |      return a point from MAV -> GCS.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      idx                       : Point index (first point is 0). (type:uint8_t)
     |      count                     : Total number of points (for sanity checking). (type:uint8_t)
     |      lat                       : Latitude of point. [degE7] (type:int32_t)
     |      lng                       : Longitude of point. [degE7] (type:int32_t)
     |      alt                       : Transit / loiter altitude relative to home. [m] (type:int16_t)
     |      break_alt                 : Break altitude relative to home. [m] (type:int16_t)
     |      land_dir                  : Heading to aim for when landing. [cdeg] (type:uint16_t)
     |      flags                     : Configuration flags. (type:uint8_t, values:RALLY_FLAGS)
     |  
     |  rangefinder_encode(self, distance, voltage)
     |      Rangefinder reporting.
     |      
     |      distance                  : Distance. [m] (type:float)
     |      voltage                   : Raw voltage if available, zero otherwise. [V] (type:float)
     |  
     |  rangefinder_send(self, distance, voltage, force_mavlink1=False)
     |      Rangefinder reporting.
     |      
     |      distance                  : Distance. [m] (type:float)
     |      voltage                   : Raw voltage if available, zero otherwise. [V] (type:float)
     |  
     |  raw_imu_encode(self, time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag)
     |      The RAW IMU readings for a 9DOF sensor, which is identified by the id
     |      (default IMU1). This message should always contain the
     |      true raw values without any scaling to allow data
     |      capture and system debugging.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      xacc                      : X acceleration (raw) (type:int16_t)
     |      yacc                      : Y acceleration (raw) (type:int16_t)
     |      zacc                      : Z acceleration (raw) (type:int16_t)
     |      xgyro                     : Angular speed around X axis (raw) (type:int16_t)
     |      ygyro                     : Angular speed around Y axis (raw) (type:int16_t)
     |      zgyro                     : Angular speed around Z axis (raw) (type:int16_t)
     |      xmag                      : X Magnetic field (raw) (type:int16_t)
     |      ymag                      : Y Magnetic field (raw) (type:int16_t)
     |      zmag                      : Z Magnetic field (raw) (type:int16_t)
     |  
     |  raw_imu_send(self, time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, force_mavlink1=False)
     |      The RAW IMU readings for a 9DOF sensor, which is identified by the id
     |      (default IMU1). This message should always contain the
     |      true raw values without any scaling to allow data
     |      capture and system debugging.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      xacc                      : X acceleration (raw) (type:int16_t)
     |      yacc                      : Y acceleration (raw) (type:int16_t)
     |      zacc                      : Z acceleration (raw) (type:int16_t)
     |      xgyro                     : Angular speed around X axis (raw) (type:int16_t)
     |      ygyro                     : Angular speed around Y axis (raw) (type:int16_t)
     |      zgyro                     : Angular speed around Z axis (raw) (type:int16_t)
     |      xmag                      : X Magnetic field (raw) (type:int16_t)
     |      ymag                      : Y Magnetic field (raw) (type:int16_t)
     |      zmag                      : Z Magnetic field (raw) (type:int16_t)
     |  
     |  raw_pressure_encode(self, time_usec, press_abs, press_diff1, press_diff2, temperature)
     |      The RAW pressure readings for the typical setup of one absolute
     |      pressure and one differential pressure sensor. The
     |      sensor values should be the raw, UNSCALED ADC values.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      press_abs                 : Absolute pressure (raw) (type:int16_t)
     |      press_diff1               : Differential pressure 1 (raw, 0 if nonexistent) (type:int16_t)
     |      press_diff2               : Differential pressure 2 (raw, 0 if nonexistent) (type:int16_t)
     |      temperature               : Raw Temperature measurement (raw) (type:int16_t)
     |  
     |  raw_pressure_send(self, time_usec, press_abs, press_diff1, press_diff2, temperature, force_mavlink1=False)
     |      The RAW pressure readings for the typical setup of one absolute
     |      pressure and one differential pressure sensor. The
     |      sensor values should be the raw, UNSCALED ADC values.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      press_abs                 : Absolute pressure (raw) (type:int16_t)
     |      press_diff1               : Differential pressure 1 (raw, 0 if nonexistent) (type:int16_t)
     |      press_diff2               : Differential pressure 2 (raw, 0 if nonexistent) (type:int16_t)
     |      temperature               : Raw Temperature measurement (raw) (type:int16_t)
     |  
     |  rc_channels_encode(self, time_boot_ms, chancount, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, chan9_raw, chan10_raw, chan11_raw, chan12_raw, chan13_raw, chan14_raw, chan15_raw, chan16_raw, chan17_raw, chan18_raw, rssi)
     |      The PPM values of the RC channels received. The standard PPM
     |      modulation is as follows: 1000 microseconds: 0%, 2000
     |      microseconds: 100%.  A value of UINT16_MAX implies the
     |      channel is unused. Individual receivers/transmitters
     |      might violate this specification.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      chancount                 : Total number of RC channels being received. This can be larger than 18, indicating that more channels are available but not given in this message. This value should be 0 when no RC channels are available. (type:uint8_t)
     |      chan1_raw                 : RC channel 1 value. [us] (type:uint16_t)
     |      chan2_raw                 : RC channel 2 value. [us] (type:uint16_t)
     |      chan3_raw                 : RC channel 3 value. [us] (type:uint16_t)
     |      chan4_raw                 : RC channel 4 value. [us] (type:uint16_t)
     |      chan5_raw                 : RC channel 5 value. [us] (type:uint16_t)
     |      chan6_raw                 : RC channel 6 value. [us] (type:uint16_t)
     |      chan7_raw                 : RC channel 7 value. [us] (type:uint16_t)
     |      chan8_raw                 : RC channel 8 value. [us] (type:uint16_t)
     |      chan9_raw                 : RC channel 9 value. [us] (type:uint16_t)
     |      chan10_raw                : RC channel 10 value. [us] (type:uint16_t)
     |      chan11_raw                : RC channel 11 value. [us] (type:uint16_t)
     |      chan12_raw                : RC channel 12 value. [us] (type:uint16_t)
     |      chan13_raw                : RC channel 13 value. [us] (type:uint16_t)
     |      chan14_raw                : RC channel 14 value. [us] (type:uint16_t)
     |      chan15_raw                : RC channel 15 value. [us] (type:uint16_t)
     |      chan16_raw                : RC channel 16 value. [us] (type:uint16_t)
     |      chan17_raw                : RC channel 17 value. [us] (type:uint16_t)
     |      chan18_raw                : RC channel 18 value. [us] (type:uint16_t)
     |      rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
     |  
     |  rc_channels_override_encode(self, target_system, target_component, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw)
     |      The RAW values of the RC channels sent to the MAV to override info
     |      received from the RC radio. A value of UINT16_MAX
     |      means no change to that channel. A value of 0 means
     |      control of that channel should be released back to the
     |      RC radio. The standard PPM modulation is as follows:
     |      1000 microseconds: 0%, 2000 microseconds: 100%.
     |      Individual receivers/transmitters might violate this
     |      specification.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      chan1_raw                 : RC channel 1 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
     |      chan2_raw                 : RC channel 2 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
     |      chan3_raw                 : RC channel 3 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
     |      chan4_raw                 : RC channel 4 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
     |      chan5_raw                 : RC channel 5 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
     |      chan6_raw                 : RC channel 6 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
     |      chan7_raw                 : RC channel 7 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
     |      chan8_raw                 : RC channel 8 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
     |  
     |  rc_channels_override_send(self, target_system, target_component, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, force_mavlink1=False)
     |      The RAW values of the RC channels sent to the MAV to override info
     |      received from the RC radio. A value of UINT16_MAX
     |      means no change to that channel. A value of 0 means
     |      control of that channel should be released back to the
     |      RC radio. The standard PPM modulation is as follows:
     |      1000 microseconds: 0%, 2000 microseconds: 100%.
     |      Individual receivers/transmitters might violate this
     |      specification.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      chan1_raw                 : RC channel 1 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
     |      chan2_raw                 : RC channel 2 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
     |      chan3_raw                 : RC channel 3 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
     |      chan4_raw                 : RC channel 4 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
     |      chan5_raw                 : RC channel 5 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
     |      chan6_raw                 : RC channel 6 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
     |      chan7_raw                 : RC channel 7 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
     |      chan8_raw                 : RC channel 8 value. A value of UINT16_MAX means to ignore this field. [us] (type:uint16_t)
     |  
     |  rc_channels_raw_encode(self, time_boot_ms, port, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, rssi)
     |      The RAW values of the RC channels received. The standard PPM
     |      modulation is as follows: 1000 microseconds: 0%, 2000
     |      microseconds: 100%. A value of UINT16_MAX implies the
     |      channel is unused. Individual receivers/transmitters
     |      might violate this specification.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (type:uint8_t)
     |      chan1_raw                 : RC channel 1 value. [us] (type:uint16_t)
     |      chan2_raw                 : RC channel 2 value. [us] (type:uint16_t)
     |      chan3_raw                 : RC channel 3 value. [us] (type:uint16_t)
     |      chan4_raw                 : RC channel 4 value. [us] (type:uint16_t)
     |      chan5_raw                 : RC channel 5 value. [us] (type:uint16_t)
     |      chan6_raw                 : RC channel 6 value. [us] (type:uint16_t)
     |      chan7_raw                 : RC channel 7 value. [us] (type:uint16_t)
     |      chan8_raw                 : RC channel 8 value. [us] (type:uint16_t)
     |      rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
     |  
     |  rc_channels_raw_send(self, time_boot_ms, port, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, rssi, force_mavlink1=False)
     |      The RAW values of the RC channels received. The standard PPM
     |      modulation is as follows: 1000 microseconds: 0%, 2000
     |      microseconds: 100%. A value of UINT16_MAX implies the
     |      channel is unused. Individual receivers/transmitters
     |      might violate this specification.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (type:uint8_t)
     |      chan1_raw                 : RC channel 1 value. [us] (type:uint16_t)
     |      chan2_raw                 : RC channel 2 value. [us] (type:uint16_t)
     |      chan3_raw                 : RC channel 3 value. [us] (type:uint16_t)
     |      chan4_raw                 : RC channel 4 value. [us] (type:uint16_t)
     |      chan5_raw                 : RC channel 5 value. [us] (type:uint16_t)
     |      chan6_raw                 : RC channel 6 value. [us] (type:uint16_t)
     |      chan7_raw                 : RC channel 7 value. [us] (type:uint16_t)
     |      chan8_raw                 : RC channel 8 value. [us] (type:uint16_t)
     |      rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
     |  
     |  rc_channels_scaled_encode(self, time_boot_ms, port, chan1_scaled, chan2_scaled, chan3_scaled, chan4_scaled, chan5_scaled, chan6_scaled, chan7_scaled, chan8_scaled, rssi)
     |      The scaled values of the RC channels received: (-100%) -10000, (0%) 0,
     |      (100%) 10000. Channels that are inactive should be set
     |      to UINT16_MAX.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (type:uint8_t)
     |      chan1_scaled              : RC channel 1 value scaled. (type:int16_t)
     |      chan2_scaled              : RC channel 2 value scaled. (type:int16_t)
     |      chan3_scaled              : RC channel 3 value scaled. (type:int16_t)
     |      chan4_scaled              : RC channel 4 value scaled. (type:int16_t)
     |      chan5_scaled              : RC channel 5 value scaled. (type:int16_t)
     |      chan6_scaled              : RC channel 6 value scaled. (type:int16_t)
     |      chan7_scaled              : RC channel 7 value scaled. (type:int16_t)
     |      chan8_scaled              : RC channel 8 value scaled. (type:int16_t)
     |      rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
     |  
     |  rc_channels_scaled_send(self, time_boot_ms, port, chan1_scaled, chan2_scaled, chan3_scaled, chan4_scaled, chan5_scaled, chan6_scaled, chan7_scaled, chan8_scaled, rssi, force_mavlink1=False)
     |      The scaled values of the RC channels received: (-100%) -10000, (0%) 0,
     |      (100%) 10000. Channels that are inactive should be set
     |      to UINT16_MAX.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (type:uint8_t)
     |      chan1_scaled              : RC channel 1 value scaled. (type:int16_t)
     |      chan2_scaled              : RC channel 2 value scaled. (type:int16_t)
     |      chan3_scaled              : RC channel 3 value scaled. (type:int16_t)
     |      chan4_scaled              : RC channel 4 value scaled. (type:int16_t)
     |      chan5_scaled              : RC channel 5 value scaled. (type:int16_t)
     |      chan6_scaled              : RC channel 6 value scaled. (type:int16_t)
     |      chan7_scaled              : RC channel 7 value scaled. (type:int16_t)
     |      chan8_scaled              : RC channel 8 value scaled. (type:int16_t)
     |      rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
     |  
     |  rc_channels_send(self, time_boot_ms, chancount, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, chan9_raw, chan10_raw, chan11_raw, chan12_raw, chan13_raw, chan14_raw, chan15_raw, chan16_raw, chan17_raw, chan18_raw, rssi, force_mavlink1=False)
     |      The PPM values of the RC channels received. The standard PPM
     |      modulation is as follows: 1000 microseconds: 0%, 2000
     |      microseconds: 100%.  A value of UINT16_MAX implies the
     |      channel is unused. Individual receivers/transmitters
     |      might violate this specification.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      chancount                 : Total number of RC channels being received. This can be larger than 18, indicating that more channels are available but not given in this message. This value should be 0 when no RC channels are available. (type:uint8_t)
     |      chan1_raw                 : RC channel 1 value. [us] (type:uint16_t)
     |      chan2_raw                 : RC channel 2 value. [us] (type:uint16_t)
     |      chan3_raw                 : RC channel 3 value. [us] (type:uint16_t)
     |      chan4_raw                 : RC channel 4 value. [us] (type:uint16_t)
     |      chan5_raw                 : RC channel 5 value. [us] (type:uint16_t)
     |      chan6_raw                 : RC channel 6 value. [us] (type:uint16_t)
     |      chan7_raw                 : RC channel 7 value. [us] (type:uint16_t)
     |      chan8_raw                 : RC channel 8 value. [us] (type:uint16_t)
     |      chan9_raw                 : RC channel 9 value. [us] (type:uint16_t)
     |      chan10_raw                : RC channel 10 value. [us] (type:uint16_t)
     |      chan11_raw                : RC channel 11 value. [us] (type:uint16_t)
     |      chan12_raw                : RC channel 12 value. [us] (type:uint16_t)
     |      chan13_raw                : RC channel 13 value. [us] (type:uint16_t)
     |      chan14_raw                : RC channel 14 value. [us] (type:uint16_t)
     |      chan15_raw                : RC channel 15 value. [us] (type:uint16_t)
     |      chan16_raw                : RC channel 16 value. [us] (type:uint16_t)
     |      chan17_raw                : RC channel 17 value. [us] (type:uint16_t)
     |      chan18_raw                : RC channel 18 value. [us] (type:uint16_t)
     |      rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (type:uint8_t)
     |  
     |  remote_log_block_status_encode(self, target_system, target_component, seqno, status)
     |      Send Status of each log block that autopilot board might have sent.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      seqno                     : Log data block sequence number. (type:uint32_t)
     |      status                    : Log data block status. (type:uint8_t, values:MAV_REMOTE_LOG_DATA_BLOCK_STATUSES)
     |  
     |  remote_log_block_status_send(self, target_system, target_component, seqno, status, force_mavlink1=False)
     |      Send Status of each log block that autopilot board might have sent.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      seqno                     : Log data block sequence number. (type:uint32_t)
     |      status                    : Log data block status. (type:uint8_t, values:MAV_REMOTE_LOG_DATA_BLOCK_STATUSES)
     |  
     |  remote_log_data_block_encode(self, target_system, target_component, seqno, data)
     |      Send a block of log data to remote location.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      seqno                     : Log data block sequence number. (type:uint32_t, values:MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS)
     |      data                      : Log data block. (type:uint8_t)
     |  
     |  remote_log_data_block_send(self, target_system, target_component, seqno, data, force_mavlink1=False)
     |      Send a block of log data to remote location.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      seqno                     : Log data block sequence number. (type:uint32_t, values:MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS)
     |      data                      : Log data block. (type:uint8_t)
     |  
     |  request_data_stream_encode(self, target_system, target_component, req_stream_id, req_message_rate, start_stop)
     |      Request a data stream.
     |      
     |      target_system             : The target requested to send the message stream. (type:uint8_t)
     |      target_component          : The target requested to send the message stream. (type:uint8_t)
     |      req_stream_id             : The ID of the requested data stream (type:uint8_t)
     |      req_message_rate          : The requested message rate [Hz] (type:uint16_t)
     |      start_stop                : 1 to start sending, 0 to stop sending. (type:uint8_t)
     |  
     |  request_data_stream_send(self, target_system, target_component, req_stream_id, req_message_rate, start_stop, force_mavlink1=False)
     |      Request a data stream.
     |      
     |      target_system             : The target requested to send the message stream. (type:uint8_t)
     |      target_component          : The target requested to send the message stream. (type:uint8_t)
     |      req_stream_id             : The ID of the requested data stream (type:uint8_t)
     |      req_message_rate          : The requested message rate [Hz] (type:uint16_t)
     |      start_stop                : 1 to start sending, 0 to stop sending. (type:uint8_t)
     |  
     |  resource_request_encode(self, request_id, uri_type, uri, transfer_type, storage)
     |      The autopilot is requesting a resource (file, binary, other type of
     |      data)
     |      
     |      request_id                : Request ID. This ID should be re-used when sending back URI contents (type:uint8_t)
     |      uri_type                  : The type of requested URI. 0 = a file via URL. 1 = a UAVCAN binary (type:uint8_t)
     |      uri                       : The requested unique resource identifier (URI). It is not necessarily a straight domain name (depends on the URI type enum) (type:uint8_t)
     |      transfer_type             : The way the autopilot wants to receive the URI. 0 = MAVLink FTP. 1 = binary stream. (type:uint8_t)
     |      storage                   : The storage path the autopilot wants the URI to be stored in. Will only be valid if the transfer_type has a storage associated (e.g. MAVLink FTP). (type:uint8_t)
     |  
     |  resource_request_send(self, request_id, uri_type, uri, transfer_type, storage, force_mavlink1=False)
     |      The autopilot is requesting a resource (file, binary, other type of
     |      data)
     |      
     |      request_id                : Request ID. This ID should be re-used when sending back URI contents (type:uint8_t)
     |      uri_type                  : The type of requested URI. 0 = a file via URL. 1 = a UAVCAN binary (type:uint8_t)
     |      uri                       : The requested unique resource identifier (URI). It is not necessarily a straight domain name (depends on the URI type enum) (type:uint8_t)
     |      transfer_type             : The way the autopilot wants to receive the URI. 0 = MAVLink FTP. 1 = binary stream. (type:uint8_t)
     |      storage                   : The storage path the autopilot wants the URI to be stored in. Will only be valid if the transfer_type has a storage associated (e.g. MAVLink FTP). (type:uint8_t)
     |  
     |  rpm_encode(self, rpm1, rpm2)
     |      RPM sensor output.
     |      
     |      rpm1                      : RPM Sensor1. (type:float)
     |      rpm2                      : RPM Sensor2. (type:float)
     |  
     |  rpm_send(self, rpm1, rpm2, force_mavlink1=False)
     |      RPM sensor output.
     |      
     |      rpm1                      : RPM Sensor1. (type:float)
     |      rpm2                      : RPM Sensor2. (type:float)
     |  
     |  safety_allowed_area_encode(self, frame, p1x, p1y, p1z, p2x, p2y, p2z)
     |      Read out the safety zone the MAV currently assumes.
     |      
     |      frame                     : Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (type:uint8_t, values:MAV_FRAME)
     |      p1x                       : x position 1 / Latitude 1 [m] (type:float)
     |      p1y                       : y position 1 / Longitude 1 [m] (type:float)
     |      p1z                       : z position 1 / Altitude 1 [m] (type:float)
     |      p2x                       : x position 2 / Latitude 2 [m] (type:float)
     |      p2y                       : y position 2 / Longitude 2 [m] (type:float)
     |      p2z                       : z position 2 / Altitude 2 [m] (type:float)
     |  
     |  safety_allowed_area_send(self, frame, p1x, p1y, p1z, p2x, p2y, p2z, force_mavlink1=False)
     |      Read out the safety zone the MAV currently assumes.
     |      
     |      frame                     : Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (type:uint8_t, values:MAV_FRAME)
     |      p1x                       : x position 1 / Latitude 1 [m] (type:float)
     |      p1y                       : y position 1 / Longitude 1 [m] (type:float)
     |      p1z                       : z position 1 / Altitude 1 [m] (type:float)
     |      p2x                       : x position 2 / Latitude 2 [m] (type:float)
     |      p2y                       : y position 2 / Longitude 2 [m] (type:float)
     |      p2z                       : z position 2 / Altitude 2 [m] (type:float)
     |  
     |  safety_set_allowed_area_encode(self, target_system, target_component, frame, p1x, p1y, p1z, p2x, p2y, p2z)
     |      Set a safety zone (volume), which is defined by two corners of a cube.
     |      This message can be used to tell the MAV which
     |      setpoints/waypoints to accept and which to reject.
     |      Safety areas are often enforced by national or
     |      competition regulations.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      frame                     : Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (type:uint8_t, values:MAV_FRAME)
     |      p1x                       : x position 1 / Latitude 1 [m] (type:float)
     |      p1y                       : y position 1 / Longitude 1 [m] (type:float)
     |      p1z                       : z position 1 / Altitude 1 [m] (type:float)
     |      p2x                       : x position 2 / Latitude 2 [m] (type:float)
     |      p2y                       : y position 2 / Longitude 2 [m] (type:float)
     |      p2z                       : z position 2 / Altitude 2 [m] (type:float)
     |  
     |  safety_set_allowed_area_send(self, target_system, target_component, frame, p1x, p1y, p1z, p2x, p2y, p2z, force_mavlink1=False)
     |      Set a safety zone (volume), which is defined by two corners of a cube.
     |      This message can be used to tell the MAV which
     |      setpoints/waypoints to accept and which to reject.
     |      Safety areas are often enforced by national or
     |      competition regulations.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      frame                     : Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (type:uint8_t, values:MAV_FRAME)
     |      p1x                       : x position 1 / Latitude 1 [m] (type:float)
     |      p1y                       : y position 1 / Longitude 1 [m] (type:float)
     |      p1z                       : z position 1 / Altitude 1 [m] (type:float)
     |      p2x                       : x position 2 / Latitude 2 [m] (type:float)
     |      p2y                       : y position 2 / Longitude 2 [m] (type:float)
     |      p2z                       : z position 2 / Altitude 2 [m] (type:float)
     |  
     |  scaled_imu2_encode(self, time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag)
     |      The RAW IMU readings for secondary 9DOF sensor setup. This message
     |      should contain the scaled values to the described
     |      units
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      xacc                      : X acceleration [mG] (type:int16_t)
     |      yacc                      : Y acceleration [mG] (type:int16_t)
     |      zacc                      : Z acceleration [mG] (type:int16_t)
     |      xgyro                     : Angular speed around X axis [mrad/s] (type:int16_t)
     |      ygyro                     : Angular speed around Y axis [mrad/s] (type:int16_t)
     |      zgyro                     : Angular speed around Z axis [mrad/s] (type:int16_t)
     |      xmag                      : X Magnetic field [mgauss] (type:int16_t)
     |      ymag                      : Y Magnetic field [mgauss] (type:int16_t)
     |      zmag                      : Z Magnetic field [mgauss] (type:int16_t)
     |  
     |  scaled_imu2_send(self, time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, force_mavlink1=False)
     |      The RAW IMU readings for secondary 9DOF sensor setup. This message
     |      should contain the scaled values to the described
     |      units
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      xacc                      : X acceleration [mG] (type:int16_t)
     |      yacc                      : Y acceleration [mG] (type:int16_t)
     |      zacc                      : Z acceleration [mG] (type:int16_t)
     |      xgyro                     : Angular speed around X axis [mrad/s] (type:int16_t)
     |      ygyro                     : Angular speed around Y axis [mrad/s] (type:int16_t)
     |      zgyro                     : Angular speed around Z axis [mrad/s] (type:int16_t)
     |      xmag                      : X Magnetic field [mgauss] (type:int16_t)
     |      ymag                      : Y Magnetic field [mgauss] (type:int16_t)
     |      zmag                      : Z Magnetic field [mgauss] (type:int16_t)
     |  
     |  scaled_imu3_encode(self, time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag)
     |      The RAW IMU readings for 3rd 9DOF sensor setup. This message should
     |      contain the scaled values to the described units
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      xacc                      : X acceleration [mG] (type:int16_t)
     |      yacc                      : Y acceleration [mG] (type:int16_t)
     |      zacc                      : Z acceleration [mG] (type:int16_t)
     |      xgyro                     : Angular speed around X axis [mrad/s] (type:int16_t)
     |      ygyro                     : Angular speed around Y axis [mrad/s] (type:int16_t)
     |      zgyro                     : Angular speed around Z axis [mrad/s] (type:int16_t)
     |      xmag                      : X Magnetic field [mgauss] (type:int16_t)
     |      ymag                      : Y Magnetic field [mgauss] (type:int16_t)
     |      zmag                      : Z Magnetic field [mgauss] (type:int16_t)
     |  
     |  scaled_imu3_send(self, time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, force_mavlink1=False)
     |      The RAW IMU readings for 3rd 9DOF sensor setup. This message should
     |      contain the scaled values to the described units
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      xacc                      : X acceleration [mG] (type:int16_t)
     |      yacc                      : Y acceleration [mG] (type:int16_t)
     |      zacc                      : Z acceleration [mG] (type:int16_t)
     |      xgyro                     : Angular speed around X axis [mrad/s] (type:int16_t)
     |      ygyro                     : Angular speed around Y axis [mrad/s] (type:int16_t)
     |      zgyro                     : Angular speed around Z axis [mrad/s] (type:int16_t)
     |      xmag                      : X Magnetic field [mgauss] (type:int16_t)
     |      ymag                      : Y Magnetic field [mgauss] (type:int16_t)
     |      zmag                      : Z Magnetic field [mgauss] (type:int16_t)
     |  
     |  scaled_imu_encode(self, time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag)
     |      The RAW IMU readings for the usual 9DOF sensor setup. This message
     |      should contain the scaled values to the described
     |      units
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      xacc                      : X acceleration [mG] (type:int16_t)
     |      yacc                      : Y acceleration [mG] (type:int16_t)
     |      zacc                      : Z acceleration [mG] (type:int16_t)
     |      xgyro                     : Angular speed around X axis [mrad/s] (type:int16_t)
     |      ygyro                     : Angular speed around Y axis [mrad/s] (type:int16_t)
     |      zgyro                     : Angular speed around Z axis [mrad/s] (type:int16_t)
     |      xmag                      : X Magnetic field [mgauss] (type:int16_t)
     |      ymag                      : Y Magnetic field [mgauss] (type:int16_t)
     |      zmag                      : Z Magnetic field [mgauss] (type:int16_t)
     |  
     |  scaled_imu_send(self, time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, force_mavlink1=False)
     |      The RAW IMU readings for the usual 9DOF sensor setup. This message
     |      should contain the scaled values to the described
     |      units
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      xacc                      : X acceleration [mG] (type:int16_t)
     |      yacc                      : Y acceleration [mG] (type:int16_t)
     |      zacc                      : Z acceleration [mG] (type:int16_t)
     |      xgyro                     : Angular speed around X axis [mrad/s] (type:int16_t)
     |      ygyro                     : Angular speed around Y axis [mrad/s] (type:int16_t)
     |      zgyro                     : Angular speed around Z axis [mrad/s] (type:int16_t)
     |      xmag                      : X Magnetic field [mgauss] (type:int16_t)
     |      ymag                      : Y Magnetic field [mgauss] (type:int16_t)
     |      zmag                      : Z Magnetic field [mgauss] (type:int16_t)
     |  
     |  scaled_pressure2_encode(self, time_boot_ms, press_abs, press_diff, temperature)
     |      Barometer readings for 2nd barometer
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      press_abs                 : Absolute pressure [hPa] (type:float)
     |      press_diff                : Differential pressure [hPa] (type:float)
     |      temperature               : Temperature measurement [cdegC] (type:int16_t)
     |  
     |  scaled_pressure2_send(self, time_boot_ms, press_abs, press_diff, temperature, force_mavlink1=False)
     |      Barometer readings for 2nd barometer
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      press_abs                 : Absolute pressure [hPa] (type:float)
     |      press_diff                : Differential pressure [hPa] (type:float)
     |      temperature               : Temperature measurement [cdegC] (type:int16_t)
     |  
     |  scaled_pressure3_encode(self, time_boot_ms, press_abs, press_diff, temperature)
     |      Barometer readings for 3rd barometer
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      press_abs                 : Absolute pressure [hPa] (type:float)
     |      press_diff                : Differential pressure [hPa] (type:float)
     |      temperature               : Temperature measurement [cdegC] (type:int16_t)
     |  
     |  scaled_pressure3_send(self, time_boot_ms, press_abs, press_diff, temperature, force_mavlink1=False)
     |      Barometer readings for 3rd barometer
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      press_abs                 : Absolute pressure [hPa] (type:float)
     |      press_diff                : Differential pressure [hPa] (type:float)
     |      temperature               : Temperature measurement [cdegC] (type:int16_t)
     |  
     |  scaled_pressure_encode(self, time_boot_ms, press_abs, press_diff, temperature)
     |      The pressure readings for the typical setup of one absolute and
     |      differential pressure sensor. The units are as
     |      specified in each field.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      press_abs                 : Absolute pressure [hPa] (type:float)
     |      press_diff                : Differential pressure 1 [hPa] (type:float)
     |      temperature               : Temperature [cdegC] (type:int16_t)
     |  
     |  scaled_pressure_send(self, time_boot_ms, press_abs, press_diff, temperature, force_mavlink1=False)
     |      The pressure readings for the typical setup of one absolute and
     |      differential pressure sensor. The units are as
     |      specified in each field.
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      press_abs                 : Absolute pressure [hPa] (type:float)
     |      press_diff                : Differential pressure 1 [hPa] (type:float)
     |      temperature               : Temperature [cdegC] (type:int16_t)
     |  
     |  send(self, mavmsg, force_mavlink1=False)
     |      send a MAVLink message
     |  
     |  sensor_offsets_encode(self, mag_ofs_x, mag_ofs_y, mag_ofs_z, mag_declination, raw_press, raw_temp, gyro_cal_x, gyro_cal_y, gyro_cal_z, accel_cal_x, accel_cal_y, accel_cal_z)
     |      Offsets and calibrations values for hardware sensors. This makes it
     |      easier to debug the calibration process.
     |      
     |      mag_ofs_x                 : Magnetometer X offset. (type:int16_t)
     |      mag_ofs_y                 : Magnetometer Y offset. (type:int16_t)
     |      mag_ofs_z                 : Magnetometer Z offset. (type:int16_t)
     |      mag_declination           : Magnetic declination. [rad] (type:float)
     |      raw_press                 : Raw pressure from barometer. (type:int32_t)
     |      raw_temp                  : Raw temperature from barometer. (type:int32_t)
     |      gyro_cal_x                : Gyro X calibration. (type:float)
     |      gyro_cal_y                : Gyro Y calibration. (type:float)
     |      gyro_cal_z                : Gyro Z calibration. (type:float)
     |      accel_cal_x               : Accel X calibration. (type:float)
     |      accel_cal_y               : Accel Y calibration. (type:float)
     |      accel_cal_z               : Accel Z calibration. (type:float)
     |  
     |  sensor_offsets_send(self, mag_ofs_x, mag_ofs_y, mag_ofs_z, mag_declination, raw_press, raw_temp, gyro_cal_x, gyro_cal_y, gyro_cal_z, accel_cal_x, accel_cal_y, accel_cal_z, force_mavlink1=False)
     |      Offsets and calibrations values for hardware sensors. This makes it
     |      easier to debug the calibration process.
     |      
     |      mag_ofs_x                 : Magnetometer X offset. (type:int16_t)
     |      mag_ofs_y                 : Magnetometer Y offset. (type:int16_t)
     |      mag_ofs_z                 : Magnetometer Z offset. (type:int16_t)
     |      mag_declination           : Magnetic declination. [rad] (type:float)
     |      raw_press                 : Raw pressure from barometer. (type:int32_t)
     |      raw_temp                  : Raw temperature from barometer. (type:int32_t)
     |      gyro_cal_x                : Gyro X calibration. (type:float)
     |      gyro_cal_y                : Gyro Y calibration. (type:float)
     |      gyro_cal_z                : Gyro Z calibration. (type:float)
     |      accel_cal_x               : Accel X calibration. (type:float)
     |      accel_cal_y               : Accel Y calibration. (type:float)
     |      accel_cal_z               : Accel Z calibration. (type:float)
     |  
     |  serial_control_encode(self, device, flags, timeout, baudrate, count, data)
     |      Control a serial port. This can be used for raw access to an onboard
     |      serial peripheral such as a GPS or telemetry radio. It
     |      is designed to make it possible to update the devices
     |      firmware via MAVLink messages or change the devices
     |      settings. A message with zero bytes can be used to
     |      change just the baudrate.
     |      
     |      device                    : Serial control device type. (type:uint8_t, values:SERIAL_CONTROL_DEV)
     |      flags                     : Bitmap of serial control flags. (type:uint8_t, values:SERIAL_CONTROL_FLAG)
     |      timeout                   : Timeout for reply data [ms] (type:uint16_t)
     |      baudrate                  : Baudrate of transfer. Zero means no change. [bits/s] (type:uint32_t)
     |      count                     : how many bytes in this transfer [bytes] (type:uint8_t)
     |      data                      : serial data (type:uint8_t)
     |  
     |  serial_control_send(self, device, flags, timeout, baudrate, count, data, force_mavlink1=False)
     |      Control a serial port. This can be used for raw access to an onboard
     |      serial peripheral such as a GPS or telemetry radio. It
     |      is designed to make it possible to update the devices
     |      firmware via MAVLink messages or change the devices
     |      settings. A message with zero bytes can be used to
     |      change just the baudrate.
     |      
     |      device                    : Serial control device type. (type:uint8_t, values:SERIAL_CONTROL_DEV)
     |      flags                     : Bitmap of serial control flags. (type:uint8_t, values:SERIAL_CONTROL_FLAG)
     |      timeout                   : Timeout for reply data [ms] (type:uint16_t)
     |      baudrate                  : Baudrate of transfer. Zero means no change. [bits/s] (type:uint32_t)
     |      count                     : how many bytes in this transfer [bytes] (type:uint8_t)
     |      data                      : serial data (type:uint8_t)
     |  
     |  servo_output_raw_encode(self, time_usec, port, servo1_raw, servo2_raw, servo3_raw, servo4_raw, servo5_raw, servo6_raw, servo7_raw, servo8_raw)
     |      Superseded by ACTUATOR_OUTPUT_STATUS. The RAW values of the servo
     |      outputs (for RC input from the remote, use the
     |      RC_CHANNELS messages). The standard PPM modulation is
     |      as follows: 1000 microseconds: 0%, 2000 microseconds:
     |      100%.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint32_t)
     |      port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (type:uint8_t)
     |      servo1_raw                : Servo output 1 value [us] (type:uint16_t)
     |      servo2_raw                : Servo output 2 value [us] (type:uint16_t)
     |      servo3_raw                : Servo output 3 value [us] (type:uint16_t)
     |      servo4_raw                : Servo output 4 value [us] (type:uint16_t)
     |      servo5_raw                : Servo output 5 value [us] (type:uint16_t)
     |      servo6_raw                : Servo output 6 value [us] (type:uint16_t)
     |      servo7_raw                : Servo output 7 value [us] (type:uint16_t)
     |      servo8_raw                : Servo output 8 value [us] (type:uint16_t)
     |  
     |  servo_output_raw_send(self, time_usec, port, servo1_raw, servo2_raw, servo3_raw, servo4_raw, servo5_raw, servo6_raw, servo7_raw, servo8_raw, force_mavlink1=False)
     |      Superseded by ACTUATOR_OUTPUT_STATUS. The RAW values of the servo
     |      outputs (for RC input from the remote, use the
     |      RC_CHANNELS messages). The standard PPM modulation is
     |      as follows: 1000 microseconds: 0%, 2000 microseconds:
     |      100%.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint32_t)
     |      port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (type:uint8_t)
     |      servo1_raw                : Servo output 1 value [us] (type:uint16_t)
     |      servo2_raw                : Servo output 2 value [us] (type:uint16_t)
     |      servo3_raw                : Servo output 3 value [us] (type:uint16_t)
     |      servo4_raw                : Servo output 4 value [us] (type:uint16_t)
     |      servo5_raw                : Servo output 5 value [us] (type:uint16_t)
     |      servo6_raw                : Servo output 6 value [us] (type:uint16_t)
     |      servo7_raw                : Servo output 7 value [us] (type:uint16_t)
     |      servo8_raw                : Servo output 8 value [us] (type:uint16_t)
     |  
     |  set_actuator_control_target_encode(self, time_usec, group_mlx, target_system, target_component, controls)
     |      Set the vehicle attitude and body angular rates.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      group_mlx                 : Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances. (type:uint8_t)
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      controls                  : Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs. (type:float)
     |  
     |  set_actuator_control_target_send(self, time_usec, group_mlx, target_system, target_component, controls, force_mavlink1=False)
     |      Set the vehicle attitude and body angular rates.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      group_mlx                 : Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances. (type:uint8_t)
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      controls                  : Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs. (type:float)
     |  
     |  set_attitude_target_encode(self, time_boot_ms, target_system, target_component, type_mask, q, body_roll_rate, body_pitch_rate, body_yaw_rate, thrust)
     |      Sets a desired vehicle attitude. Used by an external controller to
     |      command the vehicle (manual controller or other
     |      system).
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      type_mask                 : Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 6: reserved, bit 7: throttle, bit 8: attitude (type:uint8_t)
     |      q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (type:float)
     |      body_roll_rate            : Body roll rate [rad/s] (type:float)
     |      body_pitch_rate           : Body pitch rate [rad/s] (type:float)
     |      body_yaw_rate             : Body yaw rate [rad/s] (type:float)
     |      thrust                    : Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust) (type:float)
     |  
     |  set_attitude_target_send(self, time_boot_ms, target_system, target_component, type_mask, q, body_roll_rate, body_pitch_rate, body_yaw_rate, thrust, force_mavlink1=False)
     |      Sets a desired vehicle attitude. Used by an external controller to
     |      command the vehicle (manual controller or other
     |      system).
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      type_mask                 : Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 6: reserved, bit 7: throttle, bit 8: attitude (type:uint8_t)
     |      q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (type:float)
     |      body_roll_rate            : Body roll rate [rad/s] (type:float)
     |      body_pitch_rate           : Body pitch rate [rad/s] (type:float)
     |      body_yaw_rate             : Body yaw rate [rad/s] (type:float)
     |      thrust                    : Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust) (type:float)
     |  
     |  set_callback(self, callback, *args, **kwargs)
     |  
     |  set_gps_global_origin_encode(self, target_system, latitude, longitude, altitude)
     |      Sets the GPS co-ordinates of the vehicle local origin (0,0,0)
     |      position. Vehicle should emit GPS_GLOBAL_ORIGIN
     |      irrespective of whether the origin is changed. This
     |      enables transform between the local coordinate frame
     |      and the global (GPS) coordinate frame, which may be
     |      necessary when (for example) indoor and outdoor
     |      settings are connected and the MAV should move from
     |      in- to outdoor.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      latitude                  : Latitude (WGS84) [degE7] (type:int32_t)
     |      longitude                 : Longitude (WGS84) [degE7] (type:int32_t)
     |      altitude                  : Altitude (MSL). Positive for up. [mm] (type:int32_t)
     |  
     |  set_gps_global_origin_send(self, target_system, latitude, longitude, altitude, force_mavlink1=False)
     |      Sets the GPS co-ordinates of the vehicle local origin (0,0,0)
     |      position. Vehicle should emit GPS_GLOBAL_ORIGIN
     |      irrespective of whether the origin is changed. This
     |      enables transform between the local coordinate frame
     |      and the global (GPS) coordinate frame, which may be
     |      necessary when (for example) indoor and outdoor
     |      settings are connected and the MAV should move from
     |      in- to outdoor.
     |      
     |      target_system             : System ID (type:uint8_t)
     |      latitude                  : Latitude (WGS84) [degE7] (type:int32_t)
     |      longitude                 : Longitude (WGS84) [degE7] (type:int32_t)
     |      altitude                  : Altitude (MSL). Positive for up. [mm] (type:int32_t)
     |  
     |  set_home_position_encode(self, target_system, latitude, longitude, altitude, x, y, z, q, approach_x, approach_y, approach_z)
     |      The position the system will return to and land on. The position is
     |      set automatically by the system during the takeoff in
     |      case it was not explicitly set by the operator before
     |      or after. The global and local positions encode the
     |      position in the respective coordinate frames, while
     |      the q parameter encodes the orientation of the
     |      surface. Under normal conditions it describes the
     |      heading and terrain slope, which can be used by the
     |      aircraft to adjust the approach. The approach 3D
     |      vector describes the point to which the system should
     |      fly in normal flight mode and then perform a landing
     |      sequence along the vector.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      latitude                  : Latitude (WGS84) [degE7] (type:int32_t)
     |      longitude                 : Longitude (WGS84) [degE7] (type:int32_t)
     |      altitude                  : Altitude (MSL). Positive for up. [mm] (type:int32_t)
     |      x                         : Local X position of this position in the local coordinate frame [m] (type:float)
     |      y                         : Local Y position of this position in the local coordinate frame [m] (type:float)
     |      z                         : Local Z position of this position in the local coordinate frame [m] (type:float)
     |      q                         : World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground (type:float)
     |      approach_x                : Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
     |      approach_y                : Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
     |      approach_z                : Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
     |  
     |  set_home_position_send(self, target_system, latitude, longitude, altitude, x, y, z, q, approach_x, approach_y, approach_z, force_mavlink1=False)
     |      The position the system will return to and land on. The position is
     |      set automatically by the system during the takeoff in
     |      case it was not explicitly set by the operator before
     |      or after. The global and local positions encode the
     |      position in the respective coordinate frames, while
     |      the q parameter encodes the orientation of the
     |      surface. Under normal conditions it describes the
     |      heading and terrain slope, which can be used by the
     |      aircraft to adjust the approach. The approach 3D
     |      vector describes the point to which the system should
     |      fly in normal flight mode and then perform a landing
     |      sequence along the vector.
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      latitude                  : Latitude (WGS84) [degE7] (type:int32_t)
     |      longitude                 : Longitude (WGS84) [degE7] (type:int32_t)
     |      altitude                  : Altitude (MSL). Positive for up. [mm] (type:int32_t)
     |      x                         : Local X position of this position in the local coordinate frame [m] (type:float)
     |      y                         : Local Y position of this position in the local coordinate frame [m] (type:float)
     |      z                         : Local Z position of this position in the local coordinate frame [m] (type:float)
     |      q                         : World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground (type:float)
     |      approach_x                : Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
     |      approach_y                : Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
     |      approach_z                : Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. [m] (type:float)
     |  
     |  set_mag_offsets_encode(self, target_system, target_component, mag_ofs_x, mag_ofs_y, mag_ofs_z)
     |      Set the magnetometer offsets
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      mag_ofs_x                 : Magnetometer X offset. (type:int16_t)
     |      mag_ofs_y                 : Magnetometer Y offset. (type:int16_t)
     |      mag_ofs_z                 : Magnetometer Z offset. (type:int16_t)
     |  
     |  set_mag_offsets_send(self, target_system, target_component, mag_ofs_x, mag_ofs_y, mag_ofs_z, force_mavlink1=False)
     |      Set the magnetometer offsets
     |      
     |      target_system             : System ID. (type:uint8_t)
     |      target_component          : Component ID. (type:uint8_t)
     |      mag_ofs_x                 : Magnetometer X offset. (type:int16_t)
     |      mag_ofs_y                 : Magnetometer Y offset. (type:int16_t)
     |      mag_ofs_z                 : Magnetometer Z offset. (type:int16_t)
     |  
     |  set_mode_encode(self, target_system, base_mode, custom_mode)
     |      Set the system mode, as defined by enum MAV_MODE. There is no target
     |      component id as the mode is by definition for the
     |      overall aircraft, not only for one component.
     |      
     |      target_system             : The system setting the mode (type:uint8_t)
     |      base_mode                 : The new base mode. (type:uint8_t, values:MAV_MODE)
     |      custom_mode               : The new autopilot-specific mode. This field can be ignored by an autopilot. (type:uint32_t)
     |  
     |  set_mode_send(self, target_system, base_mode, custom_mode, force_mavlink1=False)
     |      Set the system mode, as defined by enum MAV_MODE. There is no target
     |      component id as the mode is by definition for the
     |      overall aircraft, not only for one component.
     |      
     |      target_system             : The system setting the mode (type:uint8_t)
     |      base_mode                 : The new base mode. (type:uint8_t, values:MAV_MODE)
     |      custom_mode               : The new autopilot-specific mode. This field can be ignored by an autopilot. (type:uint32_t)
     |  
     |  set_position_target_global_int_encode(self, time_boot_ms, target_system, target_component, coordinate_frame, type_mask, lat_int, lon_int, alt, vx, vy, vz, afx, afy, afz, yaw, yaw_rate)
     |      Sets a desired vehicle position, velocity, and/or acceleration in a
     |      global coordinate system (WGS84). Used by an external
     |      controller to command the vehicle (manual controller
     |      or other system).
     |      
     |      time_boot_ms              : Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency. [ms] (type:uint32_t)
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      coordinate_frame          : Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11 (type:uint8_t, values:MAV_FRAME)
     |      type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (type:uint16_t, values:POSITION_TARGET_TYPEMASK)
     |      lat_int                   : X Position in WGS84 frame [degE7] (type:int32_t)
     |      lon_int                   : Y Position in WGS84 frame [degE7] (type:int32_t)
     |      alt                       : Altitude (MSL, Relative to home, or AGL - depending on frame) [m] (type:float)
     |      vx                        : X velocity in NED frame [m/s] (type:float)
     |      vy                        : Y velocity in NED frame [m/s] (type:float)
     |      vz                        : Z velocity in NED frame [m/s] (type:float)
     |      afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      yaw                       : yaw setpoint [rad] (type:float)
     |      yaw_rate                  : yaw rate setpoint [rad/s] (type:float)
     |  
     |  set_position_target_global_int_send(self, time_boot_ms, target_system, target_component, coordinate_frame, type_mask, lat_int, lon_int, alt, vx, vy, vz, afx, afy, afz, yaw, yaw_rate, force_mavlink1=False)
     |      Sets a desired vehicle position, velocity, and/or acceleration in a
     |      global coordinate system (WGS84). Used by an external
     |      controller to command the vehicle (manual controller
     |      or other system).
     |      
     |      time_boot_ms              : Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency. [ms] (type:uint32_t)
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      coordinate_frame          : Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11 (type:uint8_t, values:MAV_FRAME)
     |      type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (type:uint16_t, values:POSITION_TARGET_TYPEMASK)
     |      lat_int                   : X Position in WGS84 frame [degE7] (type:int32_t)
     |      lon_int                   : Y Position in WGS84 frame [degE7] (type:int32_t)
     |      alt                       : Altitude (MSL, Relative to home, or AGL - depending on frame) [m] (type:float)
     |      vx                        : X velocity in NED frame [m/s] (type:float)
     |      vy                        : Y velocity in NED frame [m/s] (type:float)
     |      vz                        : Z velocity in NED frame [m/s] (type:float)
     |      afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      yaw                       : yaw setpoint [rad] (type:float)
     |      yaw_rate                  : yaw rate setpoint [rad/s] (type:float)
     |  
     |  set_position_target_local_ned_encode(self, time_boot_ms, target_system, target_component, coordinate_frame, type_mask, x, y, z, vx, vy, vz, afx, afy, afz, yaw, yaw_rate)
     |      Sets a desired vehicle position in a local north-east-down coordinate
     |      frame. Used by an external controller to command the
     |      vehicle (manual controller or other system).
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      coordinate_frame          : Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9 (type:uint8_t, values:MAV_FRAME)
     |      type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (type:uint16_t, values:POSITION_TARGET_TYPEMASK)
     |      x                         : X Position in NED frame [m] (type:float)
     |      y                         : Y Position in NED frame [m] (type:float)
     |      z                         : Z Position in NED frame (note, altitude is negative in NED) [m] (type:float)
     |      vx                        : X velocity in NED frame [m/s] (type:float)
     |      vy                        : Y velocity in NED frame [m/s] (type:float)
     |      vz                        : Z velocity in NED frame [m/s] (type:float)
     |      afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      yaw                       : yaw setpoint [rad] (type:float)
     |      yaw_rate                  : yaw rate setpoint [rad/s] (type:float)
     |  
     |  set_position_target_local_ned_send(self, time_boot_ms, target_system, target_component, coordinate_frame, type_mask, x, y, z, vx, vy, vz, afx, afy, afz, yaw, yaw_rate, force_mavlink1=False)
     |      Sets a desired vehicle position in a local north-east-down coordinate
     |      frame. Used by an external controller to command the
     |      vehicle (manual controller or other system).
     |      
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |      target_system             : System ID (type:uint8_t)
     |      target_component          : Component ID (type:uint8_t)
     |      coordinate_frame          : Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9 (type:uint8_t, values:MAV_FRAME)
     |      type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (type:uint16_t, values:POSITION_TARGET_TYPEMASK)
     |      x                         : X Position in NED frame [m] (type:float)
     |      y                         : Y Position in NED frame [m] (type:float)
     |      z                         : Z Position in NED frame (note, altitude is negative in NED) [m] (type:float)
     |      vx                        : X velocity in NED frame [m/s] (type:float)
     |      vy                        : Y velocity in NED frame [m/s] (type:float)
     |      vz                        : Z velocity in NED frame [m/s] (type:float)
     |      afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N [m/s/s] (type:float)
     |      yaw                       : yaw setpoint [rad] (type:float)
     |      yaw_rate                  : yaw rate setpoint [rad/s] (type:float)
     |  
     |  set_send_callback(self, callback, *args, **kwargs)
     |  
     |  sim_state_encode(self, q1, q2, q3, q4, roll, pitch, yaw, xacc, yacc, zacc, xgyro, ygyro, zgyro, lat, lon, alt, std_dev_horz, std_dev_vert, vn, ve, vd)
     |      Status of simulation environment, if used
     |      
     |      q1                        : True attitude quaternion component 1, w (1 in null-rotation) (type:float)
     |      q2                        : True attitude quaternion component 2, x (0 in null-rotation) (type:float)
     |      q3                        : True attitude quaternion component 3, y (0 in null-rotation) (type:float)
     |      q4                        : True attitude quaternion component 4, z (0 in null-rotation) (type:float)
     |      roll                      : Attitude roll expressed as Euler angles, not recommended except for human-readable outputs (type:float)
     |      pitch                     : Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs (type:float)
     |      yaw                       : Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs (type:float)
     |      xacc                      : X acceleration [m/s/s] (type:float)
     |      yacc                      : Y acceleration [m/s/s] (type:float)
     |      zacc                      : Z acceleration [m/s/s] (type:float)
     |      xgyro                     : Angular speed around X axis [rad/s] (type:float)
     |      ygyro                     : Angular speed around Y axis [rad/s] (type:float)
     |      zgyro                     : Angular speed around Z axis [rad/s] (type:float)
     |      lat                       : Latitude [deg] (type:float)
     |      lon                       : Longitude [deg] (type:float)
     |      alt                       : Altitude [m] (type:float)
     |      std_dev_horz              : Horizontal position standard deviation (type:float)
     |      std_dev_vert              : Vertical position standard deviation (type:float)
     |      vn                        : True velocity in north direction in earth-fixed NED frame [m/s] (type:float)
     |      ve                        : True velocity in east direction in earth-fixed NED frame [m/s] (type:float)
     |      vd                        : True velocity in down direction in earth-fixed NED frame [m/s] (type:float)
     |  
     |  sim_state_send(self, q1, q2, q3, q4, roll, pitch, yaw, xacc, yacc, zacc, xgyro, ygyro, zgyro, lat, lon, alt, std_dev_horz, std_dev_vert, vn, ve, vd, force_mavlink1=False)
     |      Status of simulation environment, if used
     |      
     |      q1                        : True attitude quaternion component 1, w (1 in null-rotation) (type:float)
     |      q2                        : True attitude quaternion component 2, x (0 in null-rotation) (type:float)
     |      q3                        : True attitude quaternion component 3, y (0 in null-rotation) (type:float)
     |      q4                        : True attitude quaternion component 4, z (0 in null-rotation) (type:float)
     |      roll                      : Attitude roll expressed as Euler angles, not recommended except for human-readable outputs (type:float)
     |      pitch                     : Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs (type:float)
     |      yaw                       : Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs (type:float)
     |      xacc                      : X acceleration [m/s/s] (type:float)
     |      yacc                      : Y acceleration [m/s/s] (type:float)
     |      zacc                      : Z acceleration [m/s/s] (type:float)
     |      xgyro                     : Angular speed around X axis [rad/s] (type:float)
     |      ygyro                     : Angular speed around Y axis [rad/s] (type:float)
     |      zgyro                     : Angular speed around Z axis [rad/s] (type:float)
     |      lat                       : Latitude [deg] (type:float)
     |      lon                       : Longitude [deg] (type:float)
     |      alt                       : Altitude [m] (type:float)
     |      std_dev_horz              : Horizontal position standard deviation (type:float)
     |      std_dev_vert              : Vertical position standard deviation (type:float)
     |      vn                        : True velocity in north direction in earth-fixed NED frame [m/s] (type:float)
     |      ve                        : True velocity in east direction in earth-fixed NED frame [m/s] (type:float)
     |      vd                        : True velocity in down direction in earth-fixed NED frame [m/s] (type:float)
     |  
     |  simstate_encode(self, roll, pitch, yaw, xacc, yacc, zacc, xgyro, ygyro, zgyro, lat, lng)
     |      Status of simulation environment, if used.
     |      
     |      roll                      : Roll angle. [rad] (type:float)
     |      pitch                     : Pitch angle. [rad] (type:float)
     |      yaw                       : Yaw angle. [rad] (type:float)
     |      xacc                      : X acceleration. [m/s/s] (type:float)
     |      yacc                      : Y acceleration. [m/s/s] (type:float)
     |      zacc                      : Z acceleration. [m/s/s] (type:float)
     |      xgyro                     : Angular speed around X axis. [rad/s] (type:float)
     |      ygyro                     : Angular speed around Y axis. [rad/s] (type:float)
     |      zgyro                     : Angular speed around Z axis. [rad/s] (type:float)
     |      lat                       : Latitude. [degE7] (type:int32_t)
     |      lng                       : Longitude. [degE7] (type:int32_t)
     |  
     |  simstate_send(self, roll, pitch, yaw, xacc, yacc, zacc, xgyro, ygyro, zgyro, lat, lng, force_mavlink1=False)
     |      Status of simulation environment, if used.
     |      
     |      roll                      : Roll angle. [rad] (type:float)
     |      pitch                     : Pitch angle. [rad] (type:float)
     |      yaw                       : Yaw angle. [rad] (type:float)
     |      xacc                      : X acceleration. [m/s/s] (type:float)
     |      yacc                      : Y acceleration. [m/s/s] (type:float)
     |      zacc                      : Z acceleration. [m/s/s] (type:float)
     |      xgyro                     : Angular speed around X axis. [rad/s] (type:float)
     |      ygyro                     : Angular speed around Y axis. [rad/s] (type:float)
     |      zgyro                     : Angular speed around Z axis. [rad/s] (type:float)
     |      lat                       : Latitude. [degE7] (type:int32_t)
     |      lng                       : Longitude. [degE7] (type:int32_t)
     |  
     |  statustext_encode(self, severity, text)
     |      Status text message. These messages are printed in yellow in the COMM
     |      console of QGroundControl. WARNING: They consume quite
     |      some bandwidth, so use only for important status and
     |      error messages. If implemented wisely, these messages
     |      are buffered on the MCU and sent only at a limited
     |      rate (e.g. 10 Hz).
     |      
     |      severity                  : Severity of status. Relies on the definitions within RFC-5424. (type:uint8_t, values:MAV_SEVERITY)
     |      text                      : Status text message, without null termination character (type:char)
     |  
     |  statustext_send(self, severity, text, force_mavlink1=False)
     |      Status text message. These messages are printed in yellow in the COMM
     |      console of QGroundControl. WARNING: They consume quite
     |      some bandwidth, so use only for important status and
     |      error messages. If implemented wisely, these messages
     |      are buffered on the MCU and sent only at a limited
     |      rate (e.g. 10 Hz).
     |      
     |      severity                  : Severity of status. Relies on the definitions within RFC-5424. (type:uint8_t, values:MAV_SEVERITY)
     |      text                      : Status text message, without null termination character (type:char)
     |  
     |  sys_status_encode(self, onboard_control_sensors_present, onboard_control_sensors_enabled, onboard_control_sensors_health, load, voltage_battery, current_battery, battery_remaining, drop_rate_comm, errors_comm, errors_count1, errors_count2, errors_count3, errors_count4)
     |      The general system state. If the system is following the MAVLink
     |      standard, the system state is mainly defined by three
     |      orthogonal states/modes: The system mode, which is
     |      either LOCKED (motors shut down and locked), MANUAL
     |      (system under RC control), GUIDED (system with
     |      autonomous position control, position setpoint
     |      controlled manually) or AUTO (system guided by
     |      path/waypoint planner). The NAV_MODE defined the
     |      current flight state: LIFTOFF (often an open-loop
     |      maneuver), LANDING, WAYPOINTS or VECTOR. This
     |      represents the internal navigation state machine. The
     |      system status shows whether the system is currently
     |      active or not and if an emergency occurred. During the
     |      CRITICAL and EMERGENCY states the MAV is still
     |      considered to be active, but should start emergency
     |      procedures autonomously. After a failure occurred it
     |      should first move from active to critical to allow
     |      manual intervention and then move to emergency after a
     |      certain timeout.
     |      
     |      onboard_control_sensors_present        : Bitmap showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present. (type:uint32_t, values:MAV_SYS_STATUS_SENSOR)
     |      onboard_control_sensors_enabled        : Bitmap showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled. (type:uint32_t, values:MAV_SYS_STATUS_SENSOR)
     |      onboard_control_sensors_health        : Bitmap showing which onboard controllers and sensors have an error (or are operational). Value of 0: error. Value of 1: healthy. (type:uint32_t, values:MAV_SYS_STATUS_SENSOR)
     |      load                      : Maximum usage in percent of the mainloop time. Values: [0-1000] - should always be below 1000 [d%] (type:uint16_t)
     |      voltage_battery           : Battery voltage, UINT16_MAX: Voltage not sent by autopilot [mV] (type:uint16_t)
     |      current_battery           : Battery current, -1: Current not sent by autopilot [cA] (type:int16_t)
     |      battery_remaining         : Battery energy remaining, -1: Battery remaining energy not sent by autopilot [%] (type:int8_t)
     |      drop_rate_comm            : Communication drop rate, (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV) [c%] (type:uint16_t)
     |      errors_comm               : Communication errors (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV) (type:uint16_t)
     |      errors_count1             : Autopilot-specific errors (type:uint16_t)
     |      errors_count2             : Autopilot-specific errors (type:uint16_t)
     |      errors_count3             : Autopilot-specific errors (type:uint16_t)
     |      errors_count4             : Autopilot-specific errors (type:uint16_t)
     |  
     |  sys_status_send(self, onboard_control_sensors_present, onboard_control_sensors_enabled, onboard_control_sensors_health, load, voltage_battery, current_battery, battery_remaining, drop_rate_comm, errors_comm, errors_count1, errors_count2, errors_count3, errors_count4, force_mavlink1=False)
     |      The general system state. If the system is following the MAVLink
     |      standard, the system state is mainly defined by three
     |      orthogonal states/modes: The system mode, which is
     |      either LOCKED (motors shut down and locked), MANUAL
     |      (system under RC control), GUIDED (system with
     |      autonomous position control, position setpoint
     |      controlled manually) or AUTO (system guided by
     |      path/waypoint planner). The NAV_MODE defined the
     |      current flight state: LIFTOFF (often an open-loop
     |      maneuver), LANDING, WAYPOINTS or VECTOR. This
     |      represents the internal navigation state machine. The
     |      system status shows whether the system is currently
     |      active or not and if an emergency occurred. During the
     |      CRITICAL and EMERGENCY states the MAV is still
     |      considered to be active, but should start emergency
     |      procedures autonomously. After a failure occurred it
     |      should first move from active to critical to allow
     |      manual intervention and then move to emergency after a
     |      certain timeout.
     |      
     |      onboard_control_sensors_present        : Bitmap showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present. (type:uint32_t, values:MAV_SYS_STATUS_SENSOR)
     |      onboard_control_sensors_enabled        : Bitmap showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled. (type:uint32_t, values:MAV_SYS_STATUS_SENSOR)
     |      onboard_control_sensors_health        : Bitmap showing which onboard controllers and sensors have an error (or are operational). Value of 0: error. Value of 1: healthy. (type:uint32_t, values:MAV_SYS_STATUS_SENSOR)
     |      load                      : Maximum usage in percent of the mainloop time. Values: [0-1000] - should always be below 1000 [d%] (type:uint16_t)
     |      voltage_battery           : Battery voltage, UINT16_MAX: Voltage not sent by autopilot [mV] (type:uint16_t)
     |      current_battery           : Battery current, -1: Current not sent by autopilot [cA] (type:int16_t)
     |      battery_remaining         : Battery energy remaining, -1: Battery remaining energy not sent by autopilot [%] (type:int8_t)
     |      drop_rate_comm            : Communication drop rate, (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV) [c%] (type:uint16_t)
     |      errors_comm               : Communication errors (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV) (type:uint16_t)
     |      errors_count1             : Autopilot-specific errors (type:uint16_t)
     |      errors_count2             : Autopilot-specific errors (type:uint16_t)
     |      errors_count3             : Autopilot-specific errors (type:uint16_t)
     |      errors_count4             : Autopilot-specific errors (type:uint16_t)
     |  
     |  system_time_encode(self, time_unix_usec, time_boot_ms)
     |      The system time is the time of the master clock, typically the
     |      computer clock of the main onboard computer.
     |      
     |      time_unix_usec            : Timestamp (UNIX epoch time). [us] (type:uint64_t)
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |  
     |  system_time_send(self, time_unix_usec, time_boot_ms, force_mavlink1=False)
     |      The system time is the time of the master clock, typically the
     |      computer clock of the main onboard computer.
     |      
     |      time_unix_usec            : Timestamp (UNIX epoch time). [us] (type:uint64_t)
     |      time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
     |  
     |  terrain_check_encode(self, lat, lon)
     |      Request that the vehicle report terrain height at the given location.
     |      Used by GCS to check if vehicle has all terrain data
     |      needed for a mission.
     |      
     |      lat                       : Latitude [degE7] (type:int32_t)
     |      lon                       : Longitude [degE7] (type:int32_t)
     |  
     |  terrain_check_send(self, lat, lon, force_mavlink1=False)
     |      Request that the vehicle report terrain height at the given location.
     |      Used by GCS to check if vehicle has all terrain data
     |      needed for a mission.
     |      
     |      lat                       : Latitude [degE7] (type:int32_t)
     |      lon                       : Longitude [degE7] (type:int32_t)
     |  
     |  terrain_data_encode(self, lat, lon, grid_spacing, gridbit, data)
     |      Terrain data sent from GCS. The lat/lon and grid_spacing must be the
     |      same as a lat/lon from a TERRAIN_REQUEST
     |      
     |      lat                       : Latitude of SW corner of first grid [degE7] (type:int32_t)
     |      lon                       : Longitude of SW corner of first grid [degE7] (type:int32_t)
     |      grid_spacing              : Grid spacing [m] (type:uint16_t)
     |      gridbit                   : bit within the terrain request mask (type:uint8_t)
     |      data                      : Terrain data MSL [m] (type:int16_t)
     |  
     |  terrain_data_send(self, lat, lon, grid_spacing, gridbit, data, force_mavlink1=False)
     |      Terrain data sent from GCS. The lat/lon and grid_spacing must be the
     |      same as a lat/lon from a TERRAIN_REQUEST
     |      
     |      lat                       : Latitude of SW corner of first grid [degE7] (type:int32_t)
     |      lon                       : Longitude of SW corner of first grid [degE7] (type:int32_t)
     |      grid_spacing              : Grid spacing [m] (type:uint16_t)
     |      gridbit                   : bit within the terrain request mask (type:uint8_t)
     |      data                      : Terrain data MSL [m] (type:int16_t)
     |  
     |  terrain_report_encode(self, lat, lon, spacing, terrain_height, current_height, pending, loaded)
     |      Response from a TERRAIN_CHECK request
     |      
     |      lat                       : Latitude [degE7] (type:int32_t)
     |      lon                       : Longitude [degE7] (type:int32_t)
     |      spacing                   : grid spacing (zero if terrain at this location unavailable) (type:uint16_t)
     |      terrain_height            : Terrain height MSL [m] (type:float)
     |      current_height            : Current vehicle height above lat/lon terrain height [m] (type:float)
     |      pending                   : Number of 4x4 terrain blocks waiting to be received or read from disk (type:uint16_t)
     |      loaded                    : Number of 4x4 terrain blocks in memory (type:uint16_t)
     |  
     |  terrain_report_send(self, lat, lon, spacing, terrain_height, current_height, pending, loaded, force_mavlink1=False)
     |      Response from a TERRAIN_CHECK request
     |      
     |      lat                       : Latitude [degE7] (type:int32_t)
     |      lon                       : Longitude [degE7] (type:int32_t)
     |      spacing                   : grid spacing (zero if terrain at this location unavailable) (type:uint16_t)
     |      terrain_height            : Terrain height MSL [m] (type:float)
     |      current_height            : Current vehicle height above lat/lon terrain height [m] (type:float)
     |      pending                   : Number of 4x4 terrain blocks waiting to be received or read from disk (type:uint16_t)
     |      loaded                    : Number of 4x4 terrain blocks in memory (type:uint16_t)
     |  
     |  terrain_request_encode(self, lat, lon, grid_spacing, mask)
     |      Request for terrain data and terrain status
     |      
     |      lat                       : Latitude of SW corner of first grid [degE7] (type:int32_t)
     |      lon                       : Longitude of SW corner of first grid [degE7] (type:int32_t)
     |      grid_spacing              : Grid spacing [m] (type:uint16_t)
     |      mask                      : Bitmask of requested 4x4 grids (row major 8x7 array of grids, 56 bits) (type:uint64_t)
     |  
     |  terrain_request_send(self, lat, lon, grid_spacing, mask, force_mavlink1=False)
     |      Request for terrain data and terrain status
     |      
     |      lat                       : Latitude of SW corner of first grid [degE7] (type:int32_t)
     |      lon                       : Longitude of SW corner of first grid [degE7] (type:int32_t)
     |      grid_spacing              : Grid spacing [m] (type:uint16_t)
     |      mask                      : Bitmask of requested 4x4 grids (row major 8x7 array of grids, 56 bits) (type:uint64_t)
     |  
     |  timesync_encode(self, tc1, ts1)
     |      Time synchronization message.
     |      
     |      tc1                       : Time sync timestamp 1 (type:int64_t)
     |      ts1                       : Time sync timestamp 2 (type:int64_t)
     |  
     |  timesync_send(self, tc1, ts1, force_mavlink1=False)
     |      Time synchronization message.
     |      
     |      tc1                       : Time sync timestamp 1 (type:int64_t)
     |      ts1                       : Time sync timestamp 2 (type:int64_t)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  v2_extension_encode(self, target_network, target_system, target_component, message_type, payload)
     |      Message implementing parts of the V2 payload specs in V1 frames for
     |      transitional support.
     |      
     |      target_network            : Network ID (0 for broadcast) (type:uint8_t)
     |      target_system             : System ID (0 for broadcast) (type:uint8_t)
     |      target_component          : Component ID (0 for broadcast) (type:uint8_t)
     |      message_type              : A code that identifies the software component that understands this message (analogous to USB device classes or mime type strings). If this code is less than 32768, it is considered a 'registered' protocol extension and the corresponding entry should be added to https://github.com/mavlink/mavlink/definition_files/extension_message_ids.xml. Software creators can register blocks of message IDs as needed (useful for GCS specific metadata, etc...). Message_types greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase. (type:uint16_t)
     |      payload                   : Variable length payload. The length must be encoded in the payload as part of the message_type protocol, e.g. by including the length as payload data, or by terminating the payload data with a non-zero marker. This is required in order to reconstruct zero-terminated payloads that are (or otherwise would be) trimmed by MAVLink 2 empty-byte truncation. The entire content of the payload block is opaque unless you understand the encoding message_type. The particular encoding used can be extension specific and might not always be documented as part of the MAVLink specification. (type:uint8_t)
     |  
     |  v2_extension_send(self, target_network, target_system, target_component, message_type, payload, force_mavlink1=False)
     |      Message implementing parts of the V2 payload specs in V1 frames for
     |      transitional support.
     |      
     |      target_network            : Network ID (0 for broadcast) (type:uint8_t)
     |      target_system             : System ID (0 for broadcast) (type:uint8_t)
     |      target_component          : Component ID (0 for broadcast) (type:uint8_t)
     |      message_type              : A code that identifies the software component that understands this message (analogous to USB device classes or mime type strings). If this code is less than 32768, it is considered a 'registered' protocol extension and the corresponding entry should be added to https://github.com/mavlink/mavlink/definition_files/extension_message_ids.xml. Software creators can register blocks of message IDs as needed (useful for GCS specific metadata, etc...). Message_types greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase. (type:uint16_t)
     |      payload                   : Variable length payload. The length must be encoded in the payload as part of the message_type protocol, e.g. by including the length as payload data, or by terminating the payload data with a non-zero marker. This is required in order to reconstruct zero-terminated payloads that are (or otherwise would be) trimmed by MAVLink 2 empty-byte truncation. The entire content of the payload block is opaque unless you understand the encoding message_type. The particular encoding used can be extension specific and might not always be documented as part of the MAVLink specification. (type:uint8_t)
     |  
     |  vfr_hud_encode(self, airspeed, groundspeed, heading, throttle, alt, climb)
     |      Metrics typically displayed on a HUD for fixed wing aircraft.
     |      
     |      airspeed                  : Current indicated airspeed (IAS). [m/s] (type:float)
     |      groundspeed               : Current ground speed. [m/s] (type:float)
     |      heading                   : Current heading in compass units (0-360, 0=north). [deg] (type:int16_t)
     |      throttle                  : Current throttle setting (0 to 100). [%] (type:uint16_t)
     |      alt                       : Current altitude (MSL). [m] (type:float)
     |      climb                     : Current climb rate. [m/s] (type:float)
     |  
     |  vfr_hud_send(self, airspeed, groundspeed, heading, throttle, alt, climb, force_mavlink1=False)
     |      Metrics typically displayed on a HUD for fixed wing aircraft.
     |      
     |      airspeed                  : Current indicated airspeed (IAS). [m/s] (type:float)
     |      groundspeed               : Current ground speed. [m/s] (type:float)
     |      heading                   : Current heading in compass units (0-360, 0=north). [deg] (type:int16_t)
     |      throttle                  : Current throttle setting (0 to 100). [%] (type:uint16_t)
     |      alt                       : Current altitude (MSL). [m] (type:float)
     |      climb                     : Current climb rate. [m/s] (type:float)
     |  
     |  vibration_encode(self, time_usec, vibration_x, vibration_y, vibration_z, clipping_0, clipping_1, clipping_2)
     |      Vibration levels and accelerometer clipping
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      vibration_x               : Vibration levels on X-axis (type:float)
     |      vibration_y               : Vibration levels on Y-axis (type:float)
     |      vibration_z               : Vibration levels on Z-axis (type:float)
     |      clipping_0                : first accelerometer clipping count (type:uint32_t)
     |      clipping_1                : second accelerometer clipping count (type:uint32_t)
     |      clipping_2                : third accelerometer clipping count (type:uint32_t)
     |  
     |  vibration_send(self, time_usec, vibration_x, vibration_y, vibration_z, clipping_0, clipping_1, clipping_2, force_mavlink1=False)
     |      Vibration levels and accelerometer clipping
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      vibration_x               : Vibration levels on X-axis (type:float)
     |      vibration_y               : Vibration levels on Y-axis (type:float)
     |      vibration_z               : Vibration levels on Z-axis (type:float)
     |      clipping_0                : first accelerometer clipping count (type:uint32_t)
     |      clipping_1                : second accelerometer clipping count (type:uint32_t)
     |      clipping_2                : third accelerometer clipping count (type:uint32_t)
     |  
     |  vicon_position_estimate_encode(self, usec, x, y, z, roll, pitch, yaw)
     |      Global position estimate from a Vicon motion system source.
     |      
     |      usec                      : Timestamp (UNIX time or time since system boot) [us] (type:uint64_t)
     |      x                         : Global X position [m] (type:float)
     |      y                         : Global Y position [m] (type:float)
     |      z                         : Global Z position [m] (type:float)
     |      roll                      : Roll angle [rad] (type:float)
     |      pitch                     : Pitch angle [rad] (type:float)
     |      yaw                       : Yaw angle [rad] (type:float)
     |  
     |  vicon_position_estimate_send(self, usec, x, y, z, roll, pitch, yaw, force_mavlink1=False)
     |      Global position estimate from a Vicon motion system source.
     |      
     |      usec                      : Timestamp (UNIX time or time since system boot) [us] (type:uint64_t)
     |      x                         : Global X position [m] (type:float)
     |      y                         : Global Y position [m] (type:float)
     |      z                         : Global Z position [m] (type:float)
     |      roll                      : Roll angle [rad] (type:float)
     |      pitch                     : Pitch angle [rad] (type:float)
     |      yaw                       : Yaw angle [rad] (type:float)
     |  
     |  vision_position_estimate_encode(self, usec, x, y, z, roll, pitch, yaw)
     |      Local position/attitude estimate from a vision source.
     |      
     |      usec                      : Timestamp (UNIX time or time since system boot) [us] (type:uint64_t)
     |      x                         : Local X position [m] (type:float)
     |      y                         : Local Y position [m] (type:float)
     |      z                         : Local Z position [m] (type:float)
     |      roll                      : Roll angle [rad] (type:float)
     |      pitch                     : Pitch angle [rad] (type:float)
     |      yaw                       : Yaw angle [rad] (type:float)
     |  
     |  vision_position_estimate_send(self, usec, x, y, z, roll, pitch, yaw, force_mavlink1=False)
     |      Local position/attitude estimate from a vision source.
     |      
     |      usec                      : Timestamp (UNIX time or time since system boot) [us] (type:uint64_t)
     |      x                         : Local X position [m] (type:float)
     |      y                         : Local Y position [m] (type:float)
     |      z                         : Local Z position [m] (type:float)
     |      roll                      : Roll angle [rad] (type:float)
     |      pitch                     : Pitch angle [rad] (type:float)
     |      yaw                       : Yaw angle [rad] (type:float)
     |  
     |  vision_speed_estimate_encode(self, usec, x, y, z)
     |      Speed estimate from a vision source.
     |      
     |      usec                      : Timestamp (UNIX time or time since system boot) [us] (type:uint64_t)
     |      x                         : Global X speed [m/s] (type:float)
     |      y                         : Global Y speed [m/s] (type:float)
     |      z                         : Global Z speed [m/s] (type:float)
     |  
     |  vision_speed_estimate_send(self, usec, x, y, z, force_mavlink1=False)
     |      Speed estimate from a vision source.
     |      
     |      usec                      : Timestamp (UNIX time or time since system boot) [us] (type:uint64_t)
     |      x                         : Global X speed [m/s] (type:float)
     |      y                         : Global Y speed [m/s] (type:float)
     |      z                         : Global Z speed [m/s] (type:float)
     |  
     |  wind_cov_encode(self, time_usec, wind_x, wind_y, wind_z, var_horiz, var_vert, wind_alt, horiz_accuracy, vert_accuracy)
     |      Wind covariance estimate from vehicle.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      wind_x                    : Wind in X (NED) direction [m/s] (type:float)
     |      wind_y                    : Wind in Y (NED) direction [m/s] (type:float)
     |      wind_z                    : Wind in Z (NED) direction [m/s] (type:float)
     |      var_horiz                 : Variability of the wind in XY. RMS of a 1 Hz lowpassed wind estimate. [m/s] (type:float)
     |      var_vert                  : Variability of the wind in Z. RMS of a 1 Hz lowpassed wind estimate. [m/s] (type:float)
     |      wind_alt                  : Altitude (MSL) that this measurement was taken at [m] (type:float)
     |      horiz_accuracy            : Horizontal speed 1-STD accuracy [m] (type:float)
     |      vert_accuracy             : Vertical speed 1-STD accuracy [m] (type:float)
     |  
     |  wind_cov_send(self, time_usec, wind_x, wind_y, wind_z, var_horiz, var_vert, wind_alt, horiz_accuracy, vert_accuracy, force_mavlink1=False)
     |      Wind covariance estimate from vehicle.
     |      
     |      time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number. [us] (type:uint64_t)
     |      wind_x                    : Wind in X (NED) direction [m/s] (type:float)
     |      wind_y                    : Wind in Y (NED) direction [m/s] (type:float)
     |      wind_z                    : Wind in Z (NED) direction [m/s] (type:float)
     |      var_horiz                 : Variability of the wind in XY. RMS of a 1 Hz lowpassed wind estimate. [m/s] (type:float)
     |      var_vert                  : Variability of the wind in Z. RMS of a 1 Hz lowpassed wind estimate. [m/s] (type:float)
     |      wind_alt                  : Altitude (MSL) that this measurement was taken at [m] (type:float)
     |      horiz_accuracy            : Horizontal speed 1-STD accuracy [m] (type:float)
     |      vert_accuracy             : Vertical speed 1-STD accuracy [m] (type:float)
     |  
     |  wind_encode(self, direction, speed, speed_z)
     |      Wind estimation.
     |      
     |      direction                 : Wind direction (that wind is coming from). [deg] (type:float)
     |      speed                     : Wind speed in ground plane. [m/s] (type:float)
     |      speed_z                   : Vertical wind speed. [m/s] (type:float)
     |  
     |  wind_send(self, direction, speed, speed_z, force_mavlink1=False)
     |      Wind estimation.
     |      
     |      direction                 : Wind direction (that wind is coming from). [deg] (type:float)
     |      speed                     : Wind speed in ground plane. [m/s] (type:float)
     |      speed_z                   : Vertical wind speed. [m/s] (type:float)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class MAVLinkSigning(builtins.object)
     |  MAVLink signing state class
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class MAVLink_actuator_control_target_message(MAVLink_message)
     |  Set the vehicle attitude and body angular rates.
     |  
     |  Method resolution order:
     |      MAVLink_actuator_control_target_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, group_mlx, controls)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 8, 0]
     |  
     |  crc_extra = 181
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'group_mlx', 'controls']
     |  
     |  fieldtypes = ['uint64_t', 'uint8_t', 'float']
     |  
     |  fieldunits_by_name = {'time_usec': 'us'}
     |  
     |  format = '<Q8fB'
     |  
     |  id = 140
     |  
     |  lengths = [1, 8, 1]
     |  
     |  name = 'ACTUATOR_CONTROL_TARGET'
     |  
     |  native_format = bytearray(b'<QfB')
     |  
     |  ordered_fieldnames = ['time_usec', 'controls', 'group_mlx']
     |  
     |  orders = [0, 2, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_adsb_vehicle_message(MAVLink_message)
     |  The location and information of an ADSB vehicle
     |  
     |  Method resolution order:
     |      MAVLink_adsb_vehicle_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, ICAO_address, lat, lon, altitude_type, altitude, heading, hor_velocity, ver_velocity, callsign, emitter_type, tslc, flags, squawk)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0]
     |  
     |  crc_extra = 184
     |  
     |  fielddisplays_by_name = {'flags': 'bitmask'}
     |  
     |  fieldenums_by_name = {'altitude_type': 'ADSB_ALTITUDE_TYPE', 'emitter_...
     |  
     |  fieldnames = ['ICAO_address', 'lat', 'lon', 'altitude_type', 'altitude...
     |  
     |  fieldtypes = ['uint32_t', 'int32_t', 'int32_t', 'uint8_t', 'int32_t', ...
     |  
     |  fieldunits_by_name = {'altitude': 'mm', 'heading': 'cdeg', 'hor_veloci...
     |  
     |  format = '<IiiiHHhHHB9sBB'
     |  
     |  id = 246
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'ADSB_VEHICLE'
     |  
     |  native_format = bytearray(b'<IiiiHHhHHBcBB')
     |  
     |  ordered_fieldnames = ['ICAO_address', 'lat', 'lon', 'altitude', 'headi...
     |  
     |  orders = [0, 1, 2, 9, 3, 4, 5, 6, 10, 11, 12, 7, 8]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_ahrs2_message(MAVLink_message)
     |  Status of secondary AHRS filter if available.
     |  
     |  Method resolution order:
     |      MAVLink_ahrs2_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, roll, pitch, yaw, altitude, lat, lng)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 47
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['roll', 'pitch', 'yaw', 'altitude', 'lat', 'lng']
     |  
     |  fieldtypes = ['float', 'float', 'float', 'float', 'int32_t', 'int32_t'...
     |  
     |  fieldunits_by_name = {'altitude': 'm', 'lat': 'degE7', 'lng': 'degE7',...
     |  
     |  format = '<ffffii'
     |  
     |  id = 178
     |  
     |  lengths = [1, 1, 1, 1, 1, 1]
     |  
     |  name = 'AHRS2'
     |  
     |  native_format = bytearray(b'<ffffii')
     |  
     |  ordered_fieldnames = ['roll', 'pitch', 'yaw', 'altitude', 'lat', 'lng'...
     |  
     |  orders = [0, 1, 2, 3, 4, 5]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_ahrs3_message(MAVLink_message)
     |  Status of third AHRS filter if available. This is for ANU
     |  research group (Ali and Sean).
     |  
     |  Method resolution order:
     |      MAVLink_ahrs3_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, roll, pitch, yaw, altitude, lat, lng, v1, v2, v3, v4)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 229
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['roll', 'pitch', 'yaw', 'altitude', 'lat', 'lng', 'v1', ...
     |  
     |  fieldtypes = ['float', 'float', 'float', 'float', 'int32_t', 'int32_t'...
     |  
     |  fieldunits_by_name = {'altitude': 'm', 'lat': 'degE7', 'lng': 'degE7',...
     |  
     |  format = '<ffffiiffff'
     |  
     |  id = 182
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'AHRS3'
     |  
     |  native_format = bytearray(b'<ffffiiffff')
     |  
     |  ordered_fieldnames = ['roll', 'pitch', 'yaw', 'altitude', 'lat', 'lng'...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_ahrs_message(MAVLink_message)
     |  Status of DCM attitude estimator.
     |  
     |  Method resolution order:
     |      MAVLink_ahrs_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, omegaIx, omegaIy, omegaIz, accel_weight, renorm_val, error_rp, error_yaw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 127
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['omegaIx', 'omegaIy', 'omegaIz', 'accel_weight', 'renorm...
     |  
     |  fieldtypes = ['float', 'float', 'float', 'float', 'float', 'float', 'f...
     |  
     |  fieldunits_by_name = {'omegaIx': 'rad/s', 'omegaIy': 'rad/s', 'omegaIz...
     |  
     |  format = '<fffffff'
     |  
     |  id = 163
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'AHRS'
     |  
     |  native_format = bytearray(b'<fffffff')
     |  
     |  ordered_fieldnames = ['omegaIx', 'omegaIy', 'omegaIz', 'accel_weight',...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_airspeed_autocal_message(MAVLink_message)
     |  Airspeed auto-calibration.
     |  
     |  Method resolution order:
     |      MAVLink_airspeed_autocal_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, vx, vy, vz, diff_pressure, EAS2TAS, ratio, state_x, state_y, state_z, Pax, Pby, Pcz)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 167
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['vx', 'vy', 'vz', 'diff_pressure', 'EAS2TAS', 'ratio', '...
     |  
     |  fieldtypes = ['float', 'float', 'float', 'float', 'float', 'float', 'f...
     |  
     |  fieldunits_by_name = {'diff_pressure': 'Pa', 'vx': 'm/s', 'vy': 'm/s',...
     |  
     |  format = '<ffffffffffff'
     |  
     |  id = 174
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'AIRSPEED_AUTOCAL'
     |  
     |  native_format = bytearray(b'<ffffffffffff')
     |  
     |  ordered_fieldnames = ['vx', 'vy', 'vz', 'diff_pressure', 'EAS2TAS', 'r...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_altitude_message(MAVLink_message)
     |  The current system altitude.
     |  
     |  Method resolution order:
     |      MAVLink_altitude_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, altitude_monotonic, altitude_amsl, altitude_local, altitude_relative, altitude_terrain, bottom_clearance)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 47
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'altitude_monotonic', 'altitude_amsl', 'alt...
     |  
     |  fieldtypes = ['uint64_t', 'float', 'float', 'float', 'float', 'float',...
     |  
     |  fieldunits_by_name = {'altitude_amsl': 'm', 'altitude_local': 'm', 'al...
     |  
     |  format = '<Qffffff'
     |  
     |  id = 141
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'ALTITUDE'
     |  
     |  native_format = bytearray(b'<Qffffff')
     |  
     |  ordered_fieldnames = ['time_usec', 'altitude_monotonic', 'altitude_ams...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_ap_adc_message(MAVLink_message)
     |  Raw ADC output.
     |  
     |  Method resolution order:
     |      MAVLink_ap_adc_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, adc1, adc2, adc3, adc4, adc5, adc6)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 188
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['adc1', 'adc2', 'adc3', 'adc4', 'adc5', 'adc6']
     |  
     |  fieldtypes = ['uint16_t', 'uint16_t', 'uint16_t', 'uint16_t', 'uint16_...
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<HHHHHH'
     |  
     |  id = 153
     |  
     |  lengths = [1, 1, 1, 1, 1, 1]
     |  
     |  name = 'AP_ADC'
     |  
     |  native_format = bytearray(b'<HHHHHH')
     |  
     |  ordered_fieldnames = ['adc1', 'adc2', 'adc3', 'adc4', 'adc5', 'adc6']
     |  
     |  orders = [0, 1, 2, 3, 4, 5]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_att_pos_mocap_message(MAVLink_message)
     |  Motion capture attitude and position
     |  
     |  Method resolution order:
     |      MAVLink_att_pos_mocap_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, q, x, y, z)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 4, 0, 0, 0]
     |  
     |  crc_extra = 109
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'q', 'x', 'y', 'z']
     |  
     |  fieldtypes = ['uint64_t', 'float', 'float', 'float', 'float']
     |  
     |  fieldunits_by_name = {'time_usec': 'us', 'x': 'm', 'y': 'm', 'z': 'm'}
     |  
     |  format = '<Q4ffff'
     |  
     |  id = 138
     |  
     |  lengths = [1, 4, 1, 1, 1]
     |  
     |  name = 'ATT_POS_MOCAP'
     |  
     |  native_format = bytearray(b'<Qffff')
     |  
     |  ordered_fieldnames = ['time_usec', 'q', 'x', 'y', 'z']
     |  
     |  orders = [0, 1, 2, 3, 4]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_attitude_message(MAVLink_message)
     |  The attitude in the aeronautical frame (right-handed, Z-down,
     |  X-front, Y-right).
     |  
     |  Method resolution order:
     |      MAVLink_attitude_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 39
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'roll', 'pitch', 'yaw', 'rollspeed', 'pi...
     |  
     |  fieldtypes = ['uint32_t', 'float', 'float', 'float', 'float', 'float',...
     |  
     |  fieldunits_by_name = {'pitch': 'rad', 'pitchspeed': 'rad/s', 'roll': '...
     |  
     |  format = '<Iffffff'
     |  
     |  id = 30
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'ATTITUDE'
     |  
     |  native_format = bytearray(b'<Iffffff')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'roll', 'pitch', 'yaw', 'rollspe...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_attitude_quaternion_cov_message(MAVLink_message)
     |  The attitude in the aeronautical frame (right-handed, Z-down,
     |  X-front, Y-right), expressed as quaternion. Quaternion order
     |  is w, x, y, z and a zero rotation would be expressed as (1 0 0
     |  0).
     |  
     |  Method resolution order:
     |      MAVLink_attitude_quaternion_cov_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, q, rollspeed, pitchspeed, yawspeed, covariance)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 4, 0, 0, 0, 9]
     |  
     |  crc_extra = 167
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'q', 'rollspeed', 'pitchspeed', 'yawspeed',...
     |  
     |  fieldtypes = ['uint64_t', 'float', 'float', 'float', 'float', 'float']
     |  
     |  fieldunits_by_name = {'pitchspeed': 'rad/s', 'rollspeed': 'rad/s', 'ti...
     |  
     |  format = '<Q4ffff9f'
     |  
     |  id = 61
     |  
     |  lengths = [1, 4, 1, 1, 1, 9]
     |  
     |  name = 'ATTITUDE_QUATERNION_COV'
     |  
     |  native_format = bytearray(b'<Qfffff')
     |  
     |  ordered_fieldnames = ['time_usec', 'q', 'rollspeed', 'pitchspeed', 'ya...
     |  
     |  orders = [0, 1, 2, 3, 4, 5]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_attitude_quaternion_message(MAVLink_message)
     |  The attitude in the aeronautical frame (right-handed, Z-down,
     |  X-front, Y-right), expressed as quaternion. Quaternion order
     |  is w, x, y, z and a zero rotation would be expressed as (1 0 0
     |  0).
     |  
     |  Method resolution order:
     |      MAVLink_attitude_quaternion_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, q1, q2, q3, q4, rollspeed, pitchspeed, yawspeed)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 246
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'q1', 'q2', 'q3', 'q4', 'rollspeed', 'pi...
     |  
     |  fieldtypes = ['uint32_t', 'float', 'float', 'float', 'float', 'float',...
     |  
     |  fieldunits_by_name = {'pitchspeed': 'rad/s', 'rollspeed': 'rad/s', 'ti...
     |  
     |  format = '<Ifffffff'
     |  
     |  id = 31
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'ATTITUDE_QUATERNION'
     |  
     |  native_format = bytearray(b'<Ifffffff')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'q1', 'q2', 'q3', 'q4', 'rollspe...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_attitude_target_message(MAVLink_message)
     |  Reports the current commanded attitude of the vehicle as
     |  specified by the autopilot. This should match the commands
     |  sent in a SET_ATTITUDE_TARGET message if the vehicle is being
     |  controlled this way.
     |  
     |  Method resolution order:
     |      MAVLink_attitude_target_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, type_mask, q, body_roll_rate, body_pitch_rate, body_yaw_rate, thrust)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 4, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 22
     |  
     |  fielddisplays_by_name = {'type_mask': 'bitmask'}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'type_mask', 'q', 'body_roll_rate', 'bod...
     |  
     |  fieldtypes = ['uint32_t', 'uint8_t', 'float', 'float', 'float', 'float...
     |  
     |  fieldunits_by_name = {'body_pitch_rate': 'rad/s', 'body_roll_rate': 'r...
     |  
     |  format = '<I4fffffB'
     |  
     |  id = 83
     |  
     |  lengths = [1, 4, 1, 1, 1, 1, 1]
     |  
     |  name = 'ATTITUDE_TARGET'
     |  
     |  native_format = bytearray(b'<IfffffB')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'q', 'body_roll_rate', 'body_pit...
     |  
     |  orders = [0, 6, 1, 2, 3, 4, 5]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_auth_key_message(MAVLink_message)
     |  Emit an encrypted signature / key identifying this system.
     |  PLEASE NOTE: This protocol has been kept simple, so
     |  transmitting the key requires an encrypted channel for true
     |  safety.
     |  
     |  Method resolution order:
     |      MAVLink_auth_key_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, key)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [32]
     |  
     |  crc_extra = 119
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['key']
     |  
     |  fieldtypes = ['char']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<32s'
     |  
     |  id = 7
     |  
     |  lengths = [1]
     |  
     |  name = 'AUTH_KEY'
     |  
     |  native_format = bytearray(b'<c')
     |  
     |  ordered_fieldnames = ['key']
     |  
     |  orders = [0]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_autopilot_version_message(MAVLink_message)
     |  Version and capability of autopilot software. This should be
     |  emitted in response to a
     |  MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES command.
     |  
     |  Method resolution order:
     |      MAVLink_autopilot_version_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, capabilities, flight_sw_version, middleware_sw_version, os_sw_version, board_version, flight_custom_version, middleware_custom_version, os_custom_version, vendor_id, product_id, uid)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8]
     |  
     |  crc_extra = 178
     |  
     |  fielddisplays_by_name = {'capabilities': 'bitmask'}
     |  
     |  fieldenums_by_name = {'capabilities': 'MAV_PROTOCOL_CAPABILITY'}
     |  
     |  fieldnames = ['capabilities', 'flight_sw_version', 'middleware_sw_vers...
     |  
     |  fieldtypes = ['uint64_t', 'uint32_t', 'uint32_t', 'uint32_t', 'uint32_...
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<QQIIIIHH8B8B8B'
     |  
     |  id = 148
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8]
     |  
     |  name = 'AUTOPILOT_VERSION'
     |  
     |  native_format = bytearray(b'<QQIIIIHHBBB')
     |  
     |  ordered_fieldnames = ['capabilities', 'uid', 'flight_sw_version', 'mid...
     |  
     |  orders = [0, 2, 3, 4, 5, 8, 9, 10, 6, 7, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_autopilot_version_request_message(MAVLink_message)
     |  Request the autopilot version from the system/component.
     |  
     |  Method resolution order:
     |      MAVLink_autopilot_version_request_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 85
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BB'
     |  
     |  id = 183
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'AUTOPILOT_VERSION_REQUEST'
     |  
     |  native_format = bytearray(b'<BB')
     |  
     |  ordered_fieldnames = ['target_system', 'target_component']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_bad_data(MAVLink_message)
     |  a piece of bad data in a mavlink stream
     |  
     |  Method resolution order:
     |      MAVLink_bad_data
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, data, reason)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __str__(self)
     |      Override the __str__ function from MAVLink_messages because non-printable characters are common in to be the reason for this message to exist.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  pack(self, mav, crc_extra, payload, force_mavlink1=False)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_battery2_message(MAVLink_message)
     |  2nd Battery status
     |  
     |  Method resolution order:
     |      MAVLink_battery2_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, voltage, current_battery)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 174
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['voltage', 'current_battery']
     |  
     |  fieldtypes = ['uint16_t', 'int16_t']
     |  
     |  fieldunits_by_name = {'current_battery': 'cA', 'voltage': 'mV'}
     |  
     |  format = '<Hh'
     |  
     |  id = 181
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'BATTERY2'
     |  
     |  native_format = bytearray(b'<Hh')
     |  
     |  ordered_fieldnames = ['voltage', 'current_battery']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_battery_status_message(MAVLink_message)
     |  Battery information
     |  
     |  Method resolution order:
     |      MAVLink_battery_status_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, id, battery_function, type, temperature, voltages, current_battery, current_consumed, energy_consumed, battery_remaining)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 10, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 154
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'battery_function': 'MAV_BATTERY_FUNCTION', 'typ...
     |  
     |  fieldnames = ['id', 'battery_function', 'type', 'temperature', 'voltag...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'int16_t', 'uint16_t', ...
     |  
     |  fieldunits_by_name = {'battery_remaining': '%', 'current_battery': 'cA...
     |  
     |  format = '<iih10HhBBBb'
     |  
     |  id = 147
     |  
     |  lengths = [1, 1, 1, 10, 1, 1, 1, 1, 1]
     |  
     |  name = 'BATTERY_STATUS'
     |  
     |  native_format = bytearray(b'<iihHhBBBb')
     |  
     |  ordered_fieldnames = ['current_consumed', 'energy_consumed', 'temperat...
     |  
     |  orders = [5, 6, 7, 2, 3, 4, 0, 1, 8]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_camera_feedback_message(MAVLink_message)
     |  Camera Capture Feedback.
     |  
     |  Method resolution order:
     |      MAVLink_camera_feedback_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, target_system, cam_idx, img_idx, lat, lng, alt_msl, alt_rel, roll, pitch, yaw, foc_len, flags)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 52
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'flags': 'CAMERA_FEEDBACK_FLAGS'}
     |  
     |  fieldnames = ['time_usec', 'target_system', 'cam_idx', 'img_idx', 'lat...
     |  
     |  fieldtypes = ['uint64_t', 'uint8_t', 'uint8_t', 'uint16_t', 'int32_t',...
     |  
     |  fieldunits_by_name = {'alt_msl': 'm', 'alt_rel': 'm', 'foc_len': 'mm',...
     |  
     |  format = '<QiiffffffHBBB'
     |  
     |  id = 180
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'CAMERA_FEEDBACK'
     |  
     |  native_format = bytearray(b'<QiiffffffHBBB')
     |  
     |  ordered_fieldnames = ['time_usec', 'lat', 'lng', 'alt_msl', 'alt_rel',...
     |  
     |  orders = [0, 10, 11, 9, 1, 2, 3, 4, 5, 6, 7, 8, 12]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_camera_status_message(MAVLink_message)
     |  Camera Event.
     |  
     |  Method resolution order:
     |      MAVLink_camera_status_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, target_system, cam_idx, img_idx, event_id, p1, p2, p3, p4)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 189
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'event_id': 'CAMERA_STATUS_TYPES'}
     |  
     |  fieldnames = ['time_usec', 'target_system', 'cam_idx', 'img_idx', 'eve...
     |  
     |  fieldtypes = ['uint64_t', 'uint8_t', 'uint8_t', 'uint16_t', 'uint8_t',...
     |  
     |  fieldunits_by_name = {'time_usec': 'us'}
     |  
     |  format = '<QffffHBBB'
     |  
     |  id = 179
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'CAMERA_STATUS'
     |  
     |  native_format = bytearray(b'<QffffHBBB')
     |  
     |  ordered_fieldnames = ['time_usec', 'p1', 'p2', 'p3', 'p4', 'img_idx', ...
     |  
     |  orders = [0, 6, 7, 5, 8, 1, 2, 3, 4]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_camera_trigger_message(MAVLink_message)
     |  Camera-IMU triggering and synchronisation message.
     |  
     |  Method resolution order:
     |      MAVLink_camera_trigger_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, seq)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 174
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'seq']
     |  
     |  fieldtypes = ['uint64_t', 'uint32_t']
     |  
     |  fieldunits_by_name = {'time_usec': 'us'}
     |  
     |  format = '<QI'
     |  
     |  id = 112
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'CAMERA_TRIGGER'
     |  
     |  native_format = bytearray(b'<QI')
     |  
     |  ordered_fieldnames = ['time_usec', 'seq']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_change_operator_control_ack_message(MAVLink_message)
     |  Accept / deny control of this MAV
     |  
     |  Method resolution order:
     |      MAVLink_change_operator_control_ack_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, gcs_system_id, control_request, ack)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0]
     |  
     |  crc_extra = 104
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['gcs_system_id', 'control_request', 'ack']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BBB'
     |  
     |  id = 6
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'CHANGE_OPERATOR_CONTROL_ACK'
     |  
     |  native_format = bytearray(b'<BBB')
     |  
     |  ordered_fieldnames = ['gcs_system_id', 'control_request', 'ack']
     |  
     |  orders = [0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_change_operator_control_message(MAVLink_message)
     |  Request to control this MAV
     |  
     |  Method resolution order:
     |      MAVLink_change_operator_control_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, control_request, version, passkey)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 25]
     |  
     |  crc_extra = 217
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'control_request', 'version', 'passkey'...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'char']
     |  
     |  fieldunits_by_name = {'version': 'rad'}
     |  
     |  format = '<BBB25s'
     |  
     |  id = 5
     |  
     |  lengths = [1, 1, 1, 1]
     |  
     |  name = 'CHANGE_OPERATOR_CONTROL'
     |  
     |  native_format = bytearray(b'<BBBc')
     |  
     |  ordered_fieldnames = ['target_system', 'control_request', 'version', '...
     |  
     |  orders = [0, 1, 2, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_collision_message(MAVLink_message)
     |  Information about a potential collision
     |  
     |  Method resolution order:
     |      MAVLink_collision_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, src, id, action, threat_level, time_to_minimum_delta, altitude_minimum_delta, horizontal_minimum_delta)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 81
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'action': 'MAV_COLLISION_ACTION', 'src': 'MAV_CO...
     |  
     |  fieldnames = ['src', 'id', 'action', 'threat_level', 'time_to_minimum_...
     |  
     |  fieldtypes = ['uint8_t', 'uint32_t', 'uint8_t', 'uint8_t', 'float', 'f...
     |  
     |  fieldunits_by_name = {'altitude_minimum_delta': 'm', 'horizontal_minim...
     |  
     |  format = '<IfffBBB'
     |  
     |  id = 247
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'COLLISION'
     |  
     |  native_format = bytearray(b'<IfffBBB')
     |  
     |  ordered_fieldnames = ['id', 'time_to_minimum_delta', 'altitude_minimum...
     |  
     |  orders = [4, 0, 5, 6, 1, 2, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_command_ack_message(MAVLink_message)
     |  Report status of a command. Includes feedback whether the
     |  command was executed. The command microservice is documented
     |  at https://mavlink.io/en/services/command.html
     |  
     |  Method resolution order:
     |      MAVLink_command_ack_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, command, result)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 143
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'command': 'MAV_CMD', 'result': 'MAV_RESULT'}
     |  
     |  fieldnames = ['command', 'result']
     |  
     |  fieldtypes = ['uint16_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<HB'
     |  
     |  id = 77
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'COMMAND_ACK'
     |  
     |  native_format = bytearray(b'<HB')
     |  
     |  ordered_fieldnames = ['command', 'result']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_command_int_message(MAVLink_message)
     |  Message encoding a command with parameters as scaled integers.
     |  Scaling depends on the actual command value. The command
     |  microservice is documented at
     |  https://mavlink.io/en/services/command.html
     |  
     |  Method resolution order:
     |      MAVLink_command_int_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 158
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'command': 'MAV_CMD', 'frame': 'MAV_FRAME'}
     |  
     |  fieldnames = ['target_system', 'target_component', 'frame', 'command',...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint16_t', 'uint8_t', ...
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<ffffiifHBBBBB'
     |  
     |  id = 75
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'COMMAND_INT'
     |  
     |  native_format = bytearray(b'<ffffiifHBBBBB')
     |  
     |  ordered_fieldnames = ['param1', 'param2', 'param3', 'param4', 'x', 'y'...
     |  
     |  orders = [8, 9, 10, 7, 11, 12, 0, 1, 2, 3, 4, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_command_long_message(MAVLink_message)
     |  Send a command with up to seven parameters to the MAV. The
     |  command microservice is documented at
     |  https://mavlink.io/en/services/command.html
     |  
     |  Method resolution order:
     |      MAVLink_command_long_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, command, confirmation, param1, param2, param3, param4, param5, param6, param7)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 152
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'command': 'MAV_CMD'}
     |  
     |  fieldnames = ['target_system', 'target_component', 'command', 'confirm...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint16_t', 'uint8_t', 'float', 'f...
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<fffffffHBBB'
     |  
     |  id = 76
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'COMMAND_LONG'
     |  
     |  native_format = bytearray(b'<fffffffHBBB')
     |  
     |  ordered_fieldnames = ['param1', 'param2', 'param3', 'param4', 'param5'...
     |  
     |  orders = [8, 9, 7, 10, 0, 1, 2, 3, 4, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_compassmot_status_message(MAVLink_message)
     |  Status of compassmot calibration.
     |  
     |  Method resolution order:
     |      MAVLink_compassmot_status_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, throttle, current, interference, CompensationX, CompensationY, CompensationZ)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 240
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['throttle', 'current', 'interference', 'CompensationX', ...
     |  
     |  fieldtypes = ['uint16_t', 'float', 'uint16_t', 'float', 'float', 'floa...
     |  
     |  fieldunits_by_name = {'current': 'A', 'interference': '%', 'throttle':...
     |  
     |  format = '<ffffHH'
     |  
     |  id = 177
     |  
     |  lengths = [1, 1, 1, 1, 1, 1]
     |  
     |  name = 'COMPASSMOT_STATUS'
     |  
     |  native_format = bytearray(b'<ffffHH')
     |  
     |  ordered_fieldnames = ['current', 'CompensationX', 'CompensationY', 'Co...
     |  
     |  orders = [4, 0, 5, 1, 2, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_control_system_state_message(MAVLink_message)
     |  The smoothed, monotonic system state used to feed the control
     |  loops of the system.
     |  
     |  Method resolution order:
     |      MAVLink_control_system_state_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, x_acc, y_acc, z_acc, x_vel, y_vel, z_vel, x_pos, y_pos, z_pos, airspeed, vel_variance, pos_variance, q, roll_rate, pitch_rate, yaw_rate)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 0, 0]
     |  
     |  crc_extra = 103
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'x_acc', 'y_acc', 'z_acc', 'x_vel', 'y_vel'...
     |  
     |  fieldtypes = ['uint64_t', 'float', 'float', 'float', 'float', 'float',...
     |  
     |  fieldunits_by_name = {'airspeed': 'm/s', 'pitch_rate': 'rad/s', 'roll_...
     |  
     |  format = '<Qffffffffff3f3f4ffff'
     |  
     |  id = 146
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 4, 1, 1, 1]
     |  
     |  name = 'CONTROL_SYSTEM_STATE'
     |  
     |  native_format = bytearray(b'<Qffffffffffffffff')
     |  
     |  ordered_fieldnames = ['time_usec', 'x_acc', 'y_acc', 'z_acc', 'x_vel',...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_data16_message(MAVLink_message)
     |  Data packet, size 16.
     |  
     |  Method resolution order:
     |      MAVLink_data16_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, type, len, data)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 16]
     |  
     |  crc_extra = 234
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['type', 'len', 'data']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {'len': 'bytes'}
     |  
     |  format = '<BB16B'
     |  
     |  id = 169
     |  
     |  lengths = [1, 1, 16]
     |  
     |  name = 'DATA16'
     |  
     |  native_format = bytearray(b'<BBB')
     |  
     |  ordered_fieldnames = ['type', 'len', 'data']
     |  
     |  orders = [0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_data32_message(MAVLink_message)
     |  Data packet, size 32.
     |  
     |  Method resolution order:
     |      MAVLink_data32_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, type, len, data)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 32]
     |  
     |  crc_extra = 73
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['type', 'len', 'data']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {'len': 'bytes'}
     |  
     |  format = '<BB32B'
     |  
     |  id = 170
     |  
     |  lengths = [1, 1, 32]
     |  
     |  name = 'DATA32'
     |  
     |  native_format = bytearray(b'<BBB')
     |  
     |  ordered_fieldnames = ['type', 'len', 'data']
     |  
     |  orders = [0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_data64_message(MAVLink_message)
     |  Data packet, size 64.
     |  
     |  Method resolution order:
     |      MAVLink_data64_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, type, len, data)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 64]
     |  
     |  crc_extra = 181
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['type', 'len', 'data']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {'len': 'bytes'}
     |  
     |  format = '<BB64B'
     |  
     |  id = 171
     |  
     |  lengths = [1, 1, 64]
     |  
     |  name = 'DATA64'
     |  
     |  native_format = bytearray(b'<BBB')
     |  
     |  ordered_fieldnames = ['type', 'len', 'data']
     |  
     |  orders = [0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_data96_message(MAVLink_message)
     |  Data packet, size 96.
     |  
     |  Method resolution order:
     |      MAVLink_data96_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, type, len, data)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 96]
     |  
     |  crc_extra = 22
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['type', 'len', 'data']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {'len': 'bytes'}
     |  
     |  format = '<BB96B'
     |  
     |  id = 172
     |  
     |  lengths = [1, 1, 96]
     |  
     |  name = 'DATA96'
     |  
     |  native_format = bytearray(b'<BBB')
     |  
     |  ordered_fieldnames = ['type', 'len', 'data']
     |  
     |  orders = [0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_data_stream_message(MAVLink_message)
     |  Data stream status information.
     |  
     |  Method resolution order:
     |      MAVLink_data_stream_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, stream_id, message_rate, on_off)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0]
     |  
     |  crc_extra = 21
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['stream_id', 'message_rate', 'on_off']
     |  
     |  fieldtypes = ['uint8_t', 'uint16_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {'message_rate': 'Hz'}
     |  
     |  format = '<HBB'
     |  
     |  id = 67
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'DATA_STREAM'
     |  
     |  native_format = bytearray(b'<HBB')
     |  
     |  ordered_fieldnames = ['message_rate', 'stream_id', 'on_off']
     |  
     |  orders = [1, 0, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_data_transmission_handshake_message(MAVLink_message)
     |  Handshake message to initiate, control and stop image
     |  streaming when using the Image Transmission Protocol:
     |  https://mavlink.io/en/services/image_transmission.html.
     |  
     |  Method resolution order:
     |      MAVLink_data_transmission_handshake_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, type, size, width, height, packets, payload, jpg_quality)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 29
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'type': 'MAVLINK_DATA_STREAM_TYPE'}
     |  
     |  fieldnames = ['type', 'size', 'width', 'height', 'packets', 'payload',...
     |  
     |  fieldtypes = ['uint8_t', 'uint32_t', 'uint16_t', 'uint16_t', 'uint16_t...
     |  
     |  fieldunits_by_name = {'jpg_quality': '%', 'payload': 'bytes', 'size': ...
     |  
     |  format = '<IHHHBBB'
     |  
     |  id = 130
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'DATA_TRANSMISSION_HANDSHAKE'
     |  
     |  native_format = bytearray(b'<IHHHBBB')
     |  
     |  ordered_fieldnames = ['size', 'width', 'height', 'packets', 'type', 'p...
     |  
     |  orders = [4, 0, 1, 2, 3, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_debug_message(MAVLink_message)
     |  Send a debug value. The index is used to discriminate between
     |  values. These values show up in the plot of QGroundControl as
     |  DEBUG N.
     |  
     |  Method resolution order:
     |      MAVLink_debug_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, ind, value)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0]
     |  
     |  crc_extra = 46
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'ind', 'value']
     |  
     |  fieldtypes = ['uint32_t', 'uint8_t', 'float']
     |  
     |  fieldunits_by_name = {'time_boot_ms': 'ms'}
     |  
     |  format = '<IfB'
     |  
     |  id = 254
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'DEBUG'
     |  
     |  native_format = bytearray(b'<IfB')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'value', 'ind']
     |  
     |  orders = [0, 2, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_debug_vect_message(MAVLink_message)
     |  To debug something using a named 3D vector.
     |  
     |  Method resolution order:
     |      MAVLink_debug_vect_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, name, time_usec, x, y, z)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 10]
     |  
     |  crc_extra = 49
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['name', 'time_usec', 'x', 'y', 'z']
     |  
     |  fieldtypes = ['char', 'uint64_t', 'float', 'float', 'float']
     |  
     |  fieldunits_by_name = {'time_usec': 'us'}
     |  
     |  format = '<Qfff10s'
     |  
     |  id = 250
     |  
     |  lengths = [1, 1, 1, 1, 1]
     |  
     |  name = 'DEBUG_VECT'
     |  
     |  native_format = bytearray(b'<Qfffc')
     |  
     |  ordered_fieldnames = ['time_usec', 'x', 'y', 'z', 'name']
     |  
     |  orders = [4, 0, 1, 2, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_deepstall_message(MAVLink_message)
     |  Deepstall path planning.
     |  
     |  Method resolution order:
     |      MAVLink_deepstall_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, landing_lat, landing_lon, path_lat, path_lon, arc_entry_lat, arc_entry_lon, altitude, expected_travel_distance, cross_track_error, stage)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 120
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'stage': 'DEEPSTALL_STAGE'}
     |  
     |  fieldnames = ['landing_lat', 'landing_lon', 'path_lat', 'path_lon', 'a...
     |  
     |  fieldtypes = ['int32_t', 'int32_t', 'int32_t', 'int32_t', 'int32_t', '...
     |  
     |  fieldunits_by_name = {'altitude': 'm', 'arc_entry_lat': 'degE7', 'arc_...
     |  
     |  format = '<iiiiiifffB'
     |  
     |  id = 195
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'DEEPSTALL'
     |  
     |  native_format = bytearray(b'<iiiiiifffB')
     |  
     |  ordered_fieldnames = ['landing_lat', 'landing_lon', 'path_lat', 'path_...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_digicam_configure_message(MAVLink_message)
     |  Configure on-board Camera Control System.
     |  
     |  Method resolution order:
     |      MAVLink_digicam_configure_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, mode, shutter_speed, aperture, iso, exposure_type, command_id, engine_cut_off, extra_param, extra_value)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 84
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'mode', 'shutter_sp...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint16_t', 'uint8_t', ...
     |  
     |  fieldunits_by_name = {'engine_cut_off': 'ds'}
     |  
     |  format = '<fHBBBBBBBBB'
     |  
     |  id = 154
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'DIGICAM_CONFIGURE'
     |  
     |  native_format = bytearray(b'<fHBBBBBBBBB')
     |  
     |  ordered_fieldnames = ['extra_value', 'shutter_speed', 'target_system',...
     |  
     |  orders = [2, 3, 4, 1, 5, 6, 7, 8, 9, 10, 0]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_digicam_control_message(MAVLink_message)
     |  Control on-board Camera Control System to take shots.
     |  
     |  Method resolution order:
     |      MAVLink_digicam_control_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, session, zoom_pos, zoom_step, focus_lock, shot, command_id, extra_param, extra_value)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 22
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'session', 'zoom_po...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'int8_t', 'u...
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<fBBBBbBBBB'
     |  
     |  id = 155
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'DIGICAM_CONTROL'
     |  
     |  native_format = bytearray(b'<fBBBBbBBBB')
     |  
     |  ordered_fieldnames = ['extra_value', 'target_system', 'target_componen...
     |  
     |  orders = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_distance_sensor_message(MAVLink_message)
     |  Distance sensor information for an onboard rangefinder.
     |  
     |  Method resolution order:
     |      MAVLink_distance_sensor_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, min_distance, max_distance, current_distance, type, id, orientation, covariance)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 85
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'orientation': 'MAV_SENSOR_ORIENTATION', 'type':...
     |  
     |  fieldnames = ['time_boot_ms', 'min_distance', 'max_distance', 'current...
     |  
     |  fieldtypes = ['uint32_t', 'uint16_t', 'uint16_t', 'uint16_t', 'uint8_t...
     |  
     |  fieldunits_by_name = {'covariance': 'cm^2', 'current_distance': 'cm', ...
     |  
     |  format = '<IHHHBBBB'
     |  
     |  id = 132
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'DISTANCE_SENSOR'
     |  
     |  native_format = bytearray(b'<IHHHBBBB')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'min_distance', 'max_distance', ...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_efi_status_message(MAVLink_message)
     |  EFI Status Output
     |  
     |  Method resolution order:
     |      MAVLink_efi_status_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, health, ecu_index, rpm, fuel_consumed, fuel_flow, engine_load, throttle_position, spark_dwell_time, barometric_pressure, intake_manifold_pressure, intake_manifold_temperature, cylinder_head_temperature, ignition_timing, injection_time)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 142
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['health', 'ecu_index', 'rpm', 'fuel_consumed', 'fuel_flo...
     |  
     |  fieldtypes = ['uint8_t', 'float', 'float', 'float', 'float', 'float', ...
     |  
     |  fieldunits_by_name = {'barometric_pressure': 'kPa', 'cylinder_head_tem...
     |  
     |  format = '<fffffffffffffB'
     |  
     |  id = 225
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'EFI_STATUS'
     |  
     |  native_format = bytearray(b'<fffffffffffffB')
     |  
     |  ordered_fieldnames = ['ecu_index', 'rpm', 'fuel_consumed', 'fuel_flow'...
     |  
     |  orders = [13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_ekf_status_report_message(MAVLink_message)
     |  EKF Status message including flags and variances.
     |  
     |  Method resolution order:
     |      MAVLink_ekf_status_report_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, flags, velocity_variance, pos_horiz_variance, pos_vert_variance, compass_variance, terrain_alt_variance)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 71
     |  
     |  fielddisplays_by_name = {'flags': 'bitmask'}
     |  
     |  fieldenums_by_name = {'flags': 'EKF_STATUS_FLAGS'}
     |  
     |  fieldnames = ['flags', 'velocity_variance', 'pos_horiz_variance', 'pos...
     |  
     |  fieldtypes = ['uint16_t', 'float', 'float', 'float', 'float', 'float']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<fffffH'
     |  
     |  id = 193
     |  
     |  lengths = [1, 1, 1, 1, 1, 1]
     |  
     |  name = 'EKF_STATUS_REPORT'
     |  
     |  native_format = bytearray(b'<fffffH')
     |  
     |  ordered_fieldnames = ['velocity_variance', 'pos_horiz_variance', 'pos_...
     |  
     |  orders = [5, 0, 1, 2, 3, 4]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_encapsulated_data_message(MAVLink_message)
     |  Data packet for images sent using the Image Transmission
     |  Protocol:
     |  https://mavlink.io/en/services/image_transmission.html.
     |  
     |  Method resolution order:
     |      MAVLink_encapsulated_data_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, seqnr, data)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 253]
     |  
     |  crc_extra = 223
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['seqnr', 'data']
     |  
     |  fieldtypes = ['uint16_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<H253B'
     |  
     |  id = 131
     |  
     |  lengths = [1, 253]
     |  
     |  name = 'ENCAPSULATED_DATA'
     |  
     |  native_format = bytearray(b'<HB')
     |  
     |  ordered_fieldnames = ['seqnr', 'data']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_estimator_status_message(MAVLink_message)
     |  Estimator status message including flags, innovation test
     |  ratios and estimated accuracies. The flags message is an
     |  integer bitmask containing information on which EKF outputs
     |  are valid. See the ESTIMATOR_STATUS_FLAGS enum definition for
     |  further information. The innovation test ratios show the
     |  magnitude of the sensor innovation divided by the innovation
     |  check threshold. Under normal operation the innovation test
     |  ratios should be below 0.5 with occasional values up to 1.0.
     |  Values greater than 1.0 should be rare under normal operation
     |  and indicate that a measurement has been rejected by the
     |  filter. The user should be notified if an innovation test
     |  ratio greater than 1.0 is recorded. Notifications for values
     |  in the range between 0.5 and 1.0 should be optional and
     |  controllable by the user.
     |  
     |  Method resolution order:
     |      MAVLink_estimator_status_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, flags, vel_ratio, pos_horiz_ratio, pos_vert_ratio, mag_ratio, hagl_ratio, tas_ratio, pos_horiz_accuracy, pos_vert_accuracy)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 163
     |  
     |  fielddisplays_by_name = {'flags': 'bitmask'}
     |  
     |  fieldenums_by_name = {'flags': 'ESTIMATOR_STATUS_FLAGS'}
     |  
     |  fieldnames = ['time_usec', 'flags', 'vel_ratio', 'pos_horiz_ratio', 'p...
     |  
     |  fieldtypes = ['uint64_t', 'uint16_t', 'float', 'float', 'float', 'floa...
     |  
     |  fieldunits_by_name = {'pos_horiz_accuracy': 'm', 'pos_vert_accuracy': ...
     |  
     |  format = '<QffffffffH'
     |  
     |  id = 230
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'ESTIMATOR_STATUS'
     |  
     |  native_format = bytearray(b'<QffffffffH')
     |  
     |  ordered_fieldnames = ['time_usec', 'vel_ratio', 'pos_horiz_ratio', 'po...
     |  
     |  orders = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_extended_sys_state_message(MAVLink_message)
     |  Provides state for additional features
     |  
     |  Method resolution order:
     |      MAVLink_extended_sys_state_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, vtol_state, landed_state)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 130
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'landed_state': 'MAV_LANDED_STATE', 'vtol_state'...
     |  
     |  fieldnames = ['vtol_state', 'landed_state']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BB'
     |  
     |  id = 245
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'EXTENDED_SYS_STATE'
     |  
     |  native_format = bytearray(b'<BB')
     |  
     |  ordered_fieldnames = ['vtol_state', 'landed_state']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_fence_fetch_point_message(MAVLink_message)
     |  Request a current fence point from MAV.
     |  
     |  Method resolution order:
     |      MAVLink_fence_fetch_point_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, idx)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0]
     |  
     |  crc_extra = 68
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'idx']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BBB'
     |  
     |  id = 161
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'FENCE_FETCH_POINT'
     |  
     |  native_format = bytearray(b'<BBB')
     |  
     |  ordered_fieldnames = ['target_system', 'target_component', 'idx']
     |  
     |  orders = [0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_fence_point_message(MAVLink_message)
     |  A fence point. Used to set a point when from GCS -> MAV. Also
     |  used to return a point from MAV -> GCS.
     |  
     |  Method resolution order:
     |      MAVLink_fence_point_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, idx, count, lat, lng)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 78
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'idx', 'count', 'la...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'float', 'fl...
     |  
     |  fieldunits_by_name = {'lat': 'deg', 'lng': 'deg'}
     |  
     |  format = '<ffBBBB'
     |  
     |  id = 160
     |  
     |  lengths = [1, 1, 1, 1, 1, 1]
     |  
     |  name = 'FENCE_POINT'
     |  
     |  native_format = bytearray(b'<ffBBBB')
     |  
     |  ordered_fieldnames = ['lat', 'lng', 'target_system', 'target_component...
     |  
     |  orders = [2, 3, 4, 5, 0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_fence_status_message(MAVLink_message)
     |  Status of geo-fencing. Sent in extended status stream when
     |  fencing enabled.
     |  
     |  Method resolution order:
     |      MAVLink_fence_status_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, breach_status, breach_count, breach_type, breach_time)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0]
     |  
     |  crc_extra = 189
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'breach_type': 'FENCE_BREACH'}
     |  
     |  fieldnames = ['breach_status', 'breach_count', 'breach_type', 'breach_...
     |  
     |  fieldtypes = ['uint8_t', 'uint16_t', 'uint8_t', 'uint32_t']
     |  
     |  fieldunits_by_name = {'breach_time': 'ms'}
     |  
     |  format = '<IHBB'
     |  
     |  id = 162
     |  
     |  lengths = [1, 1, 1, 1]
     |  
     |  name = 'FENCE_STATUS'
     |  
     |  native_format = bytearray(b'<IHBB')
     |  
     |  ordered_fieldnames = ['breach_time', 'breach_count', 'breach_status', ...
     |  
     |  orders = [2, 1, 3, 0]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_file_transfer_protocol_message(MAVLink_message)
     |  File transfer message
     |  
     |  Method resolution order:
     |      MAVLink_file_transfer_protocol_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_network, target_system, target_component, payload)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 251]
     |  
     |  crc_extra = 84
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_network', 'target_system', 'target_component', '...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BBB251B'
     |  
     |  id = 110
     |  
     |  lengths = [1, 1, 1, 251]
     |  
     |  name = 'FILE_TRANSFER_PROTOCOL'
     |  
     |  native_format = bytearray(b'<BBBB')
     |  
     |  ordered_fieldnames = ['target_network', 'target_system', 'target_compo...
     |  
     |  orders = [0, 1, 2, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_follow_target_message(MAVLink_message)
     |  Current motion information from a designated system
     |  
     |  Method resolution order:
     |      MAVLink_follow_target_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, timestamp, est_capabilities, lat, lon, alt, vel, acc, attitude_q, rates, position_cov, custom_state)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 3, 3, 4, 3, 3, 0]
     |  
     |  crc_extra = 127
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['timestamp', 'est_capabilities', 'lat', 'lon', 'alt', 'v...
     |  
     |  fieldtypes = ['uint64_t', 'uint8_t', 'int32_t', 'int32_t', 'float', 'f...
     |  
     |  fieldunits_by_name = {'acc': 'm/s/s', 'alt': 'm', 'lat': 'degE7', 'lon...
     |  
     |  format = '<QQiif3f3f4f3f3fB'
     |  
     |  id = 144
     |  
     |  lengths = [1, 1, 1, 1, 1, 3, 3, 4, 3, 3, 1]
     |  
     |  name = 'FOLLOW_TARGET'
     |  
     |  native_format = bytearray(b'<QQiiffffffB')
     |  
     |  ordered_fieldnames = ['timestamp', 'custom_state', 'lat', 'lon', 'alt'...
     |  
     |  orders = [0, 10, 2, 3, 4, 5, 6, 7, 8, 9, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_gimbal_control_message(MAVLink_message)
     |  Control message for rate gimbal.
     |  
     |  Method resolution order:
     |      MAVLink_gimbal_control_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, demanded_rate_x, demanded_rate_y, demanded_rate_z)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0]
     |  
     |  crc_extra = 205
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'demanded_rate_x', ...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'float', 'float', 'float']
     |  
     |  fieldunits_by_name = {'demanded_rate_x': 'rad/s', 'demanded_rate_y': '...
     |  
     |  format = '<fffBB'
     |  
     |  id = 201
     |  
     |  lengths = [1, 1, 1, 1, 1]
     |  
     |  name = 'GIMBAL_CONTROL'
     |  
     |  native_format = bytearray(b'<fffBB')
     |  
     |  ordered_fieldnames = ['demanded_rate_x', 'demanded_rate_y', 'demanded_...
     |  
     |  orders = [3, 4, 0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_gimbal_report_message(MAVLink_message)
     |  3 axis gimbal measurements.
     |  
     |  Method resolution order:
     |      MAVLink_gimbal_report_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, delta_time, delta_angle_x, delta_angle_y, delta_angle_z, delta_velocity_x, delta_velocity_y, delta_velocity_z, joint_roll, joint_el, joint_az)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 134
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'delta_time', 'delt...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'float', 'float', 'float', 'float'...
     |  
     |  fieldunits_by_name = {'delta_angle_x': 'rad', 'delta_angle_y': 'rad', ...
     |  
     |  format = '<ffffffffffBB'
     |  
     |  id = 200
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'GIMBAL_REPORT'
     |  
     |  native_format = bytearray(b'<ffffffffffBB')
     |  
     |  ordered_fieldnames = ['delta_time', 'delta_angle_x', 'delta_angle_y', ...
     |  
     |  orders = [10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_gimbal_torque_cmd_report_message(MAVLink_message)
     |  100 Hz gimbal torque command telemetry.
     |  
     |  Method resolution order:
     |      MAVLink_gimbal_torque_cmd_report_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, rl_torque_cmd, el_torque_cmd, az_torque_cmd)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0]
     |  
     |  crc_extra = 69
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'rl_torque_cmd', 'e...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'int16_t', 'int16_t', 'int16_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<hhhBB'
     |  
     |  id = 214
     |  
     |  lengths = [1, 1, 1, 1, 1]
     |  
     |  name = 'GIMBAL_TORQUE_CMD_REPORT'
     |  
     |  native_format = bytearray(b'<hhhBB')
     |  
     |  ordered_fieldnames = ['rl_torque_cmd', 'el_torque_cmd', 'az_torque_cmd...
     |  
     |  orders = [3, 4, 0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_global_position_int_cov_message(MAVLink_message)
     |  The filtered global position (e.g. fused GPS and
     |  accelerometers). The position is in GPS-frame (right-handed,
     |  Z-up). It  is designed as scaled integer message since the
     |  resolution of float is not sufficient. NOTE: This message is
     |  intended for onboard networks / companion computers and
     |  higher-bandwidth links and optimized for accuracy and
     |  completeness. Please use the GLOBAL_POSITION_INT message for a
     |  minimal subset.
     |  
     |  Method resolution order:
     |      MAVLink_global_position_int_cov_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, estimator_type, lat, lon, alt, relative_alt, vx, vy, vz, covariance)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 36, 0]
     |  
     |  crc_extra = 119
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'estimator_type': 'MAV_ESTIMATOR_TYPE'}
     |  
     |  fieldnames = ['time_usec', 'estimator_type', 'lat', 'lon', 'alt', 'rel...
     |  
     |  fieldtypes = ['uint64_t', 'uint8_t', 'int32_t', 'int32_t', 'int32_t', ...
     |  
     |  fieldunits_by_name = {'alt': 'mm', 'lat': 'degE7', 'lon': 'degE7', 're...
     |  
     |  format = '<Qiiiifff36fB'
     |  
     |  id = 63
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 36, 1]
     |  
     |  name = 'GLOBAL_POSITION_INT_COV'
     |  
     |  native_format = bytearray(b'<QiiiiffffB')
     |  
     |  ordered_fieldnames = ['time_usec', 'lat', 'lon', 'alt', 'relative_alt'...
     |  
     |  orders = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_global_position_int_message(MAVLink_message)
     |  The filtered global position (e.g. fused GPS and
     |  accelerometers). The position is in GPS-frame (right-handed,
     |  Z-up). It                is designed as scaled integer message
     |  since the resolution of float is not sufficient.
     |  
     |  Method resolution order:
     |      MAVLink_global_position_int_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, lat, lon, alt, relative_alt, vx, vy, vz, hdg)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 104
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'lat', 'lon', 'alt', 'relative_alt', 'vx...
     |  
     |  fieldtypes = ['uint32_t', 'int32_t', 'int32_t', 'int32_t', 'int32_t', ...
     |  
     |  fieldunits_by_name = {'alt': 'mm', 'hdg': 'cdeg', 'lat': 'degE7', 'lon...
     |  
     |  format = '<IiiiihhhH'
     |  
     |  id = 33
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'GLOBAL_POSITION_INT'
     |  
     |  native_format = bytearray(b'<IiiiihhhH')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'lat', 'lon', 'alt', 'relative_a...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_global_vision_position_estimate_message(MAVLink_message)
     |  Global position/attitude estimate from a vision source.
     |  
     |  Method resolution order:
     |      MAVLink_global_vision_position_estimate_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, usec, x, y, z, roll, pitch, yaw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 102
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['usec', 'x', 'y', 'z', 'roll', 'pitch', 'yaw']
     |  
     |  fieldtypes = ['uint64_t', 'float', 'float', 'float', 'float', 'float',...
     |  
     |  fieldunits_by_name = {'pitch': 'rad', 'roll': 'rad', 'usec': 'us', 'x'...
     |  
     |  format = '<Qffffff'
     |  
     |  id = 101
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'GLOBAL_VISION_POSITION_ESTIMATE'
     |  
     |  native_format = bytearray(b'<Qffffff')
     |  
     |  ordered_fieldnames = ['usec', 'x', 'y', 'z', 'roll', 'pitch', 'yaw']
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_gopro_get_request_message(MAVLink_message)
     |  Request a GOPRO_COMMAND response from the GoPro.
     |  
     |  Method resolution order:
     |      MAVLink_gopro_get_request_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, cmd_id)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0]
     |  
     |  crc_extra = 50
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'cmd_id': 'GOPRO_COMMAND'}
     |  
     |  fieldnames = ['target_system', 'target_component', 'cmd_id']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BBB'
     |  
     |  id = 216
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'GOPRO_GET_REQUEST'
     |  
     |  native_format = bytearray(b'<BBB')
     |  
     |  ordered_fieldnames = ['target_system', 'target_component', 'cmd_id']
     |  
     |  orders = [0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_gopro_get_response_message(MAVLink_message)
     |  Response from a GOPRO_COMMAND get request.
     |  
     |  Method resolution order:
     |      MAVLink_gopro_get_response_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, cmd_id, status, value)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 4]
     |  
     |  crc_extra = 202
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'cmd_id': 'GOPRO_COMMAND', 'status': 'GOPRO_REQU...
     |  
     |  fieldnames = ['cmd_id', 'status', 'value']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BB4B'
     |  
     |  id = 217
     |  
     |  lengths = [1, 1, 4]
     |  
     |  name = 'GOPRO_GET_RESPONSE'
     |  
     |  native_format = bytearray(b'<BBB')
     |  
     |  ordered_fieldnames = ['cmd_id', 'status', 'value']
     |  
     |  orders = [0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_gopro_heartbeat_message(MAVLink_message)
     |  Heartbeat from a HeroBus attached GoPro.
     |  
     |  Method resolution order:
     |      MAVLink_gopro_heartbeat_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, status, capture_mode, flags)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0]
     |  
     |  crc_extra = 101
     |  
     |  fielddisplays_by_name = {'flags': 'bitmask'}
     |  
     |  fieldenums_by_name = {'capture_mode': 'GOPRO_CAPTURE_MODE', 'flags': '...
     |  
     |  fieldnames = ['status', 'capture_mode', 'flags']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BBB'
     |  
     |  id = 215
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'GOPRO_HEARTBEAT'
     |  
     |  native_format = bytearray(b'<BBB')
     |  
     |  ordered_fieldnames = ['status', 'capture_mode', 'flags']
     |  
     |  orders = [0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_gopro_set_request_message(MAVLink_message)
     |  Request to set a GOPRO_COMMAND with a desired.
     |  
     |  Method resolution order:
     |      MAVLink_gopro_set_request_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, cmd_id, value)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 4]
     |  
     |  crc_extra = 17
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'cmd_id': 'GOPRO_COMMAND'}
     |  
     |  fieldnames = ['target_system', 'target_component', 'cmd_id', 'value']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BBB4B'
     |  
     |  id = 218
     |  
     |  lengths = [1, 1, 1, 4]
     |  
     |  name = 'GOPRO_SET_REQUEST'
     |  
     |  native_format = bytearray(b'<BBBB')
     |  
     |  ordered_fieldnames = ['target_system', 'target_component', 'cmd_id', '...
     |  
     |  orders = [0, 1, 2, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_gopro_set_response_message(MAVLink_message)
     |  Response from a GOPRO_COMMAND set request.
     |  
     |  Method resolution order:
     |      MAVLink_gopro_set_response_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, cmd_id, status)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 162
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'cmd_id': 'GOPRO_COMMAND', 'status': 'GOPRO_REQU...
     |  
     |  fieldnames = ['cmd_id', 'status']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BB'
     |  
     |  id = 219
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'GOPRO_SET_RESPONSE'
     |  
     |  native_format = bytearray(b'<BB')
     |  
     |  ordered_fieldnames = ['cmd_id', 'status']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_gps2_raw_message(MAVLink_message)
     |  Second GPS data.
     |  
     |  Method resolution order:
     |      MAVLink_gps2_raw_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, fix_type, lat, lon, alt, eph, epv, vel, cog, satellites_visible, dgps_numch, dgps_age)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 87
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'fix_type': 'GPS_FIX_TYPE'}
     |  
     |  fieldnames = ['time_usec', 'fix_type', 'lat', 'lon', 'alt', 'eph', 'ep...
     |  
     |  fieldtypes = ['uint64_t', 'uint8_t', 'int32_t', 'int32_t', 'int32_t', ...
     |  
     |  fieldunits_by_name = {'alt': 'mm', 'cog': 'cdeg', 'dgps_age': 'ms', 'e...
     |  
     |  format = '<QiiiIHHHHBBB'
     |  
     |  id = 124
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'GPS2_RAW'
     |  
     |  native_format = bytearray(b'<QiiiIHHHHBBB')
     |  
     |  ordered_fieldnames = ['time_usec', 'lat', 'lon', 'alt', 'dgps_age', 'e...
     |  
     |  orders = [0, 9, 1, 2, 3, 5, 6, 7, 8, 10, 11, 4]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_gps2_rtk_message(MAVLink_message)
     |  RTK GPS data. Gives information on the relative baseline
     |  calculation the GPS is reporting
     |  
     |  Method resolution order:
     |      MAVLink_gps2_rtk_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_last_baseline_ms, rtk_receiver_id, wn, tow, rtk_health, rtk_rate, nsats, baseline_coords_type, baseline_a_mm, baseline_b_mm, baseline_c_mm, accuracy, iar_num_hypotheses)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 226
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'baseline_coords_type': 'RTK_BASELINE_COORDINATE...
     |  
     |  fieldnames = ['time_last_baseline_ms', 'rtk_receiver_id', 'wn', 'tow',...
     |  
     |  fieldtypes = ['uint32_t', 'uint8_t', 'uint16_t', 'uint32_t', 'uint8_t'...
     |  
     |  fieldunits_by_name = {'baseline_a_mm': 'mm', 'baseline_b_mm': 'mm', 'b...
     |  
     |  format = '<IIiiiIiHBBBBB'
     |  
     |  id = 128
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'GPS2_RTK'
     |  
     |  native_format = bytearray(b'<IIiiiIiHBBBBB')
     |  
     |  ordered_fieldnames = ['time_last_baseline_ms', 'tow', 'baseline_a_mm',...
     |  
     |  orders = [0, 8, 7, 1, 9, 10, 11, 12, 2, 3, 4, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_gps_global_origin_message(MAVLink_message)
     |  Publishes the GPS co-ordinates of the vehicle local origin
     |  (0,0,0) position. Emitted whenever a new GPS-Local position
     |  mapping is requested or set - e.g. following
     |  SET_GPS_GLOBAL_ORIGIN message.
     |  
     |  Method resolution order:
     |      MAVLink_gps_global_origin_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, latitude, longitude, altitude)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0]
     |  
     |  crc_extra = 39
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['latitude', 'longitude', 'altitude']
     |  
     |  fieldtypes = ['int32_t', 'int32_t', 'int32_t']
     |  
     |  fieldunits_by_name = {'altitude': 'mm', 'latitude': 'degE7', 'longitud...
     |  
     |  format = '<iii'
     |  
     |  id = 49
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'GPS_GLOBAL_ORIGIN'
     |  
     |  native_format = bytearray(b'<iii')
     |  
     |  ordered_fieldnames = ['latitude', 'longitude', 'altitude']
     |  
     |  orders = [0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_gps_inject_data_message(MAVLink_message)
     |  Data for injecting into the onboard GPS (used for DGPS)
     |  
     |  Method resolution order:
     |      MAVLink_gps_inject_data_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, len, data)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 110]
     |  
     |  crc_extra = 250
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'len', 'data']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {'len': 'bytes'}
     |  
     |  format = '<BBB110B'
     |  
     |  id = 123
     |  
     |  lengths = [1, 1, 1, 110]
     |  
     |  name = 'GPS_INJECT_DATA'
     |  
     |  native_format = bytearray(b'<BBBB')
     |  
     |  ordered_fieldnames = ['target_system', 'target_component', 'len', 'dat...
     |  
     |  orders = [0, 1, 2, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_gps_input_message(MAVLink_message)
     |  GPS sensor input message.  This is a raw sensor value sent by
     |  the GPS. This is NOT the global position estimate of the
     |  system.
     |  
     |  Method resolution order:
     |      MAVLink_gps_input_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, gps_id, ignore_flags, time_week_ms, time_week, fix_type, lat, lon, alt, hdop, vdop, vn, ve, vd, speed_accuracy, horiz_accuracy, vert_accuracy, satellites_visible)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 151
     |  
     |  fielddisplays_by_name = {'ignore_flags': 'bitmask'}
     |  
     |  fieldenums_by_name = {'ignore_flags': 'GPS_INPUT_IGNORE_FLAGS'}
     |  
     |  fieldnames = ['time_usec', 'gps_id', 'ignore_flags', 'time_week_ms', '...
     |  
     |  fieldtypes = ['uint64_t', 'uint8_t', 'uint16_t', 'uint32_t', 'uint16_t...
     |  
     |  fieldunits_by_name = {'alt': 'm', 'hdop': 'm', 'horiz_accuracy': 'm', ...
     |  
     |  format = '<QIiifffffffffHHBBB'
     |  
     |  id = 232
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'GPS_INPUT'
     |  
     |  native_format = bytearray(b'<QIiifffffffffHHBBB')
     |  
     |  ordered_fieldnames = ['time_usec', 'time_week_ms', 'lat', 'lon', 'alt'...
     |  
     |  orders = [0, 15, 13, 1, 14, 16, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17...
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_gps_raw_int_message(MAVLink_message)
     |  The global position, as returned by the Global Positioning
     |  System (GPS). This is                 NOT the global position
     |  estimate of the system, but rather a RAW sensor value. See
     |  message GLOBAL_POSITION for the global position estimate.
     |  
     |  Method resolution order:
     |      MAVLink_gps_raw_int_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, fix_type, lat, lon, alt, eph, epv, vel, cog, satellites_visible)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 24
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'fix_type': 'GPS_FIX_TYPE'}
     |  
     |  fieldnames = ['time_usec', 'fix_type', 'lat', 'lon', 'alt', 'eph', 'ep...
     |  
     |  fieldtypes = ['uint64_t', 'uint8_t', 'int32_t', 'int32_t', 'int32_t', ...
     |  
     |  fieldunits_by_name = {'alt': 'mm', 'cog': 'cdeg', 'lat': 'degE7', 'lon...
     |  
     |  format = '<QiiiHHHHBB'
     |  
     |  id = 24
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'GPS_RAW_INT'
     |  
     |  native_format = bytearray(b'<QiiiHHHHBB')
     |  
     |  ordered_fieldnames = ['time_usec', 'lat', 'lon', 'alt', 'eph', 'epv', ...
     |  
     |  orders = [0, 8, 1, 2, 3, 4, 5, 6, 7, 9]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_gps_rtcm_data_message(MAVLink_message)
     |  RTCM message for injecting into the onboard GPS (used for
     |  DGPS)
     |  
     |  Method resolution order:
     |      MAVLink_gps_rtcm_data_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, flags, len, data)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 180]
     |  
     |  crc_extra = 35
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['flags', 'len', 'data']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {'len': 'bytes'}
     |  
     |  format = '<BB180B'
     |  
     |  id = 233
     |  
     |  lengths = [1, 1, 180]
     |  
     |  name = 'GPS_RTCM_DATA'
     |  
     |  native_format = bytearray(b'<BBB')
     |  
     |  ordered_fieldnames = ['flags', 'len', 'data']
     |  
     |  orders = [0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_gps_rtk_message(MAVLink_message)
     |  RTK GPS data. Gives information on the relative baseline
     |  calculation the GPS is reporting
     |  
     |  Method resolution order:
     |      MAVLink_gps_rtk_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_last_baseline_ms, rtk_receiver_id, wn, tow, rtk_health, rtk_rate, nsats, baseline_coords_type, baseline_a_mm, baseline_b_mm, baseline_c_mm, accuracy, iar_num_hypotheses)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 25
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'baseline_coords_type': 'RTK_BASELINE_COORDINATE...
     |  
     |  fieldnames = ['time_last_baseline_ms', 'rtk_receiver_id', 'wn', 'tow',...
     |  
     |  fieldtypes = ['uint32_t', 'uint8_t', 'uint16_t', 'uint32_t', 'uint8_t'...
     |  
     |  fieldunits_by_name = {'baseline_a_mm': 'mm', 'baseline_b_mm': 'mm', 'b...
     |  
     |  format = '<IIiiiIiHBBBBB'
     |  
     |  id = 127
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'GPS_RTK'
     |  
     |  native_format = bytearray(b'<IIiiiIiHBBBBB')
     |  
     |  ordered_fieldnames = ['time_last_baseline_ms', 'tow', 'baseline_a_mm',...
     |  
     |  orders = [0, 8, 7, 1, 9, 10, 11, 12, 2, 3, 4, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_gps_status_message(MAVLink_message)
     |  The positioning status, as reported by GPS. This message is
     |  intended to display status information about each satellite
     |  visible to the receiver. See message GLOBAL_POSITION for the
     |  global position estimate. This message can contain information
     |  for up to 20 satellites.
     |  
     |  Method resolution order:
     |      MAVLink_gps_status_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, satellites_visible, satellite_prn, satellite_used, satellite_elevation, satellite_azimuth, satellite_snr)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 20, 20, 20, 20, 20]
     |  
     |  crc_extra = 23
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['satellites_visible', 'satellite_prn', 'satellite_used',...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', '...
     |  
     |  fieldunits_by_name = {'satellite_azimuth': 'deg', 'satellite_elevation...
     |  
     |  format = '<B20B20B20B20B20B'
     |  
     |  id = 25
     |  
     |  lengths = [1, 20, 20, 20, 20, 20]
     |  
     |  name = 'GPS_STATUS'
     |  
     |  native_format = bytearray(b'<BBBBBB')
     |  
     |  ordered_fieldnames = ['satellites_visible', 'satellite_prn', 'satellit...
     |  
     |  orders = [0, 1, 2, 3, 4, 5]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_header(builtins.object)
     |  MAVLink message header
     |  
     |  Methods defined here:
     |  
     |  __init__(self, msgId, incompat_flags=0, compat_flags=0, mlen=0, seq=0, srcSystem=0, srcComponent=0)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class MAVLink_heartbeat_message(MAVLink_message)
     |  The heartbeat message shows that a system or component is
     |  present and responding. The type and autopilot fields (along
     |  with the message component id), allow the receiving system to
     |  treat further messages from this system appropriately (e.g. by
     |  laying out the user interface based on the autopilot). This
     |  microservice is documented at
     |  https://mavlink.io/en/services/heartbeat.html
     |  
     |  Method resolution order:
     |      MAVLink_heartbeat_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, type, autopilot, base_mode, custom_mode, system_status, mavlink_version)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 50
     |  
     |  fielddisplays_by_name = {'base_mode': 'bitmask'}
     |  
     |  fieldenums_by_name = {'autopilot': 'MAV_AUTOPILOT', 'base_mode': 'MAV_...
     |  
     |  fieldnames = ['type', 'autopilot', 'base_mode', 'custom_mode', 'system...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint32_t', 'uint8_t', ...
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<IBBBBB'
     |  
     |  id = 0
     |  
     |  lengths = [1, 1, 1, 1, 1, 1]
     |  
     |  name = 'HEARTBEAT'
     |  
     |  native_format = bytearray(b'<IBBBBB')
     |  
     |  ordered_fieldnames = ['custom_mode', 'type', 'autopilot', 'base_mode',...
     |  
     |  orders = [1, 2, 3, 0, 4, 5]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_high_latency_message(MAVLink_message)
     |  Message appropriate for high latency connections like Iridium
     |  
     |  Method resolution order:
     |      MAVLink_high_latency_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, base_mode, custom_mode, landed_state, roll, pitch, heading, throttle, heading_sp, latitude, longitude, altitude_amsl, altitude_sp, airspeed, airspeed_sp, groundspeed, climb_rate, gps_nsat, gps_fix_type, battery_remaining, temperature, temperature_air, failsafe, wp_num, wp_distance)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...
     |  
     |  crc_extra = 150
     |  
     |  fielddisplays_by_name = {'base_mode': 'bitmask', 'custom_mode': 'bitma...
     |  
     |  fieldenums_by_name = {'base_mode': 'MAV_MODE_FLAG', 'gps_fix_type': 'G...
     |  
     |  fieldnames = ['base_mode', 'custom_mode', 'landed_state', 'roll', 'pit...
     |  
     |  fieldtypes = ['uint8_t', 'uint32_t', 'uint8_t', 'int16_t', 'int16_t', ...
     |  
     |  fieldunits_by_name = {'airspeed': 'm/s', 'airspeed_sp': 'm/s', 'altitu...
     |  
     |  format = '<IiihhHhhhHBBbBBBbBBBbbBB'
     |  
     |  id = 234
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,...
     |  
     |  name = 'HIGH_LATENCY'
     |  
     |  native_format = bytearray(b'<IiihhHhhhHBBbBBBbBBBbbBB')
     |  
     |  ordered_fieldnames = ['custom_mode', 'latitude', 'longitude', 'roll', ...
     |  
     |  orders = [10, 0, 11, 3, 4, 5, 12, 6, 1, 2, 7, 8, 13, 14, 15, 16, 17, 1...
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_highres_imu_message(MAVLink_message)
     |  The IMU readings in SI units in NED body frame
     |  
     |  Method resolution order:
     |      MAVLink_highres_imu_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, abs_pressure, diff_pressure, pressure_alt, temperature, fields_updated)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 93
     |  
     |  fielddisplays_by_name = {'fields_updated': 'bitmask'}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', '...
     |  
     |  fieldtypes = ['uint64_t', 'float', 'float', 'float', 'float', 'float',...
     |  
     |  fieldunits_by_name = {'abs_pressure': 'mbar', 'diff_pressure': 'mbar',...
     |  
     |  format = '<QfffffffffffffH'
     |  
     |  id = 105
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'HIGHRES_IMU'
     |  
     |  native_format = bytearray(b'<QfffffffffffffH')
     |  
     |  ordered_fieldnames = ['time_usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'y...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_hil_actuator_controls_message(MAVLink_message)
     |  Sent from autopilot to simulation. Hardware in the loop
     |  control outputs (replacement for HIL_CONTROLS)
     |  
     |  Method resolution order:
     |      MAVLink_hil_actuator_controls_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, controls, mode, flags)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 16, 0]
     |  
     |  crc_extra = 47
     |  
     |  fielddisplays_by_name = {'flags': 'bitmask', 'mode': 'bitmask'}
     |  
     |  fieldenums_by_name = {'mode': 'MAV_MODE_FLAG'}
     |  
     |  fieldnames = ['time_usec', 'controls', 'mode', 'flags']
     |  
     |  fieldtypes = ['uint64_t', 'float', 'uint8_t', 'uint64_t']
     |  
     |  fieldunits_by_name = {'time_usec': 'us'}
     |  
     |  format = '<QQ16fB'
     |  
     |  id = 93
     |  
     |  lengths = [1, 1, 16, 1]
     |  
     |  name = 'HIL_ACTUATOR_CONTROLS'
     |  
     |  native_format = bytearray(b'<QQfB')
     |  
     |  ordered_fieldnames = ['time_usec', 'flags', 'controls', 'mode']
     |  
     |  orders = [0, 2, 3, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_hil_controls_message(MAVLink_message)
     |  Sent from autopilot to simulation. Hardware in the loop
     |  control outputs
     |  
     |  Method resolution order:
     |      MAVLink_hil_controls_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, roll_ailerons, pitch_elevator, yaw_rudder, throttle, aux1, aux2, aux3, aux4, mode, nav_mode)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 63
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'mode': 'MAV_MODE'}
     |  
     |  fieldnames = ['time_usec', 'roll_ailerons', 'pitch_elevator', 'yaw_rud...
     |  
     |  fieldtypes = ['uint64_t', 'float', 'float', 'float', 'float', 'float',...
     |  
     |  fieldunits_by_name = {'time_usec': 'us'}
     |  
     |  format = '<QffffffffBB'
     |  
     |  id = 91
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'HIL_CONTROLS'
     |  
     |  native_format = bytearray(b'<QffffffffBB')
     |  
     |  ordered_fieldnames = ['time_usec', 'roll_ailerons', 'pitch_elevator', ...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_hil_gps_message(MAVLink_message)
     |  The global position, as returned by the Global Positioning
     |  System (GPS). This is                  NOT the global position
     |  estimate of the sytem, but rather a RAW sensor value. See
     |  message GLOBAL_POSITION for the global position estimate.
     |  
     |  Method resolution order:
     |      MAVLink_hil_gps_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, fix_type, lat, lon, alt, eph, epv, vel, vn, ve, vd, cog, satellites_visible)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 124
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'fix_type', 'lat', 'lon', 'alt', 'eph', 'ep...
     |  
     |  fieldtypes = ['uint64_t', 'uint8_t', 'int32_t', 'int32_t', 'int32_t', ...
     |  
     |  fieldunits_by_name = {'alt': 'mm', 'cog': 'cdeg', 'eph': 'cm', 'epv': ...
     |  
     |  format = '<QiiiHHHhhhHBB'
     |  
     |  id = 113
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'HIL_GPS'
     |  
     |  native_format = bytearray(b'<QiiiHHHhhhHBB')
     |  
     |  ordered_fieldnames = ['time_usec', 'lat', 'lon', 'alt', 'eph', 'epv', ...
     |  
     |  orders = [0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_hil_optical_flow_message(MAVLink_message)
     |  Simulated optical flow from a flow sensor (e.g. PX4FLOW or
     |  optical mouse sensor)
     |  
     |  Method resolution order:
     |      MAVLink_hil_optical_flow_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, sensor_id, integration_time_us, integrated_x, integrated_y, integrated_xgyro, integrated_ygyro, integrated_zgyro, temperature, quality, time_delta_distance_us, distance)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 237
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'sensor_id', 'integration_time_us', 'integr...
     |  
     |  fieldtypes = ['uint64_t', 'uint8_t', 'uint32_t', 'float', 'float', 'fl...
     |  
     |  fieldunits_by_name = {'distance': 'm', 'integrated_x': 'rad', 'integra...
     |  
     |  format = '<QIfffffIfhBB'
     |  
     |  id = 114
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'HIL_OPTICAL_FLOW'
     |  
     |  native_format = bytearray(b'<QIfffffIfhBB')
     |  
     |  ordered_fieldnames = ['time_usec', 'integration_time_us', 'integrated_...
     |  
     |  orders = [0, 10, 1, 2, 3, 4, 5, 6, 9, 11, 7, 8]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_hil_rc_inputs_raw_message(MAVLink_message)
     |  Sent from simulation to autopilot. The RAW values of the RC
     |  channels received. The standard PPM modulation is as follows:
     |  1000 microseconds: 0%, 2000 microseconds: 100%. Individual
     |  receivers/transmitters might violate this specification.
     |  
     |  Method resolution order:
     |      MAVLink_hil_rc_inputs_raw_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, chan9_raw, chan10_raw, chan11_raw, chan12_raw, rssi)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 54
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'chan1_raw', 'chan2_raw', 'chan3_raw', 'cha...
     |  
     |  fieldtypes = ['uint64_t', 'uint16_t', 'uint16_t', 'uint16_t', 'uint16_...
     |  
     |  fieldunits_by_name = {'chan10_raw': 'us', 'chan11_raw': 'us', 'chan12_...
     |  
     |  format = '<QHHHHHHHHHHHHB'
     |  
     |  id = 92
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'HIL_RC_INPUTS_RAW'
     |  
     |  native_format = bytearray(b'<QHHHHHHHHHHHHB')
     |  
     |  ordered_fieldnames = ['time_usec', 'chan1_raw', 'chan2_raw', 'chan3_ra...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_hil_sensor_message(MAVLink_message)
     |  The IMU readings in SI units in NED body frame
     |  
     |  Method resolution order:
     |      MAVLink_hil_sensor_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag, abs_pressure, diff_pressure, pressure_alt, temperature, fields_updated)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 108
     |  
     |  fielddisplays_by_name = {'fields_updated': 'bitmask'}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', '...
     |  
     |  fieldtypes = ['uint64_t', 'float', 'float', 'float', 'float', 'float',...
     |  
     |  fieldunits_by_name = {'abs_pressure': 'mbar', 'diff_pressure': 'mbar',...
     |  
     |  format = '<QfffffffffffffI'
     |  
     |  id = 107
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'HIL_SENSOR'
     |  
     |  native_format = bytearray(b'<QfffffffffffffI')
     |  
     |  ordered_fieldnames = ['time_usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'y...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_hil_state_message(MAVLink_message)
     |  Sent from simulation to autopilot. This packet is useful for
     |  high throughput applications such as hardware in the loop
     |  simulations.
     |  
     |  Method resolution order:
     |      MAVLink_hil_state_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, xacc, yacc, zacc)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 183
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'roll', 'pitch', 'yaw', 'rollspeed', 'pitch...
     |  
     |  fieldtypes = ['uint64_t', 'float', 'float', 'float', 'float', 'float',...
     |  
     |  fieldunits_by_name = {'alt': 'mm', 'lat': 'degE7', 'lon': 'degE7', 'pi...
     |  
     |  format = '<Qffffffiiihhhhhh'
     |  
     |  id = 90
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'HIL_STATE'
     |  
     |  native_format = bytearray(b'<Qffffffiiihhhhhh')
     |  
     |  ordered_fieldnames = ['time_usec', 'roll', 'pitch', 'yaw', 'rollspeed'...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_hil_state_quaternion_message(MAVLink_message)
     |  Sent from simulation to autopilot, avoids in contrast to
     |  HIL_STATE singularities. This packet is useful for high
     |  throughput applications such as hardware in the loop
     |  simulations.
     |  
     |  Method resolution order:
     |      MAVLink_hil_state_quaternion_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, attitude_quaternion, rollspeed, pitchspeed, yawspeed, lat, lon, alt, vx, vy, vz, ind_airspeed, true_airspeed, xacc, yacc, zacc)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 4
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'attitude_quaternion', 'rollspeed', 'pitchs...
     |  
     |  fieldtypes = ['uint64_t', 'float', 'float', 'float', 'float', 'int32_t...
     |  
     |  fieldunits_by_name = {'alt': 'mm', 'ind_airspeed': 'cm/s', 'lat': 'deg...
     |  
     |  format = '<Q4ffffiiihhhHHhhh'
     |  
     |  id = 115
     |  
     |  lengths = [1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'HIL_STATE_QUATERNION'
     |  
     |  native_format = bytearray(b'<QffffiiihhhHHhhh')
     |  
     |  ordered_fieldnames = ['time_usec', 'attitude_quaternion', 'rollspeed',...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_home_position_message(MAVLink_message)
     |  This message can be requested by sending the
     |  MAV_CMD_GET_HOME_POSITION command. The position the system
     |  will return to and land on. The position is set automatically
     |  by the system during the takeoff in case it was not explicitly
     |  set by the operator before or after. The position the system
     |  will return to and land on. The global and local positions
     |  encode the position in the respective coordinate frames, while
     |  the q parameter encodes the orientation of the surface. Under
     |  normal conditions it describes the heading and terrain slope,
     |  which can be used by the aircraft to adjust the approach. The
     |  approach 3D vector describes the point to which the system
     |  should fly in normal flight mode and then perform a landing
     |  sequence along the vector.
     |  
     |  Method resolution order:
     |      MAVLink_home_position_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, latitude, longitude, altitude, x, y, z, q, approach_x, approach_y, approach_z)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 4, 0, 0, 0]
     |  
     |  crc_extra = 104
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['latitude', 'longitude', 'altitude', 'x', 'y', 'z', 'q',...
     |  
     |  fieldtypes = ['int32_t', 'int32_t', 'int32_t', 'float', 'float', 'floa...
     |  
     |  fieldunits_by_name = {'altitude': 'mm', 'approach_x': 'm', 'approach_y...
     |  
     |  format = '<iiifff4ffff'
     |  
     |  id = 242
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 4, 1, 1, 1]
     |  
     |  name = 'HOME_POSITION'
     |  
     |  native_format = bytearray(b'<iiifffffff')
     |  
     |  ordered_fieldnames = ['latitude', 'longitude', 'altitude', 'x', 'y', '...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_hwstatus_message(MAVLink_message)
     |  Status of key hardware.
     |  
     |  Method resolution order:
     |      MAVLink_hwstatus_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, Vcc, I2Cerr)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 21
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['Vcc', 'I2Cerr']
     |  
     |  fieldtypes = ['uint16_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {'Vcc': 'mV'}
     |  
     |  format = '<HB'
     |  
     |  id = 165
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'HWSTATUS'
     |  
     |  native_format = bytearray(b'<HB')
     |  
     |  ordered_fieldnames = ['Vcc', 'I2Cerr']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_landing_target_message(MAVLink_message)
     |  The location of a landing target. See:
     |  https://mavlink.io/en/services/landing_target.html
     |  
     |  Method resolution order:
     |      MAVLink_landing_target_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, target_num, frame, angle_x, angle_y, distance, size_x, size_y)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 200
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'frame': 'MAV_FRAME'}
     |  
     |  fieldnames = ['time_usec', 'target_num', 'frame', 'angle_x', 'angle_y'...
     |  
     |  fieldtypes = ['uint64_t', 'uint8_t', 'uint8_t', 'float', 'float', 'flo...
     |  
     |  fieldunits_by_name = {'angle_x': 'rad', 'angle_y': 'rad', 'distance': ...
     |  
     |  format = '<QfffffBB'
     |  
     |  id = 149
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'LANDING_TARGET'
     |  
     |  native_format = bytearray(b'<QfffffBB')
     |  
     |  ordered_fieldnames = ['time_usec', 'angle_x', 'angle_y', 'distance', '...
     |  
     |  orders = [0, 6, 7, 1, 2, 3, 4, 5]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_led_control_message(MAVLink_message)
     |  Control vehicle LEDs.
     |  
     |  Method resolution order:
     |      MAVLink_led_control_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, instance, pattern, custom_len, custom_bytes)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 24]
     |  
     |  crc_extra = 72
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'instance', 'patter...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', '...
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BBBBB24B'
     |  
     |  id = 186
     |  
     |  lengths = [1, 1, 1, 1, 1, 24]
     |  
     |  name = 'LED_CONTROL'
     |  
     |  native_format = bytearray(b'<BBBBBB')
     |  
     |  ordered_fieldnames = ['target_system', 'target_component', 'instance',...
     |  
     |  orders = [0, 1, 2, 3, 4, 5]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_limits_status_message(MAVLink_message)
     |  Status of AP_Limits. Sent in extended status stream when
     |  AP_Limits is enabled.
     |  
     |  Method resolution order:
     |      MAVLink_limits_status_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, limits_state, last_trigger, last_action, last_recovery, last_clear, breach_count, mods_enabled, mods_required, mods_triggered)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 144
     |  
     |  fielddisplays_by_name = {'mods_enabled': 'bitmask', 'mods_required': '...
     |  
     |  fieldenums_by_name = {'limits_state': 'LIMITS_STATE', 'mods_enabled': ...
     |  
     |  fieldnames = ['limits_state', 'last_trigger', 'last_action', 'last_rec...
     |  
     |  fieldtypes = ['uint8_t', 'uint32_t', 'uint32_t', 'uint32_t', 'uint32_t...
     |  
     |  fieldunits_by_name = {'last_action': 'ms', 'last_clear': 'ms', 'last_r...
     |  
     |  format = '<IIIIHBBBB'
     |  
     |  id = 167
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'LIMITS_STATUS'
     |  
     |  native_format = bytearray(b'<IIIIHBBBB')
     |  
     |  ordered_fieldnames = ['last_trigger', 'last_action', 'last_recovery', ...
     |  
     |  orders = [5, 0, 1, 2, 3, 4, 6, 7, 8]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_local_position_ned_cov_message(MAVLink_message)
     |  The filtered local position (e.g. fused computer vision and
     |  accelerometers). Coordinate frame is right-handed, Z-axis down
     |  (aeronautical frame, NED / north-east-down convention)
     |  
     |  Method resolution order:
     |      MAVLink_local_position_ned_cov_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, estimator_type, x, y, z, vx, vy, vz, ax, ay, az, covariance)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0]
     |  
     |  crc_extra = 191
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'estimator_type': 'MAV_ESTIMATOR_TYPE'}
     |  
     |  fieldnames = ['time_usec', 'estimator_type', 'x', 'y', 'z', 'vx', 'vy'...
     |  
     |  fieldtypes = ['uint64_t', 'uint8_t', 'float', 'float', 'float', 'float...
     |  
     |  fieldunits_by_name = {'ax': 'm/s/s', 'ay': 'm/s/s', 'az': 'm/s/s', 'ti...
     |  
     |  format = '<Qfffffffff45fB'
     |  
     |  id = 64
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 1]
     |  
     |  name = 'LOCAL_POSITION_NED_COV'
     |  
     |  native_format = bytearray(b'<QffffffffffB')
     |  
     |  ordered_fieldnames = ['time_usec', 'x', 'y', 'z', 'vx', 'vy', 'vz', 'a...
     |  
     |  orders = [0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_local_position_ned_message(MAVLink_message)
     |  The filtered local position (e.g. fused computer vision and
     |  accelerometers). Coordinate frame is right-handed, Z-axis down
     |  (aeronautical frame, NED / north-east-down convention)
     |  
     |  Method resolution order:
     |      MAVLink_local_position_ned_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, x, y, z, vx, vy, vz)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 185
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'x', 'y', 'z', 'vx', 'vy', 'vz']
     |  
     |  fieldtypes = ['uint32_t', 'float', 'float', 'float', 'float', 'float',...
     |  
     |  fieldunits_by_name = {'time_boot_ms': 'ms', 'vx': 'm/s', 'vy': 'm/s', ...
     |  
     |  format = '<Iffffff'
     |  
     |  id = 32
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'LOCAL_POSITION_NED'
     |  
     |  native_format = bytearray(b'<Iffffff')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'x', 'y', 'z', 'vx', 'vy', 'vz']
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_local_position_ned_system_global_offset_message(MAVLink_message)
     |  The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED
     |  messages of MAV X and the global coordinate frame in NED
     |  coordinates. Coordinate frame is right-handed, Z-axis down
     |  (aeronautical frame, NED / north-east-down convention)
     |  
     |  Method resolution order:
     |      MAVLink_local_position_ned_system_global_offset_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, x, y, z, roll, pitch, yaw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 231
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'x', 'y', 'z', 'roll', 'pitch', 'yaw']
     |  
     |  fieldtypes = ['uint32_t', 'float', 'float', 'float', 'float', 'float',...
     |  
     |  fieldunits_by_name = {'pitch': 'rad', 'roll': 'rad', 'time_boot_ms': '...
     |  
     |  format = '<Iffffff'
     |  
     |  id = 89
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET'
     |  
     |  native_format = bytearray(b'<Iffffff')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'x', 'y', 'z', 'roll', 'pitch', ...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_log_data_message(MAVLink_message)
     |  Reply to LOG_REQUEST_DATA
     |  
     |  Method resolution order:
     |      MAVLink_log_data_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, id, ofs, count, data)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 90]
     |  
     |  crc_extra = 134
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['id', 'ofs', 'count', 'data']
     |  
     |  fieldtypes = ['uint16_t', 'uint32_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {'count': 'bytes'}
     |  
     |  format = '<IHB90B'
     |  
     |  id = 120
     |  
     |  lengths = [1, 1, 1, 90]
     |  
     |  name = 'LOG_DATA'
     |  
     |  native_format = bytearray(b'<IHBB')
     |  
     |  ordered_fieldnames = ['ofs', 'id', 'count', 'data']
     |  
     |  orders = [1, 0, 2, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_log_entry_message(MAVLink_message)
     |  Reply to LOG_REQUEST_LIST
     |  
     |  Method resolution order:
     |      MAVLink_log_entry_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, id, num_logs, last_log_num, time_utc, size)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0]
     |  
     |  crc_extra = 56
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['id', 'num_logs', 'last_log_num', 'time_utc', 'size']
     |  
     |  fieldtypes = ['uint16_t', 'uint16_t', 'uint16_t', 'uint32_t', 'uint32_...
     |  
     |  fieldunits_by_name = {'size': 'bytes', 'time_utc': 's'}
     |  
     |  format = '<IIHHH'
     |  
     |  id = 118
     |  
     |  lengths = [1, 1, 1, 1, 1]
     |  
     |  name = 'LOG_ENTRY'
     |  
     |  native_format = bytearray(b'<IIHHH')
     |  
     |  ordered_fieldnames = ['time_utc', 'size', 'id', 'num_logs', 'last_log_...
     |  
     |  orders = [2, 3, 4, 0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_log_erase_message(MAVLink_message)
     |  Erase all logs
     |  
     |  Method resolution order:
     |      MAVLink_log_erase_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 237
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BB'
     |  
     |  id = 121
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'LOG_ERASE'
     |  
     |  native_format = bytearray(b'<BB')
     |  
     |  ordered_fieldnames = ['target_system', 'target_component']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_log_request_data_message(MAVLink_message)
     |  Request a chunk of a log
     |  
     |  Method resolution order:
     |      MAVLink_log_request_data_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, id, ofs, count)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0]
     |  
     |  crc_extra = 116
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'id', 'ofs', 'count...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint16_t', 'uint32_t', 'uint32_t'...
     |  
     |  fieldunits_by_name = {'count': 'bytes'}
     |  
     |  format = '<IIHBB'
     |  
     |  id = 119
     |  
     |  lengths = [1, 1, 1, 1, 1]
     |  
     |  name = 'LOG_REQUEST_DATA'
     |  
     |  native_format = bytearray(b'<IIHBB')
     |  
     |  ordered_fieldnames = ['ofs', 'count', 'id', 'target_system', 'target_c...
     |  
     |  orders = [3, 4, 2, 0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_log_request_end_message(MAVLink_message)
     |  Stop log transfer and resume normal logging
     |  
     |  Method resolution order:
     |      MAVLink_log_request_end_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 203
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BB'
     |  
     |  id = 122
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'LOG_REQUEST_END'
     |  
     |  native_format = bytearray(b'<BB')
     |  
     |  ordered_fieldnames = ['target_system', 'target_component']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_log_request_list_message(MAVLink_message)
     |  Request a list of available logs. On some systems calling this
     |  may stop on-board logging until LOG_REQUEST_END is called.
     |  
     |  Method resolution order:
     |      MAVLink_log_request_list_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, start, end)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0]
     |  
     |  crc_extra = 128
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'start', 'end']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint16_t', 'uint16_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<HHBB'
     |  
     |  id = 117
     |  
     |  lengths = [1, 1, 1, 1]
     |  
     |  name = 'LOG_REQUEST_LIST'
     |  
     |  native_format = bytearray(b'<HHBB')
     |  
     |  ordered_fieldnames = ['start', 'end', 'target_system', 'target_compone...
     |  
     |  orders = [2, 3, 0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mag_cal_progress_message(MAVLink_message)
     |  Reports progress of compass calibration.
     |  
     |  Method resolution order:
     |      MAVLink_mag_cal_progress_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, compass_id, cal_mask, cal_status, attempt, completion_pct, completion_mask, direction_x, direction_y, direction_z)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 10]
     |  
     |  crc_extra = 92
     |  
     |  fielddisplays_by_name = {'cal_mask': 'bitmask'}
     |  
     |  fieldenums_by_name = {'cal_status': 'MAG_CAL_STATUS'}
     |  
     |  fieldnames = ['compass_id', 'cal_mask', 'cal_status', 'attempt', 'comp...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', '...
     |  
     |  fieldunits_by_name = {'completion_pct': '%'}
     |  
     |  format = '<fffBBBBB10B'
     |  
     |  id = 191
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 10]
     |  
     |  name = 'MAG_CAL_PROGRESS'
     |  
     |  native_format = bytearray(b'<fffBBBBBB')
     |  
     |  ordered_fieldnames = ['direction_x', 'direction_y', 'direction_z', 'co...
     |  
     |  orders = [3, 4, 5, 6, 7, 8, 0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mag_cal_report_message(MAVLink_message)
     |  Reports results of completed compass calibration. Sent until
     |  MAG_CAL_ACK received.
     |  
     |  Method resolution order:
     |      MAVLink_mag_cal_report_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, compass_id, cal_mask, cal_status, autosaved, fitness, ofs_x, ofs_y, ofs_z, diag_x, diag_y, diag_z, offdiag_x, offdiag_y, offdiag_z)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 36
     |  
     |  fielddisplays_by_name = {'cal_mask': 'bitmask'}
     |  
     |  fieldenums_by_name = {'cal_status': 'MAG_CAL_STATUS'}
     |  
     |  fieldnames = ['compass_id', 'cal_mask', 'cal_status', 'autosaved', 'fi...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'float', 'fl...
     |  
     |  fieldunits_by_name = {'fitness': 'mgauss'}
     |  
     |  format = '<ffffffffffBBBB'
     |  
     |  id = 192
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'MAG_CAL_REPORT'
     |  
     |  native_format = bytearray(b'<ffffffffffBBBB')
     |  
     |  ordered_fieldnames = ['fitness', 'ofs_x', 'ofs_y', 'ofs_z', 'diag_x', ...
     |  
     |  orders = [10, 11, 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_manual_control_message(MAVLink_message)
     |  This message provides an API for manually controlling the
     |  vehicle using standard joystick axes nomenclature, along with
     |  a joystick-like input device. Unused axes can be disabled an
     |  buttons are also transmit as boolean values of their
     |  
     |  Method resolution order:
     |      MAVLink_manual_control_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target, x, y, z, r, buttons)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 243
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target', 'x', 'y', 'z', 'r', 'buttons']
     |  
     |  fieldtypes = ['uint8_t', 'int16_t', 'int16_t', 'int16_t', 'int16_t', '...
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<hhhhHB'
     |  
     |  id = 69
     |  
     |  lengths = [1, 1, 1, 1, 1, 1]
     |  
     |  name = 'MANUAL_CONTROL'
     |  
     |  native_format = bytearray(b'<hhhhHB')
     |  
     |  ordered_fieldnames = ['x', 'y', 'z', 'r', 'buttons', 'target']
     |  
     |  orders = [5, 0, 1, 2, 3, 4]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_manual_setpoint_message(MAVLink_message)
     |  Setpoint in roll, pitch, yaw and thrust from the operator
     |  
     |  Method resolution order:
     |      MAVLink_manual_setpoint_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, roll, pitch, yaw, thrust, mode_switch, manual_override_switch)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 106
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'roll', 'pitch', 'yaw', 'thrust', 'mode_...
     |  
     |  fieldtypes = ['uint32_t', 'float', 'float', 'float', 'float', 'uint8_t...
     |  
     |  fieldunits_by_name = {'pitch': 'rad/s', 'roll': 'rad/s', 'time_boot_ms...
     |  
     |  format = '<IffffBB'
     |  
     |  id = 81
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'MANUAL_SETPOINT'
     |  
     |  native_format = bytearray(b'<IffffBB')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'roll', 'pitch', 'yaw', 'thrust'...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_meminfo_message(MAVLink_message)
     |  State of APM memory.
     |  
     |  Method resolution order:
     |      MAVLink_meminfo_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, brkval, freemem)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 208
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['brkval', 'freemem']
     |  
     |  fieldtypes = ['uint16_t', 'uint16_t']
     |  
     |  fieldunits_by_name = {'freemem': 'bytes'}
     |  
     |  format = '<HH'
     |  
     |  id = 152
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'MEMINFO'
     |  
     |  native_format = bytearray(b'<HH')
     |  
     |  ordered_fieldnames = ['brkval', 'freemem']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_memory_vect_message(MAVLink_message)
     |  Send raw controller memory. The use of this message is
     |  discouraged for normal packets, but a quite efficient way for
     |  testing new messages and getting experimental debug output.
     |  
     |  Method resolution order:
     |      MAVLink_memory_vect_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, address, ver, type, value)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 32]
     |  
     |  crc_extra = 204
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['address', 'ver', 'type', 'value']
     |  
     |  fieldtypes = ['uint16_t', 'uint8_t', 'uint8_t', 'int8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<HBB32b'
     |  
     |  id = 249
     |  
     |  lengths = [1, 1, 1, 32]
     |  
     |  name = 'MEMORY_VECT'
     |  
     |  native_format = bytearray(b'<HBBb')
     |  
     |  ordered_fieldnames = ['address', 'ver', 'type', 'value']
     |  
     |  orders = [0, 1, 2, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_message(builtins.object)
     |  base MAVLink message class
     |  
     |  Methods defined here:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __init__(self, msgId, name)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  pack(self, mav, crc_extra, payload, force_mavlink1=False)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __hash__ = None
    
    class MAVLink_message_interval_message(MAVLink_message)
     |  The interval between messages for a particular MAVLink message
     |  ID. This message is the response to the
     |  MAV_CMD_GET_MESSAGE_INTERVAL command. This interface replaces
     |  DATA_STREAM.
     |  
     |  Method resolution order:
     |      MAVLink_message_interval_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, message_id, interval_us)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 95
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['message_id', 'interval_us']
     |  
     |  fieldtypes = ['uint16_t', 'int32_t']
     |  
     |  fieldunits_by_name = {'interval_us': 'us'}
     |  
     |  format = '<iH'
     |  
     |  id = 244
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'MESSAGE_INTERVAL'
     |  
     |  native_format = bytearray(b'<iH')
     |  
     |  ordered_fieldnames = ['interval_us', 'message_id']
     |  
     |  orders = [1, 0]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mission_ack_message(MAVLink_message)
     |  Acknowledgment message during waypoint handling. The type
     |  field states if this message is a positive ack (type=0) or if
     |  an error happened (type=non-zero).
     |  
     |  Method resolution order:
     |      MAVLink_mission_ack_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, type)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0]
     |  
     |  crc_extra = 153
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'type': 'MAV_MISSION_RESULT'}
     |  
     |  fieldnames = ['target_system', 'target_component', 'type']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BBB'
     |  
     |  id = 47
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'MISSION_ACK'
     |  
     |  native_format = bytearray(b'<BBB')
     |  
     |  ordered_fieldnames = ['target_system', 'target_component', 'type']
     |  
     |  orders = [0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mission_clear_all_message(MAVLink_message)
     |  Delete all mission items at once.
     |  
     |  Method resolution order:
     |      MAVLink_mission_clear_all_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 232
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BB'
     |  
     |  id = 45
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'MISSION_CLEAR_ALL'
     |  
     |  native_format = bytearray(b'<BB')
     |  
     |  ordered_fieldnames = ['target_system', 'target_component']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mission_count_message(MAVLink_message)
     |  This message is emitted as response to MISSION_REQUEST_LIST by
     |  the MAV and to initiate a write transaction. The GCS can then
     |  request the individual mission item based on the knowledge of
     |  the total number of waypoints.
     |  
     |  Method resolution order:
     |      MAVLink_mission_count_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, count)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0]
     |  
     |  crc_extra = 221
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'count']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint16_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<HBB'
     |  
     |  id = 44
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'MISSION_COUNT'
     |  
     |  native_format = bytearray(b'<HBB')
     |  
     |  ordered_fieldnames = ['count', 'target_system', 'target_component']
     |  
     |  orders = [1, 2, 0]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mission_current_message(MAVLink_message)
     |  Message that announces the sequence number of the current
     |  active mission item. The MAV will fly towards this mission
     |  item.
     |  
     |  Method resolution order:
     |      MAVLink_mission_current_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, seq)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0]
     |  
     |  crc_extra = 28
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['seq']
     |  
     |  fieldtypes = ['uint16_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<H'
     |  
     |  id = 42
     |  
     |  lengths = [1]
     |  
     |  name = 'MISSION_CURRENT'
     |  
     |  native_format = bytearray(b'<H')
     |  
     |  ordered_fieldnames = ['seq']
     |  
     |  orders = [0]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mission_item_int_message(MAVLink_message)
     |  Message encoding a mission item. This message is emitted to
     |  announce                 the presence of a mission item and to
     |  set a mission item on the system. The mission item can be
     |  either in x, y, z meters (type: LOCAL) or x:lat, y:lon,
     |  z:altitude. Local frame is Z-down, right handed (NED), global
     |  frame is Z-up, right handed (ENU). See also
     |  https://mavlink.io/en/services/mission.html.
     |  
     |  Method resolution order:
     |      MAVLink_mission_item_int_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 38
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'command': 'MAV_CMD', 'frame': 'MAV_FRAME'}
     |  
     |  fieldnames = ['target_system', 'target_component', 'seq', 'frame', 'co...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint16_t', 'uint8_t', 'uint16_t',...
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<ffffiifHHBBBBB'
     |  
     |  id = 73
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'MISSION_ITEM_INT'
     |  
     |  native_format = bytearray(b'<ffffiifHHBBBBB')
     |  
     |  ordered_fieldnames = ['param1', 'param2', 'param3', 'param4', 'x', 'y'...
     |  
     |  orders = [9, 10, 7, 11, 8, 12, 13, 0, 1, 2, 3, 4, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mission_item_message(MAVLink_message)
     |  Message encoding a mission item. This message is emitted to
     |  announce                 the presence of a mission item and to
     |  set a mission item on the system. The mission item can be
     |  either in x, y, z meters (type: LOCAL) or x:lat, y:lon,
     |  z:altitude. Local frame is Z-down, right handed (NED), global
     |  frame is Z-up, right handed (ENU). See also
     |  https://mavlink.io/en/services/mission.html.
     |  
     |  Method resolution order:
     |      MAVLink_mission_item_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, seq, frame, command, current, autocontinue, param1, param2, param3, param4, x, y, z)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 254
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'command': 'MAV_CMD', 'frame': 'MAV_FRAME'}
     |  
     |  fieldnames = ['target_system', 'target_component', 'seq', 'frame', 'co...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint16_t', 'uint8_t', 'uint16_t',...
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<fffffffHHBBBBB'
     |  
     |  id = 39
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'MISSION_ITEM'
     |  
     |  native_format = bytearray(b'<fffffffHHBBBBB')
     |  
     |  ordered_fieldnames = ['param1', 'param2', 'param3', 'param4', 'x', 'y'...
     |  
     |  orders = [9, 10, 7, 11, 8, 12, 13, 0, 1, 2, 3, 4, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mission_item_reached_message(MAVLink_message)
     |  A certain mission item has been reached. The system will
     |  either hold this position (or circle on the orbit) or (if the
     |  autocontinue on the WP was set) continue to the next waypoint.
     |  
     |  Method resolution order:
     |      MAVLink_mission_item_reached_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, seq)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0]
     |  
     |  crc_extra = 11
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['seq']
     |  
     |  fieldtypes = ['uint16_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<H'
     |  
     |  id = 46
     |  
     |  lengths = [1]
     |  
     |  name = 'MISSION_ITEM_REACHED'
     |  
     |  native_format = bytearray(b'<H')
     |  
     |  ordered_fieldnames = ['seq']
     |  
     |  orders = [0]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mission_request_int_message(MAVLink_message)
     |  Request the information of the mission item with the sequence
     |  number seq. The response of the system to this message should
     |  be a MISSION_ITEM_INT message.
     |  https://mavlink.io/en/services/mission.html
     |  
     |  Method resolution order:
     |      MAVLink_mission_request_int_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, seq)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0]
     |  
     |  crc_extra = 196
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'seq']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint16_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<HBB'
     |  
     |  id = 51
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'MISSION_REQUEST_INT'
     |  
     |  native_format = bytearray(b'<HBB')
     |  
     |  ordered_fieldnames = ['seq', 'target_system', 'target_component']
     |  
     |  orders = [1, 2, 0]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mission_request_list_message(MAVLink_message)
     |  Request the overall list of mission items from the
     |  system/component.
     |  
     |  Method resolution order:
     |      MAVLink_mission_request_list_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 132
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BB'
     |  
     |  id = 43
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'MISSION_REQUEST_LIST'
     |  
     |  native_format = bytearray(b'<BB')
     |  
     |  ordered_fieldnames = ['target_system', 'target_component']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mission_request_message(MAVLink_message)
     |  Request the information of the mission item with the sequence
     |  number seq. The response of the system to this message should
     |  be a MISSION_ITEM message.
     |  https://mavlink.io/en/services/mission.html
     |  
     |  Method resolution order:
     |      MAVLink_mission_request_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, seq)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0]
     |  
     |  crc_extra = 230
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'seq']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint16_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<HBB'
     |  
     |  id = 40
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'MISSION_REQUEST'
     |  
     |  native_format = bytearray(b'<HBB')
     |  
     |  ordered_fieldnames = ['seq', 'target_system', 'target_component']
     |  
     |  orders = [1, 2, 0]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mission_request_partial_list_message(MAVLink_message)
     |  Request a partial list of mission items from the
     |  system/component. https://mavlink.io/en/services/mission.html.
     |  If start and end index are the same, just send one waypoint.
     |  
     |  Method resolution order:
     |      MAVLink_mission_request_partial_list_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, start_index, end_index)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0]
     |  
     |  crc_extra = 212
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'start_index', 'end...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'int16_t', 'int16_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<hhBB'
     |  
     |  id = 37
     |  
     |  lengths = [1, 1, 1, 1]
     |  
     |  name = 'MISSION_REQUEST_PARTIAL_LIST'
     |  
     |  native_format = bytearray(b'<hhBB')
     |  
     |  ordered_fieldnames = ['start_index', 'end_index', 'target_system', 'ta...
     |  
     |  orders = [2, 3, 0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mission_set_current_message(MAVLink_message)
     |  Set the mission item with sequence number seq as current item.
     |  This means that the MAV will continue to this mission item on
     |  the shortest path (not following the mission items in-
     |  between).
     |  
     |  Method resolution order:
     |      MAVLink_mission_set_current_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, seq)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0]
     |  
     |  crc_extra = 28
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'seq']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint16_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<HBB'
     |  
     |  id = 41
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'MISSION_SET_CURRENT'
     |  
     |  native_format = bytearray(b'<HBB')
     |  
     |  ordered_fieldnames = ['seq', 'target_system', 'target_component']
     |  
     |  orders = [1, 2, 0]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mission_write_partial_list_message(MAVLink_message)
     |  This message is sent to the MAV to write a partial list. If
     |  start index == end index, only one item will be transmitted /
     |  updated. If the start index is NOT 0 and above the current
     |  list size, this request should be REJECTED!
     |  
     |  Method resolution order:
     |      MAVLink_mission_write_partial_list_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, start_index, end_index)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0]
     |  
     |  crc_extra = 9
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'start_index', 'end...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'int16_t', 'int16_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<hhBB'
     |  
     |  id = 38
     |  
     |  lengths = [1, 1, 1, 1]
     |  
     |  name = 'MISSION_WRITE_PARTIAL_LIST'
     |  
     |  native_format = bytearray(b'<hhBB')
     |  
     |  ordered_fieldnames = ['start_index', 'end_index', 'target_system', 'ta...
     |  
     |  orders = [2, 3, 0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mount_configure_message(MAVLink_message)
     |  Message to configure a camera mount, directional antenna, etc.
     |  
     |  Method resolution order:
     |      MAVLink_mount_configure_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, mount_mode, stab_roll, stab_pitch, stab_yaw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 19
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'mount_mode': 'MAV_MOUNT_MODE'}
     |  
     |  fieldnames = ['target_system', 'target_component', 'mount_mode', 'stab...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', '...
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BBBBBB'
     |  
     |  id = 156
     |  
     |  lengths = [1, 1, 1, 1, 1, 1]
     |  
     |  name = 'MOUNT_CONFIGURE'
     |  
     |  native_format = bytearray(b'<BBBBBB')
     |  
     |  ordered_fieldnames = ['target_system', 'target_component', 'mount_mode...
     |  
     |  orders = [0, 1, 2, 3, 4, 5]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mount_control_message(MAVLink_message)
     |  Message to control a camera mount, directional antenna, etc.
     |  
     |  Method resolution order:
     |      MAVLink_mount_control_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, input_a, input_b, input_c, save_position)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 21
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'input_a', 'input_b...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'int32_t', 'int32_t', 'int32_t', '...
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<iiiBBB'
     |  
     |  id = 157
     |  
     |  lengths = [1, 1, 1, 1, 1, 1]
     |  
     |  name = 'MOUNT_CONTROL'
     |  
     |  native_format = bytearray(b'<iiiBBB')
     |  
     |  ordered_fieldnames = ['input_a', 'input_b', 'input_c', 'target_system'...
     |  
     |  orders = [3, 4, 0, 1, 2, 5]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_mount_status_message(MAVLink_message)
     |  Message with some status from APM to GCS about camera or
     |  antenna mount.
     |  
     |  Method resolution order:
     |      MAVLink_mount_status_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, pointing_a, pointing_b, pointing_c)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0]
     |  
     |  crc_extra = 134
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'pointing_a', 'poin...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'int32_t', 'int32_t', 'int32_t']
     |  
     |  fieldunits_by_name = {'pointing_a': 'cdeg', 'pointing_b': 'cdeg', 'poi...
     |  
     |  format = '<iiiBB'
     |  
     |  id = 158
     |  
     |  lengths = [1, 1, 1, 1, 1]
     |  
     |  name = 'MOUNT_STATUS'
     |  
     |  native_format = bytearray(b'<iiiBB')
     |  
     |  ordered_fieldnames = ['pointing_a', 'pointing_b', 'pointing_c', 'targe...
     |  
     |  orders = [3, 4, 0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_named_value_float_message(MAVLink_message)
     |  Send a key-value pair as float. The use of this message is
     |  discouraged for normal packets, but a quite efficient way for
     |  testing new messages and getting experimental debug output.
     |  
     |  Method resolution order:
     |      MAVLink_named_value_float_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, name, value)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 10]
     |  
     |  crc_extra = 170
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'name', 'value']
     |  
     |  fieldtypes = ['uint32_t', 'char', 'float']
     |  
     |  fieldunits_by_name = {'time_boot_ms': 'ms'}
     |  
     |  format = '<If10s'
     |  
     |  id = 251
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'NAMED_VALUE_FLOAT'
     |  
     |  native_format = bytearray(b'<Ifc')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'value', 'name']
     |  
     |  orders = [0, 2, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_named_value_int_message(MAVLink_message)
     |  Send a key-value pair as integer. The use of this message is
     |  discouraged for normal packets, but a quite efficient way for
     |  testing new messages and getting experimental debug output.
     |  
     |  Method resolution order:
     |      MAVLink_named_value_int_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, name, value)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 10]
     |  
     |  crc_extra = 44
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'name', 'value']
     |  
     |  fieldtypes = ['uint32_t', 'char', 'int32_t']
     |  
     |  fieldunits_by_name = {'time_boot_ms': 'ms'}
     |  
     |  format = '<Ii10s'
     |  
     |  id = 252
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'NAMED_VALUE_INT'
     |  
     |  native_format = bytearray(b'<Iic')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'value', 'name']
     |  
     |  orders = [0, 2, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_nav_controller_output_message(MAVLink_message)
     |  The state of the fixed wing navigation and position
     |  controller.
     |  
     |  Method resolution order:
     |      MAVLink_nav_controller_output_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, nav_roll, nav_pitch, nav_bearing, target_bearing, wp_dist, alt_error, aspd_error, xtrack_error)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 183
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['nav_roll', 'nav_pitch', 'nav_bearing', 'target_bearing'...
     |  
     |  fieldtypes = ['float', 'float', 'int16_t', 'int16_t', 'uint16_t', 'flo...
     |  
     |  fieldunits_by_name = {'alt_error': 'm', 'aspd_error': 'm/s', 'nav_bear...
     |  
     |  format = '<fffffhhH'
     |  
     |  id = 62
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'NAV_CONTROLLER_OUTPUT'
     |  
     |  native_format = bytearray(b'<fffffhhH')
     |  
     |  ordered_fieldnames = ['nav_roll', 'nav_pitch', 'alt_error', 'aspd_erro...
     |  
     |  orders = [0, 1, 5, 6, 7, 2, 3, 4]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_optical_flow_message(MAVLink_message)
     |  Optical flow from a flow sensor (e.g. optical mouse sensor)
     |  
     |  Method resolution order:
     |      MAVLink_optical_flow_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, sensor_id, flow_x, flow_y, flow_comp_m_x, flow_comp_m_y, quality, ground_distance)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 175
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'sensor_id', 'flow_x', 'flow_y', 'flow_comp...
     |  
     |  fieldtypes = ['uint64_t', 'uint8_t', 'int16_t', 'int16_t', 'float', 'f...
     |  
     |  fieldunits_by_name = {'flow_comp_m_x': 'm/s', 'flow_comp_m_y': 'm/s', ...
     |  
     |  format = '<QfffhhBB'
     |  
     |  id = 100
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'OPTICAL_FLOW'
     |  
     |  native_format = bytearray(b'<QfffhhBB')
     |  
     |  ordered_fieldnames = ['time_usec', 'flow_comp_m_x', 'flow_comp_m_y', '...
     |  
     |  orders = [0, 6, 4, 5, 1, 2, 7, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_optical_flow_rad_message(MAVLink_message)
     |  Optical flow from an angular rate flow sensor (e.g. PX4FLOW or
     |  mouse sensor)
     |  
     |  Method resolution order:
     |      MAVLink_optical_flow_rad_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, sensor_id, integration_time_us, integrated_x, integrated_y, integrated_xgyro, integrated_ygyro, integrated_zgyro, temperature, quality, time_delta_distance_us, distance)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 138
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'sensor_id', 'integration_time_us', 'integr...
     |  
     |  fieldtypes = ['uint64_t', 'uint8_t', 'uint32_t', 'float', 'float', 'fl...
     |  
     |  fieldunits_by_name = {'distance': 'm', 'integrated_x': 'rad', 'integra...
     |  
     |  format = '<QIfffffIfhBB'
     |  
     |  id = 106
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'OPTICAL_FLOW_RAD'
     |  
     |  native_format = bytearray(b'<QIfffffIfhBB')
     |  
     |  ordered_fieldnames = ['time_usec', 'integration_time_us', 'integrated_...
     |  
     |  orders = [0, 10, 1, 2, 3, 4, 5, 6, 9, 11, 7, 8]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_param_map_rc_message(MAVLink_message)
     |  Bind a RC channel to a parameter. The parameter should change
     |  according to the RC channel value.
     |  
     |  Method resolution order:
     |      MAVLink_param_map_rc_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, param_id, param_index, parameter_rc_channel_index, param_value0, scale, param_value_min, param_value_max)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 16, 0]
     |  
     |  crc_extra = 78
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'param_id', 'param_...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'char', 'int16_t', 'uint8_t', 'flo...
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<ffffhBB16sB'
     |  
     |  id = 50
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'PARAM_MAP_RC'
     |  
     |  native_format = bytearray(b'<ffffhBBcB')
     |  
     |  ordered_fieldnames = ['param_value0', 'scale', 'param_value_min', 'par...
     |  
     |  orders = [5, 6, 7, 4, 8, 0, 1, 2, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_param_request_list_message(MAVLink_message)
     |  Request all parameters of this component. After this request,
     |  all parameters are emitted. The parameter microservice is
     |  documented at https://mavlink.io/en/services/parameter.html
     |  
     |  Method resolution order:
     |      MAVLink_param_request_list_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 159
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BB'
     |  
     |  id = 21
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'PARAM_REQUEST_LIST'
     |  
     |  native_format = bytearray(b'<BB')
     |  
     |  ordered_fieldnames = ['target_system', 'target_component']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_param_request_read_message(MAVLink_message)
     |  Request to read the onboard parameter with the param_id string
     |  id. Onboard parameters are stored as key[const char*] ->
     |  value[float]. This allows to send a parameter to any other
     |  component (such as the GCS) without the need of previous
     |  knowledge of possible parameter names. Thus the same GCS can
     |  store different parameters for different autopilots. See also
     |  https://mavlink.io/en/services/parameter.html for a full
     |  documentation of QGroundControl and IMU code.
     |  
     |  Method resolution order:
     |      MAVLink_param_request_read_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, param_id, param_index)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 16]
     |  
     |  crc_extra = 214
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'param_id', 'param_...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'char', 'int16_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<hBB16s'
     |  
     |  id = 20
     |  
     |  lengths = [1, 1, 1, 1]
     |  
     |  name = 'PARAM_REQUEST_READ'
     |  
     |  native_format = bytearray(b'<hBBc')
     |  
     |  ordered_fieldnames = ['param_index', 'target_system', 'target_componen...
     |  
     |  orders = [1, 2, 3, 0]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_param_set_message(MAVLink_message)
     |  Set a parameter value (write new value to permanent storage).
     |  IMPORTANT: The receiving component should acknowledge the new
     |  parameter value by sending a PARAM_VALUE message to all
     |  communication partners. This will also ensure that multiple
     |  GCS all have an up-to-date list of all parameters. If the
     |  sending GCS did not receive a PARAM_VALUE message within its
     |  timeout time, it should re-send the PARAM_SET message. The
     |  parameter microservice is documented at
     |  https://mavlink.io/en/services/parameter.html
     |  
     |  Method resolution order:
     |      MAVLink_param_set_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, param_id, param_value, param_type)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 16, 0]
     |  
     |  crc_extra = 168
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'param_type': 'MAV_PARAM_TYPE'}
     |  
     |  fieldnames = ['target_system', 'target_component', 'param_id', 'param_...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'char', 'float', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<fBB16sB'
     |  
     |  id = 23
     |  
     |  lengths = [1, 1, 1, 1, 1]
     |  
     |  name = 'PARAM_SET'
     |  
     |  native_format = bytearray(b'<fBBcB')
     |  
     |  ordered_fieldnames = ['param_value', 'target_system', 'target_componen...
     |  
     |  orders = [1, 2, 3, 0, 4]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_param_value_message(MAVLink_message)
     |  Emit the value of a onboard parameter. The inclusion of
     |  param_count and param_index in the message allows the
     |  recipient to keep track of received parameters and allows him
     |  to re-request missing parameters after a loss or timeout. The
     |  parameter microservice is documented at
     |  https://mavlink.io/en/services/parameter.html
     |  
     |  Method resolution order:
     |      MAVLink_param_value_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, param_id, param_value, param_type, param_count, param_index)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 16, 0]
     |  
     |  crc_extra = 220
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'param_type': 'MAV_PARAM_TYPE'}
     |  
     |  fieldnames = ['param_id', 'param_value', 'param_type', 'param_count', ...
     |  
     |  fieldtypes = ['char', 'float', 'uint8_t', 'uint16_t', 'uint16_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<fHH16sB'
     |  
     |  id = 22
     |  
     |  lengths = [1, 1, 1, 1, 1]
     |  
     |  name = 'PARAM_VALUE'
     |  
     |  native_format = bytearray(b'<fHHcB')
     |  
     |  ordered_fieldnames = ['param_value', 'param_count', 'param_index', 'pa...
     |  
     |  orders = [3, 0, 4, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_pid_tuning_message(MAVLink_message)
     |  PID tuning information.
     |  
     |  Method resolution order:
     |      MAVLink_pid_tuning_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, axis, desired, achieved, FF, P, I, D)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 98
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'axis': 'PID_TUNING_AXIS'}
     |  
     |  fieldnames = ['axis', 'desired', 'achieved', 'FF', 'P', 'I', 'D']
     |  
     |  fieldtypes = ['uint8_t', 'float', 'float', 'float', 'float', 'float', ...
     |  
     |  fieldunits_by_name = {'achieved': 'deg/s', 'desired': 'deg/s'}
     |  
     |  format = '<ffffffB'
     |  
     |  id = 194
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'PID_TUNING'
     |  
     |  native_format = bytearray(b'<ffffffB')
     |  
     |  ordered_fieldnames = ['desired', 'achieved', 'FF', 'P', 'I', 'D', 'axi...
     |  
     |  orders = [6, 0, 1, 2, 3, 4, 5]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_ping_message(MAVLink_message)
     |  A ping message either requesting or responding to a ping. This
     |  allows to measure the system latencies, including serial port,
     |  radio modem and UDP connections. The ping microservice is
     |  documented at https://mavlink.io/en/services/ping.html
     |  
     |  Method resolution order:
     |      MAVLink_ping_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, seq, target_system, target_component)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0]
     |  
     |  crc_extra = 237
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'seq', 'target_system', 'target_component']
     |  
     |  fieldtypes = ['uint64_t', 'uint32_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {'time_usec': 'us'}
     |  
     |  format = '<QIBB'
     |  
     |  id = 4
     |  
     |  lengths = [1, 1, 1, 1]
     |  
     |  name = 'PING'
     |  
     |  native_format = bytearray(b'<QIBB')
     |  
     |  ordered_fieldnames = ['time_usec', 'seq', 'target_system', 'target_com...
     |  
     |  orders = [0, 1, 2, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_position_target_global_int_message(MAVLink_message)
     |  Reports the current commanded vehicle position, velocity, and
     |  acceleration as specified by the autopilot. This should match
     |  the commands sent in SET_POSITION_TARGET_GLOBAL_INT if the
     |  vehicle is being controlled this way.
     |  
     |  Method resolution order:
     |      MAVLink_position_target_global_int_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, coordinate_frame, type_mask, lat_int, lon_int, alt, vx, vy, vz, afx, afy, afz, yaw, yaw_rate)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 150
     |  
     |  fielddisplays_by_name = {'type_mask': 'bitmask'}
     |  
     |  fieldenums_by_name = {'coordinate_frame': 'MAV_FRAME', 'type_mask': 'P...
     |  
     |  fieldnames = ['time_boot_ms', 'coordinate_frame', 'type_mask', 'lat_in...
     |  
     |  fieldtypes = ['uint32_t', 'uint8_t', 'uint16_t', 'int32_t', 'int32_t',...
     |  
     |  fieldunits_by_name = {'afx': 'm/s/s', 'afy': 'm/s/s', 'afz': 'm/s/s', ...
     |  
     |  format = '<IiifffffffffHB'
     |  
     |  id = 87
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'POSITION_TARGET_GLOBAL_INT'
     |  
     |  native_format = bytearray(b'<IiifffffffffHB')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'lat_int', 'lon_int', 'alt', 'vx...
     |  
     |  orders = [0, 13, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_position_target_local_ned_message(MAVLink_message)
     |  Reports the current commanded vehicle position, velocity, and
     |  acceleration as specified by the autopilot. This should match
     |  the commands sent in SET_POSITION_TARGET_LOCAL_NED if the
     |  vehicle is being controlled this way.
     |  
     |  Method resolution order:
     |      MAVLink_position_target_local_ned_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, coordinate_frame, type_mask, x, y, z, vx, vy, vz, afx, afy, afz, yaw, yaw_rate)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 140
     |  
     |  fielddisplays_by_name = {'type_mask': 'bitmask'}
     |  
     |  fieldenums_by_name = {'coordinate_frame': 'MAV_FRAME', 'type_mask': 'P...
     |  
     |  fieldnames = ['time_boot_ms', 'coordinate_frame', 'type_mask', 'x', 'y...
     |  
     |  fieldtypes = ['uint32_t', 'uint8_t', 'uint16_t', 'float', 'float', 'fl...
     |  
     |  fieldunits_by_name = {'afx': 'm/s/s', 'afy': 'm/s/s', 'afz': 'm/s/s', ...
     |  
     |  format = '<IfffffffffffHB'
     |  
     |  id = 85
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'POSITION_TARGET_LOCAL_NED'
     |  
     |  native_format = bytearray(b'<IfffffffffffHB')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'x', 'y', 'z', 'vx', 'vy', 'vz',...
     |  
     |  orders = [0, 13, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_power_status_message(MAVLink_message)
     |  Power supply status
     |  
     |  Method resolution order:
     |      MAVLink_power_status_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, Vcc, Vservo, flags)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0]
     |  
     |  crc_extra = 203
     |  
     |  fielddisplays_by_name = {'flags': 'bitmask'}
     |  
     |  fieldenums_by_name = {'flags': 'MAV_POWER_STATUS'}
     |  
     |  fieldnames = ['Vcc', 'Vservo', 'flags']
     |  
     |  fieldtypes = ['uint16_t', 'uint16_t', 'uint16_t']
     |  
     |  fieldunits_by_name = {'Vcc': 'mV', 'Vservo': 'mV'}
     |  
     |  format = '<HHH'
     |  
     |  id = 125
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'POWER_STATUS'
     |  
     |  native_format = bytearray(b'<HHH')
     |  
     |  ordered_fieldnames = ['Vcc', 'Vservo', 'flags']
     |  
     |  orders = [0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_radio_message(MAVLink_message)
     |  Status generated by radio.
     |  
     |  Method resolution order:
     |      MAVLink_radio_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, rssi, remrssi, txbuf, noise, remnoise, rxerrors, fixed)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 21
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['rssi', 'remrssi', 'txbuf', 'noise', 'remnoise', 'rxerro...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', '...
     |  
     |  fieldunits_by_name = {'txbuf': '%'}
     |  
     |  format = '<HHBBBBB'
     |  
     |  id = 166
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'RADIO'
     |  
     |  native_format = bytearray(b'<HHBBBBB')
     |  
     |  ordered_fieldnames = ['rxerrors', 'fixed', 'rssi', 'remrssi', 'txbuf',...
     |  
     |  orders = [2, 3, 4, 5, 6, 0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_radio_status_message(MAVLink_message)
     |  Status generated by radio and injected into MAVLink stream.
     |  
     |  Method resolution order:
     |      MAVLink_radio_status_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, rssi, remrssi, txbuf, noise, remnoise, rxerrors, fixed)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 185
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['rssi', 'remrssi', 'txbuf', 'noise', 'remnoise', 'rxerro...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', '...
     |  
     |  fieldunits_by_name = {'txbuf': '%'}
     |  
     |  format = '<HHBBBBB'
     |  
     |  id = 109
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'RADIO_STATUS'
     |  
     |  native_format = bytearray(b'<HHBBBBB')
     |  
     |  ordered_fieldnames = ['rxerrors', 'fixed', 'rssi', 'remrssi', 'txbuf',...
     |  
     |  orders = [2, 3, 4, 5, 6, 0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_rally_fetch_point_message(MAVLink_message)
     |  Request a current rally point from MAV. MAV should respond
     |  with a RALLY_POINT message. MAV should not respond if the
     |  request is invalid.
     |  
     |  Method resolution order:
     |      MAVLink_rally_fetch_point_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, idx)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0]
     |  
     |  crc_extra = 234
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'idx']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BBB'
     |  
     |  id = 176
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'RALLY_FETCH_POINT'
     |  
     |  native_format = bytearray(b'<BBB')
     |  
     |  ordered_fieldnames = ['target_system', 'target_component', 'idx']
     |  
     |  orders = [0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_rally_point_message(MAVLink_message)
     |  A rally point. Used to set a point when from GCS -> MAV. Also
     |  used to return a point from MAV -> GCS.
     |  
     |  Method resolution order:
     |      MAVLink_rally_point_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, idx, count, lat, lng, alt, break_alt, land_dir, flags)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 138
     |  
     |  fielddisplays_by_name = {'flags': 'bitmask'}
     |  
     |  fieldenums_by_name = {'flags': 'RALLY_FLAGS'}
     |  
     |  fieldnames = ['target_system', 'target_component', 'idx', 'count', 'la...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'int32_t', '...
     |  
     |  fieldunits_by_name = {'alt': 'm', 'break_alt': 'm', 'land_dir': 'cdeg'...
     |  
     |  format = '<iihhHBBBBB'
     |  
     |  id = 175
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'RALLY_POINT'
     |  
     |  native_format = bytearray(b'<iihhHBBBBB')
     |  
     |  ordered_fieldnames = ['lat', 'lng', 'alt', 'break_alt', 'land_dir', 't...
     |  
     |  orders = [5, 6, 7, 8, 0, 1, 2, 3, 4, 9]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_rangefinder_message(MAVLink_message)
     |  Rangefinder reporting.
     |  
     |  Method resolution order:
     |      MAVLink_rangefinder_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, distance, voltage)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 83
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['distance', 'voltage']
     |  
     |  fieldtypes = ['float', 'float']
     |  
     |  fieldunits_by_name = {'distance': 'm', 'voltage': 'V'}
     |  
     |  format = '<ff'
     |  
     |  id = 173
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'RANGEFINDER'
     |  
     |  native_format = bytearray(b'<ff')
     |  
     |  ordered_fieldnames = ['distance', 'voltage']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_raw_imu_message(MAVLink_message)
     |  The RAW IMU readings for a 9DOF sensor, which is identified by
     |  the id (default IMU1). This message should always contain the
     |  true raw values without any scaling to allow data capture and
     |  system debugging.
     |  
     |  Method resolution order:
     |      MAVLink_raw_imu_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 144
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', '...
     |  
     |  fieldtypes = ['uint64_t', 'int16_t', 'int16_t', 'int16_t', 'int16_t', ...
     |  
     |  fieldunits_by_name = {'time_usec': 'us'}
     |  
     |  format = '<Qhhhhhhhhh'
     |  
     |  id = 27
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'RAW_IMU'
     |  
     |  native_format = bytearray(b'<Qhhhhhhhhh')
     |  
     |  ordered_fieldnames = ['time_usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'y...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_raw_pressure_message(MAVLink_message)
     |  The RAW pressure readings for the typical setup of one
     |  absolute pressure and one differential pressure sensor. The
     |  sensor values should be the raw, UNSCALED ADC values.
     |  
     |  Method resolution order:
     |      MAVLink_raw_pressure_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, press_abs, press_diff1, press_diff2, temperature)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0]
     |  
     |  crc_extra = 67
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'press_abs', 'press_diff1', 'press_diff2', ...
     |  
     |  fieldtypes = ['uint64_t', 'int16_t', 'int16_t', 'int16_t', 'int16_t']
     |  
     |  fieldunits_by_name = {'time_usec': 'us'}
     |  
     |  format = '<Qhhhh'
     |  
     |  id = 28
     |  
     |  lengths = [1, 1, 1, 1, 1]
     |  
     |  name = 'RAW_PRESSURE'
     |  
     |  native_format = bytearray(b'<Qhhhh')
     |  
     |  ordered_fieldnames = ['time_usec', 'press_abs', 'press_diff1', 'press_...
     |  
     |  orders = [0, 1, 2, 3, 4]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_rc_channels_message(MAVLink_message)
     |  The PPM values of the RC channels received. The standard PPM
     |  modulation is as follows: 1000 microseconds: 0%, 2000
     |  microseconds: 100%.  A value of UINT16_MAX implies the channel
     |  is unused. Individual receivers/transmitters might violate
     |  this specification.
     |  
     |  Method resolution order:
     |      MAVLink_rc_channels_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, chancount, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, chan9_raw, chan10_raw, chan11_raw, chan12_raw, chan13_raw, chan14_raw, chan15_raw, chan16_raw, chan17_raw, chan18_raw, rssi)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...
     |  
     |  crc_extra = 118
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'chancount', 'chan1_raw', 'chan2_raw', '...
     |  
     |  fieldtypes = ['uint32_t', 'uint8_t', 'uint16_t', 'uint16_t', 'uint16_t...
     |  
     |  fieldunits_by_name = {'chan10_raw': 'us', 'chan11_raw': 'us', 'chan12_...
     |  
     |  format = '<IHHHHHHHHHHHHHHHHHHBB'
     |  
     |  id = 65
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,...
     |  
     |  name = 'RC_CHANNELS'
     |  
     |  native_format = bytearray(b'<IHHHHHHHHHHHHHHHHHHBB')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'chan1_raw', 'chan2_raw', 'chan3...
     |  
     |  orders = [0, 19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16...
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_rc_channels_override_message(MAVLink_message)
     |  The RAW values of the RC channels sent to the MAV to override
     |  info received from the RC radio. A value of UINT16_MAX means
     |  no change to that channel. A value of 0 means control of that
     |  channel should be released back to the RC radio. The standard
     |  PPM modulation is as follows: 1000 microseconds: 0%, 2000
     |  microseconds: 100%. Individual receivers/transmitters might
     |  violate this specification.
     |  
     |  Method resolution order:
     |      MAVLink_rc_channels_override_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 124
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'chan1_raw', 'chan2...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint16_t', 'uint16_t', 'uint16_t'...
     |  
     |  fieldunits_by_name = {'chan1_raw': 'us', 'chan2_raw': 'us', 'chan3_raw...
     |  
     |  format = '<HHHHHHHHBB'
     |  
     |  id = 70
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'RC_CHANNELS_OVERRIDE'
     |  
     |  native_format = bytearray(b'<HHHHHHHHBB')
     |  
     |  ordered_fieldnames = ['chan1_raw', 'chan2_raw', 'chan3_raw', 'chan4_ra...
     |  
     |  orders = [8, 9, 0, 1, 2, 3, 4, 5, 6, 7]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_rc_channels_raw_message(MAVLink_message)
     |  The RAW values of the RC channels received. The standard PPM
     |  modulation is as follows: 1000 microseconds: 0%, 2000
     |  microseconds: 100%. A value of UINT16_MAX implies the channel
     |  is unused. Individual receivers/transmitters might violate
     |  this specification.
     |  
     |  Method resolution order:
     |      MAVLink_rc_channels_raw_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, port, chan1_raw, chan2_raw, chan3_raw, chan4_raw, chan5_raw, chan6_raw, chan7_raw, chan8_raw, rssi)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 244
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'port', 'chan1_raw', 'chan2_raw', 'chan3...
     |  
     |  fieldtypes = ['uint32_t', 'uint8_t', 'uint16_t', 'uint16_t', 'uint16_t...
     |  
     |  fieldunits_by_name = {'chan1_raw': 'us', 'chan2_raw': 'us', 'chan3_raw...
     |  
     |  format = '<IHHHHHHHHBB'
     |  
     |  id = 35
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'RC_CHANNELS_RAW'
     |  
     |  native_format = bytearray(b'<IHHHHHHHHBB')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'chan1_raw', 'chan2_raw', 'chan3...
     |  
     |  orders = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_rc_channels_scaled_message(MAVLink_message)
     |  The scaled values of the RC channels received: (-100%) -10000,
     |  (0%) 0, (100%) 10000. Channels that are inactive should be set
     |  to UINT16_MAX.
     |  
     |  Method resolution order:
     |      MAVLink_rc_channels_scaled_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, port, chan1_scaled, chan2_scaled, chan3_scaled, chan4_scaled, chan5_scaled, chan6_scaled, chan7_scaled, chan8_scaled, rssi)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 237
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'port', 'chan1_scaled', 'chan2_scaled', ...
     |  
     |  fieldtypes = ['uint32_t', 'uint8_t', 'int16_t', 'int16_t', 'int16_t', ...
     |  
     |  fieldunits_by_name = {'time_boot_ms': 'ms'}
     |  
     |  format = '<IhhhhhhhhBB'
     |  
     |  id = 34
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'RC_CHANNELS_SCALED'
     |  
     |  native_format = bytearray(b'<IhhhhhhhhBB')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'chan1_scaled', 'chan2_scaled', ...
     |  
     |  orders = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_remote_log_block_status_message(MAVLink_message)
     |  Send Status of each log block that autopilot board might have
     |  sent.
     |  
     |  Method resolution order:
     |      MAVLink_remote_log_block_status_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, seqno, status)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0]
     |  
     |  crc_extra = 186
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'status': 'MAV_REMOTE_LOG_DATA_BLOCK_STATUSES'}
     |  
     |  fieldnames = ['target_system', 'target_component', 'seqno', 'status']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint32_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<IBBB'
     |  
     |  id = 185
     |  
     |  lengths = [1, 1, 1, 1]
     |  
     |  name = 'REMOTE_LOG_BLOCK_STATUS'
     |  
     |  native_format = bytearray(b'<IBBB')
     |  
     |  ordered_fieldnames = ['seqno', 'target_system', 'target_component', 's...
     |  
     |  orders = [1, 2, 0, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_remote_log_data_block_message(MAVLink_message)
     |  Send a block of log data to remote location.
     |  
     |  Method resolution order:
     |      MAVLink_remote_log_data_block_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, seqno, data)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 200]
     |  
     |  crc_extra = 159
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'seqno': 'MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS'}
     |  
     |  fieldnames = ['target_system', 'target_component', 'seqno', 'data']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint32_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<IBB200B'
     |  
     |  id = 184
     |  
     |  lengths = [1, 1, 1, 200]
     |  
     |  name = 'REMOTE_LOG_DATA_BLOCK'
     |  
     |  native_format = bytearray(b'<IBBB')
     |  
     |  ordered_fieldnames = ['seqno', 'target_system', 'target_component', 'd...
     |  
     |  orders = [1, 2, 0, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_request_data_stream_message(MAVLink_message)
     |  Request a data stream.
     |  
     |  Method resolution order:
     |      MAVLink_request_data_stream_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, req_stream_id, req_message_rate, start_stop)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0]
     |  
     |  crc_extra = 148
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'req_stream_id', 'r...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint16_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {'req_message_rate': 'Hz'}
     |  
     |  format = '<HBBBB'
     |  
     |  id = 66
     |  
     |  lengths = [1, 1, 1, 1, 1]
     |  
     |  name = 'REQUEST_DATA_STREAM'
     |  
     |  native_format = bytearray(b'<HBBBB')
     |  
     |  ordered_fieldnames = ['req_message_rate', 'target_system', 'target_com...
     |  
     |  orders = [1, 2, 3, 0, 4]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_resource_request_message(MAVLink_message)
     |  The autopilot is requesting a resource (file, binary, other
     |  type of data)
     |  
     |  Method resolution order:
     |      MAVLink_resource_request_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, request_id, uri_type, uri, transfer_type, storage)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 120, 0, 120]
     |  
     |  crc_extra = 72
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['request_id', 'uri_type', 'uri', 'transfer_type', 'stora...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<BB120BB120B'
     |  
     |  id = 142
     |  
     |  lengths = [1, 1, 120, 1, 120]
     |  
     |  name = 'RESOURCE_REQUEST'
     |  
     |  native_format = bytearray(b'<BBBBB')
     |  
     |  ordered_fieldnames = ['request_id', 'uri_type', 'uri', 'transfer_type'...
     |  
     |  orders = [0, 1, 2, 3, 4]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_rpm_message(MAVLink_message)
     |  RPM sensor output.
     |  
     |  Method resolution order:
     |      MAVLink_rpm_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, rpm1, rpm2)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 207
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['rpm1', 'rpm2']
     |  
     |  fieldtypes = ['float', 'float']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<ff'
     |  
     |  id = 226
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'RPM'
     |  
     |  native_format = bytearray(b'<ff')
     |  
     |  ordered_fieldnames = ['rpm1', 'rpm2']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_safety_allowed_area_message(MAVLink_message)
     |  Read out the safety zone the MAV currently assumes.
     |  
     |  Method resolution order:
     |      MAVLink_safety_allowed_area_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, frame, p1x, p1y, p1z, p2x, p2y, p2z)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 3
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'frame': 'MAV_FRAME'}
     |  
     |  fieldnames = ['frame', 'p1x', 'p1y', 'p1z', 'p2x', 'p2y', 'p2z']
     |  
     |  fieldtypes = ['uint8_t', 'float', 'float', 'float', 'float', 'float', ...
     |  
     |  fieldunits_by_name = {'p1x': 'm', 'p1y': 'm', 'p1z': 'm', 'p2x': 'm', ...
     |  
     |  format = '<ffffffB'
     |  
     |  id = 55
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'SAFETY_ALLOWED_AREA'
     |  
     |  native_format = bytearray(b'<ffffffB')
     |  
     |  ordered_fieldnames = ['p1x', 'p1y', 'p1z', 'p2x', 'p2y', 'p2z', 'frame...
     |  
     |  orders = [6, 0, 1, 2, 3, 4, 5]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_safety_set_allowed_area_message(MAVLink_message)
     |  Set a safety zone (volume), which is defined by two corners of
     |  a cube. This message can be used to tell the MAV which
     |  setpoints/waypoints to accept and which to reject. Safety
     |  areas are often enforced by national or competition
     |  regulations.
     |  
     |  Method resolution order:
     |      MAVLink_safety_set_allowed_area_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, frame, p1x, p1y, p1z, p2x, p2y, p2z)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 15
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'frame': 'MAV_FRAME'}
     |  
     |  fieldnames = ['target_system', 'target_component', 'frame', 'p1x', 'p1...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'float', 'float', 'floa...
     |  
     |  fieldunits_by_name = {'p1x': 'm', 'p1y': 'm', 'p1z': 'm', 'p2x': 'm', ...
     |  
     |  format = '<ffffffBBB'
     |  
     |  id = 54
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'SAFETY_SET_ALLOWED_AREA'
     |  
     |  native_format = bytearray(b'<ffffffBBB')
     |  
     |  ordered_fieldnames = ['p1x', 'p1y', 'p1z', 'p2x', 'p2y', 'p2z', 'targe...
     |  
     |  orders = [6, 7, 8, 0, 1, 2, 3, 4, 5]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_scaled_imu2_message(MAVLink_message)
     |  The RAW IMU readings for secondary 9DOF sensor setup. This
     |  message should contain the scaled values to the described
     |  units
     |  
     |  Method resolution order:
     |      MAVLink_scaled_imu2_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 76
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro'...
     |  
     |  fieldtypes = ['uint32_t', 'int16_t', 'int16_t', 'int16_t', 'int16_t', ...
     |  
     |  fieldunits_by_name = {'time_boot_ms': 'ms', 'xacc': 'mG', 'xgyro': 'mr...
     |  
     |  format = '<Ihhhhhhhhh'
     |  
     |  id = 116
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'SCALED_IMU2'
     |  
     |  native_format = bytearray(b'<Ihhhhhhhhh')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'xacc', 'yacc', 'zacc', 'xgyro',...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_scaled_imu3_message(MAVLink_message)
     |  The RAW IMU readings for 3rd 9DOF sensor setup. This message
     |  should contain the scaled values to the described units
     |  
     |  Method resolution order:
     |      MAVLink_scaled_imu3_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 46
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro'...
     |  
     |  fieldtypes = ['uint32_t', 'int16_t', 'int16_t', 'int16_t', 'int16_t', ...
     |  
     |  fieldunits_by_name = {'time_boot_ms': 'ms', 'xacc': 'mG', 'xgyro': 'mr...
     |  
     |  format = '<Ihhhhhhhhh'
     |  
     |  id = 129
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'SCALED_IMU3'
     |  
     |  native_format = bytearray(b'<Ihhhhhhhhh')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'xacc', 'yacc', 'zacc', 'xgyro',...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_scaled_imu_message(MAVLink_message)
     |  The RAW IMU readings for the usual 9DOF sensor setup. This
     |  message should contain the scaled values to the described
     |  units
     |  
     |  Method resolution order:
     |      MAVLink_scaled_imu_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, xacc, yacc, zacc, xgyro, ygyro, zgyro, xmag, ymag, zmag)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 170
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro'...
     |  
     |  fieldtypes = ['uint32_t', 'int16_t', 'int16_t', 'int16_t', 'int16_t', ...
     |  
     |  fieldunits_by_name = {'time_boot_ms': 'ms', 'xacc': 'mG', 'xgyro': 'mr...
     |  
     |  format = '<Ihhhhhhhhh'
     |  
     |  id = 26
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'SCALED_IMU'
     |  
     |  native_format = bytearray(b'<Ihhhhhhhhh')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'xacc', 'yacc', 'zacc', 'xgyro',...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_scaled_pressure2_message(MAVLink_message)
     |  Barometer readings for 2nd barometer
     |  
     |  Method resolution order:
     |      MAVLink_scaled_pressure2_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, press_abs, press_diff, temperature)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0]
     |  
     |  crc_extra = 195
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'press_abs', 'press_diff', 'temperature'...
     |  
     |  fieldtypes = ['uint32_t', 'float', 'float', 'int16_t']
     |  
     |  fieldunits_by_name = {'press_abs': 'hPa', 'press_diff': 'hPa', 'temper...
     |  
     |  format = '<Iffh'
     |  
     |  id = 137
     |  
     |  lengths = [1, 1, 1, 1]
     |  
     |  name = 'SCALED_PRESSURE2'
     |  
     |  native_format = bytearray(b'<Iffh')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'press_abs', 'press_diff', 'temp...
     |  
     |  orders = [0, 1, 2, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_scaled_pressure3_message(MAVLink_message)
     |  Barometer readings for 3rd barometer
     |  
     |  Method resolution order:
     |      MAVLink_scaled_pressure3_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, press_abs, press_diff, temperature)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0]
     |  
     |  crc_extra = 131
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'press_abs', 'press_diff', 'temperature'...
     |  
     |  fieldtypes = ['uint32_t', 'float', 'float', 'int16_t']
     |  
     |  fieldunits_by_name = {'press_abs': 'hPa', 'press_diff': 'hPa', 'temper...
     |  
     |  format = '<Iffh'
     |  
     |  id = 143
     |  
     |  lengths = [1, 1, 1, 1]
     |  
     |  name = 'SCALED_PRESSURE3'
     |  
     |  native_format = bytearray(b'<Iffh')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'press_abs', 'press_diff', 'temp...
     |  
     |  orders = [0, 1, 2, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_scaled_pressure_message(MAVLink_message)
     |  The pressure readings for the typical setup of one absolute
     |  and differential pressure sensor. The units are as specified
     |  in each field.
     |  
     |  Method resolution order:
     |      MAVLink_scaled_pressure_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, press_abs, press_diff, temperature)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0]
     |  
     |  crc_extra = 115
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'press_abs', 'press_diff', 'temperature'...
     |  
     |  fieldtypes = ['uint32_t', 'float', 'float', 'int16_t']
     |  
     |  fieldunits_by_name = {'press_abs': 'hPa', 'press_diff': 'hPa', 'temper...
     |  
     |  format = '<Iffh'
     |  
     |  id = 29
     |  
     |  lengths = [1, 1, 1, 1]
     |  
     |  name = 'SCALED_PRESSURE'
     |  
     |  native_format = bytearray(b'<Iffh')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'press_abs', 'press_diff', 'temp...
     |  
     |  orders = [0, 1, 2, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_sensor_offsets_message(MAVLink_message)
     |  Offsets and calibrations values for hardware sensors. This
     |  makes it easier to debug the calibration process.
     |  
     |  Method resolution order:
     |      MAVLink_sensor_offsets_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, mag_ofs_x, mag_ofs_y, mag_ofs_z, mag_declination, raw_press, raw_temp, gyro_cal_x, gyro_cal_y, gyro_cal_z, accel_cal_x, accel_cal_y, accel_cal_z)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 134
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['mag_ofs_x', 'mag_ofs_y', 'mag_ofs_z', 'mag_declination'...
     |  
     |  fieldtypes = ['int16_t', 'int16_t', 'int16_t', 'float', 'int32_t', 'in...
     |  
     |  fieldunits_by_name = {'mag_declination': 'rad'}
     |  
     |  format = '<fiiffffffhhh'
     |  
     |  id = 150
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'SENSOR_OFFSETS'
     |  
     |  native_format = bytearray(b'<fiiffffffhhh')
     |  
     |  ordered_fieldnames = ['mag_declination', 'raw_press', 'raw_temp', 'gyr...
     |  
     |  orders = [9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_serial_control_message(MAVLink_message)
     |  Control a serial port. This can be used for raw access to an
     |  onboard serial peripheral such as a GPS or telemetry radio. It
     |  is designed to make it possible to update the devices firmware
     |  via MAVLink messages or change the devices settings. A message
     |  with zero bytes can be used to change just the baudrate.
     |  
     |  Method resolution order:
     |      MAVLink_serial_control_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, device, flags, timeout, baudrate, count, data)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 70]
     |  
     |  crc_extra = 220
     |  
     |  fielddisplays_by_name = {'flags': 'bitmask'}
     |  
     |  fieldenums_by_name = {'device': 'SERIAL_CONTROL_DEV', 'flags': 'SERIAL...
     |  
     |  fieldnames = ['device', 'flags', 'timeout', 'baudrate', 'count', 'data...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint16_t', 'uint32_t', 'uint8_t',...
     |  
     |  fieldunits_by_name = {'baudrate': 'bits/s', 'count': 'bytes', 'timeout...
     |  
     |  format = '<IHBBB70B'
     |  
     |  id = 126
     |  
     |  lengths = [1, 1, 1, 1, 1, 70]
     |  
     |  name = 'SERIAL_CONTROL'
     |  
     |  native_format = bytearray(b'<IHBBBB')
     |  
     |  ordered_fieldnames = ['baudrate', 'timeout', 'device', 'flags', 'count...
     |  
     |  orders = [2, 3, 1, 0, 4, 5]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_servo_output_raw_message(MAVLink_message)
     |  Superseded by ACTUATOR_OUTPUT_STATUS. The RAW values of the
     |  servo outputs (for RC input from the remote, use the
     |  RC_CHANNELS messages). The standard PPM modulation is as
     |  follows: 1000 microseconds: 0%, 2000 microseconds: 100%.
     |  
     |  Method resolution order:
     |      MAVLink_servo_output_raw_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, port, servo1_raw, servo2_raw, servo3_raw, servo4_raw, servo5_raw, servo6_raw, servo7_raw, servo8_raw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 222
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'port', 'servo1_raw', 'servo2_raw', 'servo3...
     |  
     |  fieldtypes = ['uint32_t', 'uint8_t', 'uint16_t', 'uint16_t', 'uint16_t...
     |  
     |  fieldunits_by_name = {'servo1_raw': 'us', 'servo2_raw': 'us', 'servo3_...
     |  
     |  format = '<IHHHHHHHHB'
     |  
     |  id = 36
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'SERVO_OUTPUT_RAW'
     |  
     |  native_format = bytearray(b'<IHHHHHHHHB')
     |  
     |  ordered_fieldnames = ['time_usec', 'servo1_raw', 'servo2_raw', 'servo3...
     |  
     |  orders = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_set_actuator_control_target_message(MAVLink_message)
     |  Set the vehicle attitude and body angular rates.
     |  
     |  Method resolution order:
     |      MAVLink_set_actuator_control_target_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, group_mlx, target_system, target_component, controls)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 8, 0, 0, 0]
     |  
     |  crc_extra = 168
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'group_mlx', 'target_system', 'target_compo...
     |  
     |  fieldtypes = ['uint64_t', 'uint8_t', 'uint8_t', 'uint8_t', 'float']
     |  
     |  fieldunits_by_name = {'time_usec': 'us'}
     |  
     |  format = '<Q8fBBB'
     |  
     |  id = 139
     |  
     |  lengths = [1, 8, 1, 1, 1]
     |  
     |  name = 'SET_ACTUATOR_CONTROL_TARGET'
     |  
     |  native_format = bytearray(b'<QfBBB')
     |  
     |  ordered_fieldnames = ['time_usec', 'controls', 'group_mlx', 'target_sy...
     |  
     |  orders = [0, 2, 3, 4, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_set_attitude_target_message(MAVLink_message)
     |  Sets a desired vehicle attitude. Used by an external
     |  controller to command the vehicle (manual controller or other
     |  system).
     |  
     |  Method resolution order:
     |      MAVLink_set_attitude_target_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, target_system, target_component, type_mask, q, body_roll_rate, body_pitch_rate, body_yaw_rate, thrust)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 4, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 49
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_boot_ms', 'target_system', 'target_component', 'ty...
     |  
     |  fieldtypes = ['uint32_t', 'uint8_t', 'uint8_t', 'uint8_t', 'float', 'f...
     |  
     |  fieldunits_by_name = {'body_pitch_rate': 'rad/s', 'body_roll_rate': 'r...
     |  
     |  format = '<I4fffffBBB'
     |  
     |  id = 82
     |  
     |  lengths = [1, 4, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'SET_ATTITUDE_TARGET'
     |  
     |  native_format = bytearray(b'<IfffffBBB')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'q', 'body_roll_rate', 'body_pit...
     |  
     |  orders = [0, 6, 7, 8, 1, 2, 3, 4, 5]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_set_gps_global_origin_message(MAVLink_message)
     |  Sets the GPS co-ordinates of the vehicle local origin (0,0,0)
     |  position. Vehicle should emit GPS_GLOBAL_ORIGIN irrespective
     |  of whether the origin is changed. This enables transform
     |  between the local coordinate frame and the global (GPS)
     |  coordinate frame, which may be necessary when (for example)
     |  indoor and outdoor settings are connected and the MAV should
     |  move from in- to outdoor.
     |  
     |  Method resolution order:
     |      MAVLink_set_gps_global_origin_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, latitude, longitude, altitude)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0]
     |  
     |  crc_extra = 41
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'latitude', 'longitude', 'altitude']
     |  
     |  fieldtypes = ['uint8_t', 'int32_t', 'int32_t', 'int32_t']
     |  
     |  fieldunits_by_name = {'altitude': 'mm', 'latitude': 'degE7', 'longitud...
     |  
     |  format = '<iiiB'
     |  
     |  id = 48
     |  
     |  lengths = [1, 1, 1, 1]
     |  
     |  name = 'SET_GPS_GLOBAL_ORIGIN'
     |  
     |  native_format = bytearray(b'<iiiB')
     |  
     |  ordered_fieldnames = ['latitude', 'longitude', 'altitude', 'target_sys...
     |  
     |  orders = [3, 0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_set_home_position_message(MAVLink_message)
     |  The position the system will return to and land on. The
     |  position is set automatically by the system during the takeoff
     |  in case it was not explicitly set by the operator before or
     |  after. The global and local positions encode the position in
     |  the respective coordinate frames, while the q parameter
     |  encodes the orientation of the surface. Under normal
     |  conditions it describes the heading and terrain slope, which
     |  can be used by the aircraft to adjust the approach. The
     |  approach 3D vector describes the point to which the system
     |  should fly in normal flight mode and then perform a landing
     |  sequence along the vector.
     |  
     |  Method resolution order:
     |      MAVLink_set_home_position_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, latitude, longitude, altitude, x, y, z, q, approach_x, approach_y, approach_z)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0]
     |  
     |  crc_extra = 85
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'latitude', 'longitude', 'altitude', 'x...
     |  
     |  fieldtypes = ['uint8_t', 'int32_t', 'int32_t', 'int32_t', 'float', 'fl...
     |  
     |  fieldunits_by_name = {'altitude': 'mm', 'approach_x': 'm', 'approach_y...
     |  
     |  format = '<iiifff4ffffB'
     |  
     |  id = 243
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1]
     |  
     |  name = 'SET_HOME_POSITION'
     |  
     |  native_format = bytearray(b'<iiifffffffB')
     |  
     |  ordered_fieldnames = ['latitude', 'longitude', 'altitude', 'x', 'y', '...
     |  
     |  orders = [10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_set_mag_offsets_message(MAVLink_message)
     |  Set the magnetometer offsets
     |  
     |  Method resolution order:
     |      MAVLink_set_mag_offsets_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, target_component, mag_ofs_x, mag_ofs_y, mag_ofs_z)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0]
     |  
     |  crc_extra = 219
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_system', 'target_component', 'mag_ofs_x', 'mag_o...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'int16_t', 'int16_t', 'int16_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<hhhBB'
     |  
     |  id = 151
     |  
     |  lengths = [1, 1, 1, 1, 1]
     |  
     |  name = 'SET_MAG_OFFSETS'
     |  
     |  native_format = bytearray(b'<hhhBB')
     |  
     |  ordered_fieldnames = ['mag_ofs_x', 'mag_ofs_y', 'mag_ofs_z', 'target_s...
     |  
     |  orders = [3, 4, 0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_set_mode_message(MAVLink_message)
     |  Set the system mode, as defined by enum MAV_MODE. There is no
     |  target component id as the mode is by definition for the
     |  overall aircraft, not only for one component.
     |  
     |  Method resolution order:
     |      MAVLink_set_mode_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_system, base_mode, custom_mode)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0]
     |  
     |  crc_extra = 89
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'base_mode': 'MAV_MODE'}
     |  
     |  fieldnames = ['target_system', 'base_mode', 'custom_mode']
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint32_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<IBB'
     |  
     |  id = 11
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'SET_MODE'
     |  
     |  native_format = bytearray(b'<IBB')
     |  
     |  ordered_fieldnames = ['custom_mode', 'target_system', 'base_mode']
     |  
     |  orders = [1, 2, 0]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_set_position_target_global_int_message(MAVLink_message)
     |  Sets a desired vehicle position, velocity, and/or acceleration
     |  in a global coordinate system (WGS84). Used by an external
     |  controller to command the vehicle (manual controller or other
     |  system).
     |  
     |  Method resolution order:
     |      MAVLink_set_position_target_global_int_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, target_system, target_component, coordinate_frame, type_mask, lat_int, lon_int, alt, vx, vy, vz, afx, afy, afz, yaw, yaw_rate)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 5
     |  
     |  fielddisplays_by_name = {'type_mask': 'bitmask'}
     |  
     |  fieldenums_by_name = {'coordinate_frame': 'MAV_FRAME', 'type_mask': 'P...
     |  
     |  fieldnames = ['time_boot_ms', 'target_system', 'target_component', 'co...
     |  
     |  fieldtypes = ['uint32_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint16_t',...
     |  
     |  fieldunits_by_name = {'afx': 'm/s/s', 'afy': 'm/s/s', 'afz': 'm/s/s', ...
     |  
     |  format = '<IiifffffffffHBBB'
     |  
     |  id = 86
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'SET_POSITION_TARGET_GLOBAL_INT'
     |  
     |  native_format = bytearray(b'<IiifffffffffHBBB')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'lat_int', 'lon_int', 'alt', 'vx...
     |  
     |  orders = [0, 13, 14, 15, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_set_position_target_local_ned_message(MAVLink_message)
     |  Sets a desired vehicle position in a local north-east-down
     |  coordinate frame. Used by an external controller to command
     |  the vehicle (manual controller or other system).
     |  
     |  Method resolution order:
     |      MAVLink_set_position_target_local_ned_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_boot_ms, target_system, target_component, coordinate_frame, type_mask, x, y, z, vx, vy, vz, afx, afy, afz, yaw, yaw_rate)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 143
     |  
     |  fielddisplays_by_name = {'type_mask': 'bitmask'}
     |  
     |  fieldenums_by_name = {'coordinate_frame': 'MAV_FRAME', 'type_mask': 'P...
     |  
     |  fieldnames = ['time_boot_ms', 'target_system', 'target_component', 'co...
     |  
     |  fieldtypes = ['uint32_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint16_t',...
     |  
     |  fieldunits_by_name = {'afx': 'm/s/s', 'afy': 'm/s/s', 'afz': 'm/s/s', ...
     |  
     |  format = '<IfffffffffffHBBB'
     |  
     |  id = 84
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'SET_POSITION_TARGET_LOCAL_NED'
     |  
     |  native_format = bytearray(b'<IfffffffffffHBBB')
     |  
     |  ordered_fieldnames = ['time_boot_ms', 'x', 'y', 'z', 'vx', 'vy', 'vz',...
     |  
     |  orders = [0, 13, 14, 15, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_sim_state_message(MAVLink_message)
     |  Status of simulation environment, if used
     |  
     |  Method resolution order:
     |      MAVLink_sim_state_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, q1, q2, q3, q4, roll, pitch, yaw, xacc, yacc, zacc, xgyro, ygyro, zgyro, lat, lon, alt, std_dev_horz, std_dev_vert, vn, ve, vd)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...
     |  
     |  crc_extra = 32
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['q1', 'q2', 'q3', 'q4', 'roll', 'pitch', 'yaw', 'xacc', ...
     |  
     |  fieldtypes = ['float', 'float', 'float', 'float', 'float', 'float', 'f...
     |  
     |  fieldunits_by_name = {'alt': 'm', 'lat': 'deg', 'lon': 'deg', 'vd': 'm...
     |  
     |  format = '<fffffffffffffffffffff'
     |  
     |  id = 108
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,...
     |  
     |  name = 'SIM_STATE'
     |  
     |  native_format = bytearray(b'<fffffffffffffffffffff')
     |  
     |  ordered_fieldnames = ['q1', 'q2', 'q3', 'q4', 'roll', 'pitch', 'yaw', ...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17...
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_simstate_message(MAVLink_message)
     |  Status of simulation environment, if used.
     |  
     |  Method resolution order:
     |      MAVLink_simstate_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, roll, pitch, yaw, xacc, yacc, zacc, xgyro, ygyro, zgyro, lat, lng)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 154
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['roll', 'pitch', 'yaw', 'xacc', 'yacc', 'zacc', 'xgyro',...
     |  
     |  fieldtypes = ['float', 'float', 'float', 'float', 'float', 'float', 'f...
     |  
     |  fieldunits_by_name = {'lat': 'degE7', 'lng': 'degE7', 'pitch': 'rad', ...
     |  
     |  format = '<fffffffffii'
     |  
     |  id = 164
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'SIMSTATE'
     |  
     |  native_format = bytearray(b'<fffffffffii')
     |  
     |  ordered_fieldnames = ['roll', 'pitch', 'yaw', 'xacc', 'yacc', 'zacc', ...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_statustext_message(MAVLink_message)
     |  Status text message. These messages are printed in yellow in
     |  the COMM console of QGroundControl. WARNING: They consume
     |  quite some bandwidth, so use only for important status and
     |  error messages. If implemented wisely, these messages are
     |  buffered on the MCU and sent only at a limited rate (e.g. 10
     |  Hz).
     |  
     |  Method resolution order:
     |      MAVLink_statustext_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, severity, text)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 50]
     |  
     |  crc_extra = 83
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {'severity': 'MAV_SEVERITY'}
     |  
     |  fieldnames = ['severity', 'text']
     |  
     |  fieldtypes = ['uint8_t', 'char']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<B50s'
     |  
     |  id = 253
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'STATUSTEXT'
     |  
     |  native_format = bytearray(b'<Bc')
     |  
     |  ordered_fieldnames = ['severity', 'text']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_sys_status_message(MAVLink_message)
     |  The general system state. If the system is following the
     |  MAVLink standard, the system state is mainly defined by three
     |  orthogonal states/modes: The system mode, which is either
     |  LOCKED (motors shut down and locked), MANUAL (system under RC
     |  control), GUIDED (system with autonomous position control,
     |  position setpoint controlled manually) or AUTO (system guided
     |  by path/waypoint planner). The NAV_MODE defined the current
     |  flight state: LIFTOFF (often an open-loop maneuver), LANDING,
     |  WAYPOINTS or VECTOR. This represents the internal navigation
     |  state machine. The system status shows whether the system is
     |  currently active or not and if an emergency occurred. During
     |  the CRITICAL and EMERGENCY states the MAV is still considered
     |  to be active, but should start emergency procedures
     |  autonomously. After a failure occurred it should first move
     |  from active to critical to allow manual intervention and then
     |  move to emergency after a certain timeout.
     |  
     |  Method resolution order:
     |      MAVLink_sys_status_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, onboard_control_sensors_present, onboard_control_sensors_enabled, onboard_control_sensors_health, load, voltage_battery, current_battery, battery_remaining, drop_rate_comm, errors_comm, errors_count1, errors_count2, errors_count3, errors_count4)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 124
     |  
     |  fielddisplays_by_name = {'onboard_control_sensors_enabled': 'bitmask',...
     |  
     |  fieldenums_by_name = {'onboard_control_sensors_enabled': 'MAV_SYS_STAT...
     |  
     |  fieldnames = ['onboard_control_sensors_present', 'onboard_control_sens...
     |  
     |  fieldtypes = ['uint32_t', 'uint32_t', 'uint32_t', 'uint16_t', 'uint16_...
     |  
     |  fieldunits_by_name = {'battery_remaining': '%', 'current_battery': 'cA...
     |  
     |  format = '<IIIHHhHHHHHHb'
     |  
     |  id = 1
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'SYS_STATUS'
     |  
     |  native_format = bytearray(b'<IIIHHhHHHHHHb')
     |  
     |  ordered_fieldnames = ['onboard_control_sensors_present', 'onboard_cont...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_system_time_message(MAVLink_message)
     |  The system time is the time of the master clock, typically the
     |  computer clock of the main onboard computer.
     |  
     |  Method resolution order:
     |      MAVLink_system_time_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_unix_usec, time_boot_ms)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 137
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_unix_usec', 'time_boot_ms']
     |  
     |  fieldtypes = ['uint64_t', 'uint32_t']
     |  
     |  fieldunits_by_name = {'time_boot_ms': 'ms', 'time_unix_usec': 'us'}
     |  
     |  format = '<QI'
     |  
     |  id = 2
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'SYSTEM_TIME'
     |  
     |  native_format = bytearray(b'<QI')
     |  
     |  ordered_fieldnames = ['time_unix_usec', 'time_boot_ms']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_terrain_check_message(MAVLink_message)
     |  Request that the vehicle report terrain height at the given
     |  location. Used by GCS to check if vehicle has all terrain data
     |  needed for a mission.
     |  
     |  Method resolution order:
     |      MAVLink_terrain_check_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, lat, lon)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 203
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['lat', 'lon']
     |  
     |  fieldtypes = ['int32_t', 'int32_t']
     |  
     |  fieldunits_by_name = {'lat': 'degE7', 'lon': 'degE7'}
     |  
     |  format = '<ii'
     |  
     |  id = 135
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'TERRAIN_CHECK'
     |  
     |  native_format = bytearray(b'<ii')
     |  
     |  ordered_fieldnames = ['lat', 'lon']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_terrain_data_message(MAVLink_message)
     |  Terrain data sent from GCS. The lat/lon and grid_spacing must
     |  be the same as a lat/lon from a TERRAIN_REQUEST
     |  
     |  Method resolution order:
     |      MAVLink_terrain_data_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, lat, lon, grid_spacing, gridbit, data)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 16, 0]
     |  
     |  crc_extra = 229
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['lat', 'lon', 'grid_spacing', 'gridbit', 'data']
     |  
     |  fieldtypes = ['int32_t', 'int32_t', 'uint16_t', 'uint8_t', 'int16_t']
     |  
     |  fieldunits_by_name = {'data': 'm', 'grid_spacing': 'm', 'lat': 'degE7'...
     |  
     |  format = '<iiH16hB'
     |  
     |  id = 134
     |  
     |  lengths = [1, 1, 1, 16, 1]
     |  
     |  name = 'TERRAIN_DATA'
     |  
     |  native_format = bytearray(b'<iiHhB')
     |  
     |  ordered_fieldnames = ['lat', 'lon', 'grid_spacing', 'data', 'gridbit']
     |  
     |  orders = [0, 1, 2, 4, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_terrain_report_message(MAVLink_message)
     |  Response from a TERRAIN_CHECK request
     |  
     |  Method resolution order:
     |      MAVLink_terrain_report_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, lat, lon, spacing, terrain_height, current_height, pending, loaded)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 1
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['lat', 'lon', 'spacing', 'terrain_height', 'current_heig...
     |  
     |  fieldtypes = ['int32_t', 'int32_t', 'uint16_t', 'float', 'float', 'uin...
     |  
     |  fieldunits_by_name = {'current_height': 'm', 'lat': 'degE7', 'lon': 'd...
     |  
     |  format = '<iiffHHH'
     |  
     |  id = 136
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'TERRAIN_REPORT'
     |  
     |  native_format = bytearray(b'<iiffHHH')
     |  
     |  ordered_fieldnames = ['lat', 'lon', 'terrain_height', 'current_height'...
     |  
     |  orders = [0, 1, 4, 2, 3, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_terrain_request_message(MAVLink_message)
     |  Request for terrain data and terrain status
     |  
     |  Method resolution order:
     |      MAVLink_terrain_request_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, lat, lon, grid_spacing, mask)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0]
     |  
     |  crc_extra = 6
     |  
     |  fielddisplays_by_name = {'mask': 'bitmask'}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['lat', 'lon', 'grid_spacing', 'mask']
     |  
     |  fieldtypes = ['int32_t', 'int32_t', 'uint16_t', 'uint64_t']
     |  
     |  fieldunits_by_name = {'grid_spacing': 'm', 'lat': 'degE7', 'lon': 'deg...
     |  
     |  format = '<QiiH'
     |  
     |  id = 133
     |  
     |  lengths = [1, 1, 1, 1]
     |  
     |  name = 'TERRAIN_REQUEST'
     |  
     |  native_format = bytearray(b'<QiiH')
     |  
     |  ordered_fieldnames = ['mask', 'lat', 'lon', 'grid_spacing']
     |  
     |  orders = [1, 2, 3, 0]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_timesync_message(MAVLink_message)
     |  Time synchronization message.
     |  
     |  Method resolution order:
     |      MAVLink_timesync_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, tc1, ts1)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0]
     |  
     |  crc_extra = 34
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['tc1', 'ts1']
     |  
     |  fieldtypes = ['int64_t', 'int64_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<qq'
     |  
     |  id = 111
     |  
     |  lengths = [1, 1]
     |  
     |  name = 'TIMESYNC'
     |  
     |  native_format = bytearray(b'<qq')
     |  
     |  ordered_fieldnames = ['tc1', 'ts1']
     |  
     |  orders = [0, 1]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_v2_extension_message(MAVLink_message)
     |  Message implementing parts of the V2 payload specs in V1
     |  frames for transitional support.
     |  
     |  Method resolution order:
     |      MAVLink_v2_extension_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, target_network, target_system, target_component, message_type, payload)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 249]
     |  
     |  crc_extra = 8
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['target_network', 'target_system', 'target_component', '...
     |  
     |  fieldtypes = ['uint8_t', 'uint8_t', 'uint8_t', 'uint16_t', 'uint8_t']
     |  
     |  fieldunits_by_name = {}
     |  
     |  format = '<HBBB249B'
     |  
     |  id = 248
     |  
     |  lengths = [1, 1, 1, 1, 249]
     |  
     |  name = 'V2_EXTENSION'
     |  
     |  native_format = bytearray(b'<HBBBB')
     |  
     |  ordered_fieldnames = ['message_type', 'target_network', 'target_system...
     |  
     |  orders = [1, 2, 3, 0, 4]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_vfr_hud_message(MAVLink_message)
     |  Metrics typically displayed on a HUD for fixed wing aircraft.
     |  
     |  Method resolution order:
     |      MAVLink_vfr_hud_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, airspeed, groundspeed, heading, throttle, alt, climb)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 20
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['airspeed', 'groundspeed', 'heading', 'throttle', 'alt',...
     |  
     |  fieldtypes = ['float', 'float', 'int16_t', 'uint16_t', 'float', 'float...
     |  
     |  fieldunits_by_name = {'airspeed': 'm/s', 'alt': 'm', 'climb': 'm/s', '...
     |  
     |  format = '<ffffhH'
     |  
     |  id = 74
     |  
     |  lengths = [1, 1, 1, 1, 1, 1]
     |  
     |  name = 'VFR_HUD'
     |  
     |  native_format = bytearray(b'<ffffhH')
     |  
     |  ordered_fieldnames = ['airspeed', 'groundspeed', 'alt', 'climb', 'head...
     |  
     |  orders = [0, 1, 4, 5, 2, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_vibration_message(MAVLink_message)
     |  Vibration levels and accelerometer clipping
     |  
     |  Method resolution order:
     |      MAVLink_vibration_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, vibration_x, vibration_y, vibration_z, clipping_0, clipping_1, clipping_2)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 90
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'vibration_x', 'vibration_y', 'vibration_z'...
     |  
     |  fieldtypes = ['uint64_t', 'float', 'float', 'float', 'uint32_t', 'uint...
     |  
     |  fieldunits_by_name = {'time_usec': 'us'}
     |  
     |  format = '<QfffIII'
     |  
     |  id = 241
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'VIBRATION'
     |  
     |  native_format = bytearray(b'<QfffIII')
     |  
     |  ordered_fieldnames = ['time_usec', 'vibration_x', 'vibration_y', 'vibr...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_vicon_position_estimate_message(MAVLink_message)
     |  Global position estimate from a Vicon motion system source.
     |  
     |  Method resolution order:
     |      MAVLink_vicon_position_estimate_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, usec, x, y, z, roll, pitch, yaw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 56
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['usec', 'x', 'y', 'z', 'roll', 'pitch', 'yaw']
     |  
     |  fieldtypes = ['uint64_t', 'float', 'float', 'float', 'float', 'float',...
     |  
     |  fieldunits_by_name = {'pitch': 'rad', 'roll': 'rad', 'usec': 'us', 'x'...
     |  
     |  format = '<Qffffff'
     |  
     |  id = 104
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'VICON_POSITION_ESTIMATE'
     |  
     |  native_format = bytearray(b'<Qffffff')
     |  
     |  ordered_fieldnames = ['usec', 'x', 'y', 'z', 'roll', 'pitch', 'yaw']
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_vision_position_estimate_message(MAVLink_message)
     |  Local position/attitude estimate from a vision source.
     |  
     |  Method resolution order:
     |      MAVLink_vision_position_estimate_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, usec, x, y, z, roll, pitch, yaw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 158
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['usec', 'x', 'y', 'z', 'roll', 'pitch', 'yaw']
     |  
     |  fieldtypes = ['uint64_t', 'float', 'float', 'float', 'float', 'float',...
     |  
     |  fieldunits_by_name = {'pitch': 'rad', 'roll': 'rad', 'usec': 'us', 'x'...
     |  
     |  format = '<Qffffff'
     |  
     |  id = 102
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'VISION_POSITION_ESTIMATE'
     |  
     |  native_format = bytearray(b'<Qffffff')
     |  
     |  ordered_fieldnames = ['usec', 'x', 'y', 'z', 'roll', 'pitch', 'yaw']
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_vision_speed_estimate_message(MAVLink_message)
     |  Speed estimate from a vision source.
     |  
     |  Method resolution order:
     |      MAVLink_vision_speed_estimate_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, usec, x, y, z)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0]
     |  
     |  crc_extra = 208
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['usec', 'x', 'y', 'z']
     |  
     |  fieldtypes = ['uint64_t', 'float', 'float', 'float']
     |  
     |  fieldunits_by_name = {'usec': 'us', 'x': 'm/s', 'y': 'm/s', 'z': 'm/s'...
     |  
     |  format = '<Qfff'
     |  
     |  id = 103
     |  
     |  lengths = [1, 1, 1, 1]
     |  
     |  name = 'VISION_SPEED_ESTIMATE'
     |  
     |  native_format = bytearray(b'<Qfff')
     |  
     |  ordered_fieldnames = ['usec', 'x', 'y', 'z']
     |  
     |  orders = [0, 1, 2, 3]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_wind_cov_message(MAVLink_message)
     |  Wind covariance estimate from vehicle.
     |  
     |  Method resolution order:
     |      MAVLink_wind_cov_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, time_usec, wind_x, wind_y, wind_z, var_horiz, var_vert, wind_alt, horiz_accuracy, vert_accuracy)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0]
     |  
     |  crc_extra = 105
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['time_usec', 'wind_x', 'wind_y', 'wind_z', 'var_horiz', ...
     |  
     |  fieldtypes = ['uint64_t', 'float', 'float', 'float', 'float', 'float',...
     |  
     |  fieldunits_by_name = {'horiz_accuracy': 'm', 'time_usec': 'us', 'var_h...
     |  
     |  format = '<Qffffffff'
     |  
     |  id = 231
     |  
     |  lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1]
     |  
     |  name = 'WIND_COV'
     |  
     |  native_format = bytearray(b'<Qffffffff')
     |  
     |  ordered_fieldnames = ['time_usec', 'wind_x', 'wind_y', 'wind_z', 'var_...
     |  
     |  orders = [0, 1, 2, 3, 4, 5, 6, 7, 8]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVLink_wind_message(MAVLink_message)
     |  Wind estimation.
     |  
     |  Method resolution order:
     |      MAVLink_wind_message
     |      MAVLink_message
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, direction, speed, speed_z)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  pack(self, mav, force_mavlink1=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  array_lengths = [0, 0, 0]
     |  
     |  crc_extra = 1
     |  
     |  fielddisplays_by_name = {}
     |  
     |  fieldenums_by_name = {}
     |  
     |  fieldnames = ['direction', 'speed', 'speed_z']
     |  
     |  fieldtypes = ['float', 'float', 'float']
     |  
     |  fieldunits_by_name = {'direction': 'deg', 'speed': 'm/s', 'speed_z': '...
     |  
     |  format = '<fff'
     |  
     |  id = 168
     |  
     |  lengths = [1, 1, 1]
     |  
     |  name = 'WIND'
     |  
     |  native_format = bytearray(b'<fff')
     |  
     |  ordered_fieldnames = ['direction', 'speed', 'speed_z']
     |  
     |  orders = [0, 1, 2]
     |  
     |  unpacker = <Struct object>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MAVLink_message:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  format_attr(self, field)
     |      override field getter
     |  
     |  get_crc(self)
     |  
     |  get_fieldnames(self)
     |  
     |  get_header(self)
     |  
     |  get_link_id(self)
     |  
     |  get_msgId(self)
     |  
     |  get_msgbuf(self)
     |  
     |  get_payload(self)
     |  
     |  get_seq(self)
     |  
     |  get_signed(self)
     |  
     |  get_srcComponent(self)
     |  
     |  get_srcSystem(self)
     |  
     |  get_type(self)
     |  
     |  sign_packet(self, mav)
     |  
     |  to_dict(self)
     |  
     |  to_json(self)
     |  
     |  to_string(self, s)
     |      desperate attempt to convert a string regardless of what garbage we get
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MAVLink_message:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from MAVLink_message:
     |  
     |  __hash__ = None
    
    class MAVString(builtins.str)
     |  NUL terminated string
     |  
     |  Method resolution order:
     |      MAVString
     |      builtins.str
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, s)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.str:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __format__(...)
     |      S.__format__(format_spec) -> str
     |      
     |      Return a formatted version of S as described by format_spec.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __getnewargs__(...)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __sizeof__(...)
     |      S.__sizeof__() -> size of S in memory, in bytes
     |  
     |  capitalize(...)
     |      S.capitalize() -> str
     |      
     |      Return a capitalized version of S, i.e. make the first character
     |      have upper case and the rest lower case.
     |  
     |  casefold(...)
     |      S.casefold() -> str
     |      
     |      Return a version of S suitable for caseless comparisons.
     |  
     |  center(...)
     |      S.center(width[, fillchar]) -> str
     |      
     |      Return S centered in a string of length width. Padding is
     |      done using the specified fill character (default is a space)
     |  
     |  count(...)
     |      S.count(sub[, start[, end]]) -> int
     |      
     |      Return the number of non-overlapping occurrences of substring sub in
     |      string S[start:end].  Optional arguments start and end are
     |      interpreted as in slice notation.
     |  
     |  encode(...)
     |      S.encode(encoding='utf-8', errors='strict') -> bytes
     |      
     |      Encode S using the codec registered for encoding. Default encoding
     |      is 'utf-8'. errors may be given to set a different error
     |      handling scheme. Default is 'strict' meaning that encoding errors raise
     |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
     |      'xmlcharrefreplace' as well as any other name registered with
     |      codecs.register_error that can handle UnicodeEncodeErrors.
     |  
     |  endswith(...)
     |      S.endswith(suffix[, start[, end]]) -> bool
     |      
     |      Return True if S ends with the specified suffix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      suffix can also be a tuple of strings to try.
     |  
     |  expandtabs(...)
     |      S.expandtabs(tabsize=8) -> str
     |      
     |      Return a copy of S where all tab characters are expanded using spaces.
     |      If tabsize is not given, a tab size of 8 characters is assumed.
     |  
     |  find(...)
     |      S.find(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  format(...)
     |      S.format(*args, **kwargs) -> str
     |      
     |      Return a formatted version of S, using substitutions from args and kwargs.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  format_map(...)
     |      S.format_map(mapping) -> str
     |      
     |      Return a formatted version of S, using substitutions from mapping.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  index(...)
     |      S.index(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found, 
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  isalnum(...)
     |      S.isalnum() -> bool
     |      
     |      Return True if all characters in S are alphanumeric
     |      and there is at least one character in S, False otherwise.
     |  
     |  isalpha(...)
     |      S.isalpha() -> bool
     |      
     |      Return True if all characters in S are alphabetic
     |      and there is at least one character in S, False otherwise.
     |  
     |  isdecimal(...)
     |      S.isdecimal() -> bool
     |      
     |      Return True if there are only decimal characters in S,
     |      False otherwise.
     |  
     |  isdigit(...)
     |      S.isdigit() -> bool
     |      
     |      Return True if all characters in S are digits
     |      and there is at least one character in S, False otherwise.
     |  
     |  isidentifier(...)
     |      S.isidentifier() -> bool
     |      
     |      Return True if S is a valid identifier according
     |      to the language definition.
     |      
     |      Use keyword.iskeyword() to test for reserved identifiers
     |      such as "def" and "class".
     |  
     |  islower(...)
     |      S.islower() -> bool
     |      
     |      Return True if all cased characters in S are lowercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  isnumeric(...)
     |      S.isnumeric() -> bool
     |      
     |      Return True if there are only numeric characters in S,
     |      False otherwise.
     |  
     |  isprintable(...)
     |      S.isprintable() -> bool
     |      
     |      Return True if all characters in S are considered
     |      printable in repr() or S is empty, False otherwise.
     |  
     |  isspace(...)
     |      S.isspace() -> bool
     |      
     |      Return True if all characters in S are whitespace
     |      and there is at least one character in S, False otherwise.
     |  
     |  istitle(...)
     |      S.istitle() -> bool
     |      
     |      Return True if S is a titlecased string and there is at least one
     |      character in S, i.e. upper- and titlecase characters may only
     |      follow uncased characters and lowercase characters only cased ones.
     |      Return False otherwise.
     |  
     |  isupper(...)
     |      S.isupper() -> bool
     |      
     |      Return True if all cased characters in S are uppercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  join(...)
     |      S.join(iterable) -> str
     |      
     |      Return a string which is the concatenation of the strings in the
     |      iterable.  The separator between elements is S.
     |  
     |  ljust(...)
     |      S.ljust(width[, fillchar]) -> str
     |      
     |      Return S left-justified in a Unicode string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  lower(...)
     |      S.lower() -> str
     |      
     |      Return a copy of the string S converted to lowercase.
     |  
     |  lstrip(...)
     |      S.lstrip([chars]) -> str
     |      
     |      Return a copy of the string S with leading whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  partition(...)
     |      S.partition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, and return the part before it,
     |      the separator itself, and the part after it.  If the separator is not
     |      found, return S and two empty strings.
     |  
     |  replace(...)
     |      S.replace(old, new[, count]) -> str
     |      
     |      Return a copy of S with all occurrences of substring
     |      old replaced by new.  If the optional argument count is
     |      given, only the first count occurrences are replaced.
     |  
     |  rfind(...)
     |      S.rfind(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  rindex(...)
     |      S.rindex(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  rjust(...)
     |      S.rjust(width[, fillchar]) -> str
     |      
     |      Return S right-justified in a string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  rpartition(...)
     |      S.rpartition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, starting at the end of S, and return
     |      the part before it, the separator itself, and the part after it.  If the
     |      separator is not found, return two empty strings and S.
     |  
     |  rsplit(...)
     |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string, starting at the end of the string and
     |      working to the front.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified, any whitespace string
     |      is a separator.
     |  
     |  rstrip(...)
     |      S.rstrip([chars]) -> str
     |      
     |      Return a copy of the string S with trailing whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  split(...)
     |      S.split(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified or is None, any
     |      whitespace string is a separator and empty strings are
     |      removed from the result.
     |  
     |  splitlines(...)
     |      S.splitlines([keepends]) -> list of strings
     |      
     |      Return a list of the lines in S, breaking at line boundaries.
     |      Line breaks are not included in the resulting list unless keepends
     |      is given and true.
     |  
     |  startswith(...)
     |      S.startswith(prefix[, start[, end]]) -> bool
     |      
     |      Return True if S starts with the specified prefix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      prefix can also be a tuple of strings to try.
     |  
     |  strip(...)
     |      S.strip([chars]) -> str
     |      
     |      Return a copy of the string S with leading and trailing
     |      whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  swapcase(...)
     |      S.swapcase() -> str
     |      
     |      Return a copy of S with uppercase characters converted to lowercase
     |      and vice versa.
     |  
     |  title(...)
     |      S.title() -> str
     |      
     |      Return a titlecased version of S, i.e. words start with title case
     |      characters, all remaining cased characters have lower case.
     |  
     |  translate(...)
     |      S.translate(table) -> str
     |      
     |      Return a copy of the string S in which each character has been mapped
     |      through the given translation table. The table must implement
     |      lookup/indexing via __getitem__, for instance a dictionary or list,
     |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
     |      this operation raises LookupError, the character is left untouched.
     |      Characters mapped to None are deleted.
     |  
     |  upper(...)
     |      S.upper() -> str
     |      
     |      Return a copy of S converted to uppercase.
     |  
     |  zfill(...)
     |      S.zfill(width) -> str
     |      
     |      Pad a numeric string S with zeros on the left, to fill a field
     |      of the specified width. The string S is never truncated.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.str:
     |  
     |  maketrans(x, y=None, z=None, /)
     |      Return a translation table usable for str.translate().
     |      
     |      If there is only one argument, it must be a dictionary mapping Unicode
     |      ordinals (integers) or characters to Unicode ordinals, strings or None.
     |      Character keys will be then converted to ordinals.
     |      If there are two arguments, they must be strings of equal length, and
     |      in the resulting dictionary, each character in x will be mapped to the
     |      character at the same position in y. If there is a third argument, it
     |      must be a string, whose characters will be mapped to None in the result.

DATA
    ACCELCAL_VEHICLE_POS_BACK = 6
    ACCELCAL_VEHICLE_POS_ENUM_END = 16777217
    ACCELCAL_VEHICLE_POS_FAILED = 16777216
    ACCELCAL_VEHICLE_POS_LEFT = 2
    ACCELCAL_VEHICLE_POS_LEVEL = 1
    ACCELCAL_VEHICLE_POS_NOSEDOWN = 4
    ACCELCAL_VEHICLE_POS_NOSEUP = 5
    ACCELCAL_VEHICLE_POS_RIGHT = 3
    ACCELCAL_VEHICLE_POS_SUCCESS = 16777215
    ADSB_ALTITUDE_TYPE_ENUM_END = 2
    ADSB_ALTITUDE_TYPE_GEOMETRIC = 1
    ADSB_ALTITUDE_TYPE_PRESSURE_QNH = 0
    ADSB_EMITTER_TYPE_EMERGENCY_SURFACE = 17
    ADSB_EMITTER_TYPE_ENUM_END = 20
    ADSB_EMITTER_TYPE_GLIDER = 9
    ADSB_EMITTER_TYPE_HEAVY = 5
    ADSB_EMITTER_TYPE_HIGHLY_MANUV = 6
    ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE = 4
    ADSB_EMITTER_TYPE_LARGE = 3
    ADSB_EMITTER_TYPE_LIGHT = 1
    ADSB_EMITTER_TYPE_LIGHTER_AIR = 10
    ADSB_EMITTER_TYPE_NO_INFO = 0
    ADSB_EMITTER_TYPE_PARACHUTE = 11
    ADSB_EMITTER_TYPE_POINT_OBSTACLE = 19
    ADSB_EMITTER_TYPE_ROTOCRAFT = 7
    ADSB_EMITTER_TYPE_SERVICE_SURFACE = 18
    ADSB_EMITTER_TYPE_SMALL = 2
    ADSB_EMITTER_TYPE_SPACE = 15
    ADSB_EMITTER_TYPE_UAV = 14
    ADSB_EMITTER_TYPE_ULTRA_LIGHT = 12
    ADSB_EMITTER_TYPE_UNASSGINED3 = 16
    ADSB_EMITTER_TYPE_UNASSIGNED = 8
    ADSB_EMITTER_TYPE_UNASSIGNED2 = 13
    ADSB_FLAGS_BARO_VALID = 256
    ADSB_FLAGS_ENUM_END = 32769
    ADSB_FLAGS_SIMULATED = 64
    ADSB_FLAGS_SOURCE_UAT = 32768
    ADSB_FLAGS_VALID_ALTITUDE = 2
    ADSB_FLAGS_VALID_CALLSIGN = 16
    ADSB_FLAGS_VALID_COORDS = 1
    ADSB_FLAGS_VALID_HEADING = 4
    ADSB_FLAGS_VALID_SQUAWK = 32
    ADSB_FLAGS_VALID_VELOCITY = 8
    ADSB_FLAGS_VERTICAL_VELOCITY_VALID = 128
    CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE = 8
    CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE = 16
    CAMERA_CAP_FLAGS_CAPTURE_IMAGE = 2
    CAMERA_CAP_FLAGS_CAPTURE_VIDEO = 1
    CAMERA_CAP_FLAGS_ENUM_END = 257
    CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS = 128
    CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM = 64
    CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE = 32
    CAMERA_CAP_FLAGS_HAS_MODES = 4
    CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM = 256
    CAMERA_FEEDBACK_BADEXPOSURE = 2
    CAMERA_FEEDBACK_CLOSEDLOOP = 3
    CAMERA_FEEDBACK_FLAGS_ENUM_END = 5
    CAMERA_FEEDBACK_OPENLOOP = 4
    CAMERA_FEEDBACK_PHOTO = 0
    CAMERA_FEEDBACK_VIDEO = 1
    CAMERA_MODE_ENUM_END = 3
    CAMERA_MODE_IMAGE = 0
    CAMERA_MODE_IMAGE_SURVEY = 2
    CAMERA_MODE_VIDEO = 1
    CAMERA_STATUS_TYPES_ENUM_END = 7
    CAMERA_STATUS_TYPE_DISCONNECT = 2
    CAMERA_STATUS_TYPE_ERROR = 3
    CAMERA_STATUS_TYPE_HEARTBEAT = 0
    CAMERA_STATUS_TYPE_LOWBATT = 4
    CAMERA_STATUS_TYPE_LOWSTORE = 5
    CAMERA_STATUS_TYPE_LOWSTOREV = 6
    CAMERA_STATUS_TYPE_TRIGGER = 1
    COPTER_MODE_ACRO = 1
    COPTER_MODE_ALT_HOLD = 2
    COPTER_MODE_AUTO = 3
    COPTER_MODE_AUTOTUNE = 15
    COPTER_MODE_AVOID_ADSB = 19
    COPTER_MODE_BRAKE = 17
    COPTER_MODE_CIRCLE = 7
    COPTER_MODE_DRIFT = 11
    COPTER_MODE_ENUM_END = 22
    COPTER_MODE_FLIP = 14
    COPTER_MODE_GUIDED = 4
    COPTER_MODE_GUIDED_NOGPS = 20
    COPTER_MODE_LAND = 9
    COPTER_MODE_LOITER = 5
    COPTER_MODE_POSHOLD = 16
    COPTER_MODE_RTL = 6
    COPTER_MODE_SMART_RTL = 21
    COPTER_MODE_SPORT = 13
    COPTER_MODE_STABILIZE = 0
    COPTER_MODE_THROW = 18
    DEEPSTALL_STAGE_APPROACH = 5
    DEEPSTALL_STAGE_ARC = 4
    DEEPSTALL_STAGE_ENUM_END = 7
    DEEPSTALL_STAGE_ESTIMATE_WIND = 1
    DEEPSTALL_STAGE_FLY_TO_ARC = 3
    DEEPSTALL_STAGE_FLY_TO_LANDING = 0
    DEEPSTALL_STAGE_LAND = 6
    DEEPSTALL_STAGE_WAIT_FOR_BREAKOUT = 2
    DEVICE_OP_BUSTYPE_ENUM_END = 2
    DEVICE_OP_BUSTYPE_I2C = 0
    DEVICE_OP_BUSTYPE_SPI = 1
    DIALECT = 'ardupilotmega'
    EKF_ATTITUDE = 1
    EKF_CONST_POS_MODE = 128
    EKF_POS_HORIZ_ABS = 16
    EKF_POS_HORIZ_REL = 8
    EKF_POS_VERT_ABS = 32
    EKF_POS_VERT_AGL = 64
    EKF_PRED_POS_HORIZ_ABS = 512
    EKF_PRED_POS_HORIZ_REL = 256
    EKF_STATUS_FLAGS_ENUM_END = 1025
    EKF_UNINITIALIZED = 1024
    EKF_VELOCITY_HORIZ = 2
    EKF_VELOCITY_VERT = 4
    ESTIMATOR_ACCEL_ERROR = 2048
    ESTIMATOR_ATTITUDE = 1
    ESTIMATOR_CONST_POS_MODE = 128
    ESTIMATOR_GPS_GLITCH = 1024
    ESTIMATOR_POS_HORIZ_ABS = 16
    ESTIMATOR_POS_HORIZ_REL = 8
    ESTIMATOR_POS_VERT_ABS = 32
    ESTIMATOR_POS_VERT_AGL = 64
    ESTIMATOR_PRED_POS_HORIZ_ABS = 512
    ESTIMATOR_PRED_POS_HORIZ_REL = 256
    ESTIMATOR_STATUS_FLAGS_ENUM_END = 2049
    ESTIMATOR_VELOCITY_HORIZ = 2
    ESTIMATOR_VELOCITY_VERT = 4
    FAVORABLE_WIND = 1
    FENCE_ACTION_ENUM_END = 5
    FENCE_ACTION_GUIDED = 1
    FENCE_ACTION_GUIDED_THR_PASS = 3
    FENCE_ACTION_NONE = 0
    FENCE_ACTION_REPORT = 2
    FENCE_ACTION_RTL = 4
    FENCE_BREACH_BOUNDARY = 3
    FENCE_BREACH_ENUM_END = 4
    FENCE_BREACH_MAXALT = 2
    FENCE_BREACH_MINALT = 1
    FENCE_BREACH_NONE = 0
    FENCE_MITIGATE_ENUM_END = 3
    FENCE_MITIGATE_NONE = 1
    FENCE_MITIGATE_UNKNOWN = 0
    FENCE_MITIGATE_VEL_LIMIT = 2
    FIRMWARE_VERSION_TYPE_ALPHA = 64
    FIRMWARE_VERSION_TYPE_BETA = 128
    FIRMWARE_VERSION_TYPE_DEV = 0
    FIRMWARE_VERSION_TYPE_ENUM_END = 256
    FIRMWARE_VERSION_TYPE_OFFICIAL = 255
    FIRMWARE_VERSION_TYPE_RC = 192
    GIMBAL_AXIS_CALIBRATION_REQUIRED_ENUM_END = 3
    GIMBAL_AXIS_CALIBRATION_REQUIRED_FALSE = 2
    GIMBAL_AXIS_CALIBRATION_REQUIRED_TRUE = 1
    GIMBAL_AXIS_CALIBRATION_REQUIRED_UNKNOWN = 0
    GIMBAL_AXIS_CALIBRATION_STATUS_ENUM_END = 3
    GIMBAL_AXIS_CALIBRATION_STATUS_FAILED = 2
    GIMBAL_AXIS_CALIBRATION_STATUS_IN_PROGRESS = 0
    GIMBAL_AXIS_CALIBRATION_STATUS_SUCCEEDED = 1
    GIMBAL_AXIS_ENUM_END = 3
    GIMBAL_AXIS_PITCH = 1
    GIMBAL_AXIS_ROLL = 2
    GIMBAL_AXIS_YAW = 0
    GOPRO_BURST_RATE_10_IN_1_SECOND = 2
    GOPRO_BURST_RATE_10_IN_2_SECOND = 3
    GOPRO_BURST_RATE_10_IN_3_SECOND = 4
    GOPRO_BURST_RATE_30_IN_1_SECOND = 5
    GOPRO_BURST_RATE_30_IN_2_SECOND = 6
    GOPRO_BURST_RATE_30_IN_3_SECOND = 7
    GOPRO_BURST_RATE_30_IN_6_SECOND = 8
    GOPRO_BURST_RATE_3_IN_1_SECOND = 0
    GOPRO_BURST_RATE_5_IN_1_SECOND = 1
    GOPRO_BURST_RATE_ENUM_END = 9
    GOPRO_CAPTURE_MODE_BURST = 2
    GOPRO_CAPTURE_MODE_ENUM_END = 256
    GOPRO_CAPTURE_MODE_MULTI_SHOT = 4
    GOPRO_CAPTURE_MODE_PHOTO = 1
    GOPRO_CAPTURE_MODE_PLAYBACK = 5
    GOPRO_CAPTURE_MODE_SETUP = 6
    GOPRO_CAPTURE_MODE_TIME_LAPSE = 3
    GOPRO_CAPTURE_MODE_UNKNOWN = 255
    GOPRO_CAPTURE_MODE_VIDEO = 0
    GOPRO_CHARGING_DISABLED = 0
    GOPRO_CHARGING_ENABLED = 1
    GOPRO_CHARGING_ENUM_END = 2
    GOPRO_COMMAND_BATTERY = 3
    GOPRO_COMMAND_CAPTURE_MODE = 1
    GOPRO_COMMAND_CHARGING = 16
    GOPRO_COMMAND_ENUM_END = 17
    GOPRO_COMMAND_LOW_LIGHT = 6
    GOPRO_COMMAND_MODEL = 4
    GOPRO_COMMAND_PHOTO_BURST_RATE = 8
    GOPRO_COMMAND_PHOTO_RESOLUTION = 7
    GOPRO_COMMAND_POWER = 0
    GOPRO_COMMAND_PROTUNE = 9
    GOPRO_COMMAND_PROTUNE_COLOUR = 11
    GOPRO_COMMAND_PROTUNE_EXPOSURE = 14
    GOPRO_COMMAND_PROTUNE_GAIN = 12
    GOPRO_COMMAND_PROTUNE_SHARPNESS = 13
    GOPRO_COMMAND_PROTUNE_WHITE_BALANCE = 10
    GOPRO_COMMAND_SHUTTER = 2
    GOPRO_COMMAND_TIME = 15
    GOPRO_COMMAND_VIDEO_SETTINGS = 5
    GOPRO_FIELD_OF_VIEW_ENUM_END = 3
    GOPRO_FIELD_OF_VIEW_MEDIUM = 1
    GOPRO_FIELD_OF_VIEW_NARROW = 2
    GOPRO_FIELD_OF_VIEW_WIDE = 0
    GOPRO_FLAG_RECORDING = 1
    GOPRO_FRAME_RATE_100 = 10
    GOPRO_FRAME_RATE_12 = 0
    GOPRO_FRAME_RATE_120 = 11
    GOPRO_FRAME_RATE_12_5 = 13
    GOPRO_FRAME_RATE_15 = 1
    GOPRO_FRAME_RATE_24 = 2
    GOPRO_FRAME_RATE_240 = 12
    GOPRO_FRAME_RATE_25 = 3
    GOPRO_FRAME_RATE_30 = 4
    GOPRO_FRAME_RATE_48 = 5
    GOPRO_FRAME_RATE_50 = 6
    GOPRO_FRAME_RATE_60 = 7
    GOPRO_FRAME_RATE_80 = 8
    GOPRO_FRAME_RATE_90 = 9
    GOPRO_FRAME_RATE_ENUM_END = 14
    GOPRO_HEARTBEAT_FLAGS_ENUM_END = 2
    GOPRO_HEARTBEAT_STATUS_CONNECTED = 2
    GOPRO_HEARTBEAT_STATUS_DISCONNECTED = 0
    GOPRO_HEARTBEAT_STATUS_ENUM_END = 4
    GOPRO_HEARTBEAT_STATUS_ERROR = 3
    GOPRO_HEARTBEAT_STATUS_INCOMPATIBLE = 1
    GOPRO_MODEL_ENUM_END = 5
    GOPRO_MODEL_HERO_3_PLUS_BLACK = 2
    GOPRO_MODEL_HERO_3_PLUS_SILVER = 1
    GOPRO_MODEL_HERO_4_BLACK = 4
    GOPRO_MODEL_HERO_4_SILVER = 3
    GOPRO_MODEL_UNKNOWN = 0
    GOPRO_PHOTO_RESOLUTION_10MP_WIDE = 3
    GOPRO_PHOTO_RESOLUTION_12MP_WIDE = 4
    GOPRO_PHOTO_RESOLUTION_5MP_MEDIUM = 0
    GOPRO_PHOTO_RESOLUTION_7MP_MEDIUM = 1
    GOPRO_PHOTO_RESOLUTION_7MP_WIDE = 2
    GOPRO_PHOTO_RESOLUTION_ENUM_END = 5
    GOPRO_PROTUNE_COLOUR_ENUM_END = 2
    GOPRO_PROTUNE_COLOUR_NEUTRAL = 1
    GOPRO_PROTUNE_COLOUR_STANDARD = 0
    GOPRO_PROTUNE_EXPOSURE_ENUM_END = 21
    GOPRO_PROTUNE_EXPOSURE_NEG_0_5 = 9
    GOPRO_PROTUNE_EXPOSURE_NEG_1_0 = 8
    GOPRO_PROTUNE_EXPOSURE_NEG_1_5 = 7
    GOPRO_PROTUNE_EXPOSURE_NEG_2_0 = 6
    GOPRO_PROTUNE_EXPOSURE_NEG_2_5 = 5
    GOPRO_PROTUNE_EXPOSURE_NEG_3_0 = 4
    GOPRO_PROTUNE_EXPOSURE_NEG_3_5 = 3
    GOPRO_PROTUNE_EXPOSURE_NEG_4_0 = 2
    GOPRO_PROTUNE_EXPOSURE_NEG_4_5 = 1
    GOPRO_PROTUNE_EXPOSURE_NEG_5_0 = 0
    GOPRO_PROTUNE_EXPOSURE_POS_0_5 = 11
    GOPRO_PROTUNE_EXPOSURE_POS_1_0 = 12
    GOPRO_PROTUNE_EXPOSURE_POS_1_5 = 13
    GOPRO_PROTUNE_EXPOSURE_POS_2_0 = 14
    GOPRO_PROTUNE_EXPOSURE_POS_2_5 = 15
    GOPRO_PROTUNE_EXPOSURE_POS_3_0 = 16
    GOPRO_PROTUNE_EXPOSURE_POS_3_5 = 17
    GOPRO_PROTUNE_EXPOSURE_POS_4_0 = 18
    GOPRO_PROTUNE_EXPOSURE_POS_4_5 = 19
    GOPRO_PROTUNE_EXPOSURE_POS_5_0 = 20
    GOPRO_PROTUNE_EXPOSURE_ZERO = 10
    GOPRO_PROTUNE_GAIN_1600 = 2
    GOPRO_PROTUNE_GAIN_3200 = 3
    GOPRO_PROTUNE_GAIN_400 = 0
    GOPRO_PROTUNE_GAIN_6400 = 4
    GOPRO_PROTUNE_GAIN_800 = 1
    GOPRO_PROTUNE_GAIN_ENUM_END = 5
    GOPRO_PROTUNE_SHARPNESS_ENUM_END = 3
    GOPRO_PROTUNE_SHARPNESS_HIGH = 2
    GOPRO_PROTUNE_SHARPNESS_LOW = 0
    GOPRO_PROTUNE_SHARPNESS_MEDIUM = 1
    GOPRO_PROTUNE_WHITE_BALANCE_3000K = 1
    GOPRO_PROTUNE_WHITE_BALANCE_5500K = 2
    GOPRO_PROTUNE_WHITE_BALANCE_6500K = 3
    GOPRO_PROTUNE_WHITE_BALANCE_AUTO = 0
    GOPRO_PROTUNE_WHITE_BALANCE_ENUM_END = 5
    GOPRO_PROTUNE_WHITE_BALANCE_RAW = 4
    GOPRO_REQUEST_FAILED = 1
    GOPRO_REQUEST_STATUS_ENUM_END = 2
    GOPRO_REQUEST_SUCCESS = 0
    GOPRO_RESOLUTION_1080p = 3
    GOPRO_RESOLUTION_1080p_SUPERVIEW = 11
    GOPRO_RESOLUTION_1440p = 4
    GOPRO_RESOLUTION_2_7k_16_9 = 6
    GOPRO_RESOLUTION_2_7k_17_9 = 5
    GOPRO_RESOLUTION_2_7k_4_3 = 7
    GOPRO_RESOLUTION_2_7k_SUPERVIEW = 12
    GOPRO_RESOLUTION_480p = 0
    GOPRO_RESOLUTION_4k_16_9 = 8
    GOPRO_RESOLUTION_4k_17_9 = 9
    GOPRO_RESOLUTION_4k_SUPERVIEW = 13
    GOPRO_RESOLUTION_720p = 1
    GOPRO_RESOLUTION_720p_SUPERVIEW = 10
    GOPRO_RESOLUTION_960p = 2
    GOPRO_RESOLUTION_ENUM_END = 14
    GOPRO_VIDEO_SETTINGS_FLAGS_ENUM_END = 2
    GOPRO_VIDEO_SETTINGS_TV_MODE = 1
    GPS_FIX_TYPE_2D_FIX = 2
    GPS_FIX_TYPE_3D_FIX = 3
    GPS_FIX_TYPE_DGPS = 4
    GPS_FIX_TYPE_ENUM_END = 9
    GPS_FIX_TYPE_NO_FIX = 1
    GPS_FIX_TYPE_NO_GPS = 0
    GPS_FIX_TYPE_PPP = 8
    GPS_FIX_TYPE_RTK_FIXED = 6
    GPS_FIX_TYPE_RTK_FLOAT = 5
    GPS_FIX_TYPE_STATIC = 7
    GPS_INPUT_IGNORE_FLAGS_ENUM_END = 129
    GPS_INPUT_IGNORE_FLAG_ALT = 1
    GPS_INPUT_IGNORE_FLAG_HDOP = 2
    GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY = 64
    GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY = 32
    GPS_INPUT_IGNORE_FLAG_VDOP = 4
    GPS_INPUT_IGNORE_FLAG_VEL_HORIZ = 8
    GPS_INPUT_IGNORE_FLAG_VEL_VERT = 16
    GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY = 128
    GRIPPER_ACTIONS_ENUM_END = 2
    GRIPPER_ACTION_GRAB = 1
    GRIPPER_ACTION_RELEASE = 0
    HEADER_LEN_V1 = 6
    HEADER_LEN_V2 = 10
    ICAROUS_FMS_STATE_APPROACH = 4
    ICAROUS_FMS_STATE_CLIMB = 2
    ICAROUS_FMS_STATE_CRUISE = 3
    ICAROUS_FMS_STATE_ENUM_END = 6
    ICAROUS_FMS_STATE_IDLE = 0
    ICAROUS_FMS_STATE_LAND = 5
    ICAROUS_FMS_STATE_TAKEOFF = 1
    ICAROUS_TRACK_BAND_TYPES_ENUM_END = 3
    ICAROUS_TRACK_BAND_TYPE_NEAR = 1
    ICAROUS_TRACK_BAND_TYPE_NONE = 0
    ICAROUS_TRACK_BAND_TYPE_RECOVERY = 2
    LANDING_TARGET_TYPE_ENUM_END = 4
    LANDING_TARGET_TYPE_LIGHT_BEACON = 0
    LANDING_TARGET_TYPE_RADIO_BEACON = 1
    LANDING_TARGET_TYPE_VISION_FIDUCIAL = 2
    LANDING_TARGET_TYPE_VISION_OTHER = 3
    LAND_IMMEDIATELY = 2
    LED_CONTROL_PATTERN_CUSTOM = 255
    LED_CONTROL_PATTERN_ENUM_END = 256
    LED_CONTROL_PATTERN_FIRMWAREUPDATE = 1
    LED_CONTROL_PATTERN_OFF = 0
    LIMITS_DISABLED = 1
    LIMITS_ENABLED = 2
    LIMITS_INIT = 0
    LIMITS_RECOVERED = 5
    LIMITS_RECOVERING = 4
    LIMITS_STATE_ENUM_END = 6
    LIMITS_TRIGGERED = 3
    LIMIT_ALTITUDE = 4
    LIMIT_GEOFENCE = 2
    LIMIT_GPSLOCK = 1
    LIMIT_MODULE_ENUM_END = 5
    MAG_CAL_BAD_ORIENTATION = 6
    MAG_CAL_BAD_RADIUS = 7
    MAG_CAL_FAILED = 5
    MAG_CAL_NOT_STARTED = 0
    MAG_CAL_RUNNING_STEP_ONE = 2
    MAG_CAL_RUNNING_STEP_TWO = 3
    MAG_CAL_STATUS_ENUM_END = 8
    MAG_CAL_SUCCESS = 4
    MAG_CAL_WAITING_TO_START = 1
    MAVLINK_DATA_STREAM_IMG_BMP = 2
    MAVLINK_DATA_STREAM_IMG_JPEG = 1
    MAVLINK_DATA_STREAM_IMG_PGM = 5
    MAVLINK_DATA_STREAM_IMG_PNG = 6
    MAVLINK_DATA_STREAM_IMG_RAW32U = 4
    MAVLINK_DATA_STREAM_IMG_RAW8U = 3
    MAVLINK_DATA_STREAM_TYPE_ENUM_END = 7
    MAVLINK_IFLAG_SIGNED = 1
    MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET = 140
    MAVLINK_MSG_ID_ADSB_VEHICLE = 246
    MAVLINK_MSG_ID_AHRS = 163
    MAVLINK_MSG_ID_AHRS2 = 178
    MAVLINK_MSG_ID_AHRS3 = 182
    MAVLINK_MSG_ID_AIRSPEED_AUTOCAL = 174
    MAVLINK_MSG_ID_ALTITUDE = 141
    MAVLINK_MSG_ID_AP_ADC = 153
    MAVLINK_MSG_ID_ATTITUDE = 30
    MAVLINK_MSG_ID_ATTITUDE_QUATERNION = 31
    MAVLINK_MSG_ID_ATTITUDE_QUATERNION_COV = 61
    MAVLINK_MSG_ID_ATTITUDE_TARGET = 83
    MAVLINK_MSG_ID_ATT_POS_MOCAP = 138
    MAVLINK_MSG_ID_AUTH_KEY = 7
    MAVLINK_MSG_ID_AUTOPILOT_VERSION = 148
    MAVLINK_MSG_ID_AUTOPILOT_VERSION_REQUEST = 183
    MAVLINK_MSG_ID_BAD_DATA = -1
    MAVLINK_MSG_ID_BATTERY2 = 181
    MAVLINK_MSG_ID_BATTERY_STATUS = 147
    MAVLINK_MSG_ID_CAMERA_FEEDBACK = 180
    MAVLINK_MSG_ID_CAMERA_STATUS = 179
    MAVLINK_MSG_ID_CAMERA_TRIGGER = 112
    MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL = 5
    MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK = 6
    MAVLINK_MSG_ID_COLLISION = 247
    MAVLINK_MSG_ID_COMMAND_ACK = 77
    MAVLINK_MSG_ID_COMMAND_INT = 75
    MAVLINK_MSG_ID_COMMAND_LONG = 76
    MAVLINK_MSG_ID_COMPASSMOT_STATUS = 177
    MAVLINK_MSG_ID_CONTROL_SYSTEM_STATE = 146
    MAVLINK_MSG_ID_DATA16 = 169
    MAVLINK_MSG_ID_DATA32 = 170
    MAVLINK_MSG_ID_DATA64 = 171
    MAVLINK_MSG_ID_DATA96 = 172
    MAVLINK_MSG_ID_DATA_STREAM = 67
    MAVLINK_MSG_ID_DATA_TRANSMISSION_HANDSHAKE = 130
    MAVLINK_MSG_ID_DEBUG = 254
    MAVLINK_MSG_ID_DEBUG_VECT = 250
    MAVLINK_MSG_ID_DEEPSTALL = 195
    MAVLINK_MSG_ID_DIGICAM_CONFIGURE = 154
    MAVLINK_MSG_ID_DIGICAM_CONTROL = 155
    MAVLINK_MSG_ID_DISTANCE_SENSOR = 132
    MAVLINK_MSG_ID_EFI_STATUS = 225
    MAVLINK_MSG_ID_EKF_STATUS_REPORT = 193
    MAVLINK_MSG_ID_ENCAPSULATED_DATA = 131
    MAVLINK_MSG_ID_ESTIMATOR_STATUS = 230
    MAVLINK_MSG_ID_EXTENDED_SYS_STATE = 245
    MAVLINK_MSG_ID_FENCE_FETCH_POINT = 161
    MAVLINK_MSG_ID_FENCE_POINT = 160
    MAVLINK_MSG_ID_FENCE_STATUS = 162
    MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL = 110
    MAVLINK_MSG_ID_FOLLOW_TARGET = 144
    MAVLINK_MSG_ID_GIMBAL_CONTROL = 201
    MAVLINK_MSG_ID_GIMBAL_REPORT = 200
    MAVLINK_MSG_ID_GIMBAL_TORQUE_CMD_REPORT = 214
    MAVLINK_MSG_ID_GLOBAL_POSITION_INT = 33
    MAVLINK_MSG_ID_GLOBAL_POSITION_INT_COV = 63
    MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE = 101
    MAVLINK_MSG_ID_GOPRO_GET_REQUEST = 216
    MAVLINK_MSG_ID_GOPRO_GET_RESPONSE = 217
    MAVLINK_MSG_ID_GOPRO_HEARTBEAT = 215
    MAVLINK_MSG_ID_GOPRO_SET_REQUEST = 218
    MAVLINK_MSG_ID_GOPRO_SET_RESPONSE = 219
    MAVLINK_MSG_ID_GPS2_RAW = 124
    MAVLINK_MSG_ID_GPS2_RTK = 128
    MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN = 49
    MAVLINK_MSG_ID_GPS_INJECT_DATA = 123
    MAVLINK_MSG_ID_GPS_INPUT = 232
    MAVLINK_MSG_ID_GPS_RAW_INT = 24
    MAVLINK_MSG_ID_GPS_RTCM_DATA = 233
    MAVLINK_MSG_ID_GPS_RTK = 127
    MAVLINK_MSG_ID_GPS_STATUS = 25
    MAVLINK_MSG_ID_HEARTBEAT = 0
    MAVLINK_MSG_ID_HIGHRES_IMU = 105
    MAVLINK_MSG_ID_HIGH_LATENCY = 234
    MAVLINK_MSG_ID_HIL_ACTUATOR_CONTROLS = 93
    MAVLINK_MSG_ID_HIL_CONTROLS = 91
    MAVLINK_MSG_ID_HIL_GPS = 113
    MAVLINK_MSG_ID_HIL_OPTICAL_FLOW = 114
    MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW = 92
    MAVLINK_MSG_ID_HIL_SENSOR = 107
    MAVLINK_MSG_ID_HIL_STATE = 90
    MAVLINK_MSG_ID_HIL_STATE_QUATERNION = 115
    MAVLINK_MSG_ID_HOME_POSITION = 242
    MAVLINK_MSG_ID_HWSTATUS = 165
    MAVLINK_MSG_ID_LANDING_TARGET = 149
    MAVLINK_MSG_ID_LED_CONTROL = 186
    MAVLINK_MSG_ID_LIMITS_STATUS = 167
    MAVLINK_MSG_ID_LOCAL_POSITION_NED = 32
    MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV = 64
    MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET = 89
    MAVLINK_MSG_ID_LOG_DATA = 120
    MAVLINK_MSG_ID_LOG_ENTRY = 118
    MAVLINK_MSG_ID_LOG_ERASE = 121
    MAVLINK_MSG_ID_LOG_REQUEST_DATA = 119
    MAVLINK_MSG_ID_LOG_REQUEST_END = 122
    MAVLINK_MSG_ID_LOG_REQUEST_LIST = 117
    MAVLINK_MSG_ID_MAG_CAL_PROGRESS = 191
    MAVLINK_MSG_ID_MAG_CAL_REPORT = 192
    MAVLINK_MSG_ID_MANUAL_CONTROL = 69
    MAVLINK_MSG_ID_MANUAL_SETPOINT = 81
    MAVLINK_MSG_ID_MEMINFO = 152
    MAVLINK_MSG_ID_MEMORY_VECT = 249
    MAVLINK_MSG_ID_MESSAGE_INTERVAL = 244
    MAVLINK_MSG_ID_MISSION_ACK = 47
    MAVLINK_MSG_ID_MISSION_CLEAR_ALL = 45
    MAVLINK_MSG_ID_MISSION_COUNT = 44
    MAVLINK_MSG_ID_MISSION_CURRENT = 42
    MAVLINK_MSG_ID_MISSION_ITEM = 39
    MAVLINK_MSG_ID_MISSION_ITEM_INT = 73
    MAVLINK_MSG_ID_MISSION_ITEM_REACHED = 46
    MAVLINK_MSG_ID_MISSION_REQUEST = 40
    MAVLINK_MSG_ID_MISSION_REQUEST_INT = 51
    MAVLINK_MSG_ID_MISSION_REQUEST_LIST = 43
    MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST = 37
    MAVLINK_MSG_ID_MISSION_SET_CURRENT = 41
    MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST = 38
    MAVLINK_MSG_ID_MOUNT_CONFIGURE = 156
    MAVLINK_MSG_ID_MOUNT_CONTROL = 157
    MAVLINK_MSG_ID_MOUNT_STATUS = 158
    MAVLINK_MSG_ID_NAMED_VALUE_FLOAT = 251
    MAVLINK_MSG_ID_NAMED_VALUE_INT = 252
    MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT = 62
    MAVLINK_MSG_ID_OPTICAL_FLOW = 100
    MAVLINK_MSG_ID_OPTICAL_FLOW_RAD = 106
    MAVLINK_MSG_ID_PARAM_MAP_RC = 50
    MAVLINK_MSG_ID_PARAM_REQUEST_LIST = 21
    MAVLINK_MSG_ID_PARAM_REQUEST_READ = 20
    MAVLINK_MSG_ID_PARAM_SET = 23
    MAVLINK_MSG_ID_PARAM_VALUE = 22
    MAVLINK_MSG_ID_PID_TUNING = 194
    MAVLINK_MSG_ID_PING = 4
    MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT = 87
    MAVLINK_MSG_ID_POSITION_TARGET_LOCAL_NED = 85
    MAVLINK_MSG_ID_POWER_STATUS = 125
    MAVLINK_MSG_ID_RADIO = 166
    MAVLINK_MSG_ID_RADIO_STATUS = 109
    MAVLINK_MSG_ID_RALLY_FETCH_POINT = 176
    MAVLINK_MSG_ID_RALLY_POINT = 175
    MAVLINK_MSG_ID_RANGEFINDER = 173
    MAVLINK_MSG_ID_RAW_IMU = 27
    MAVLINK_MSG_ID_RAW_PRESSURE = 28
    MAVLINK_MSG_ID_RC_CHANNELS = 65
    MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE = 70
    MAVLINK_MSG_ID_RC_CHANNELS_RAW = 35
    MAVLINK_MSG_ID_RC_CHANNELS_SCALED = 34
    MAVLINK_MSG_ID_REMOTE_LOG_BLOCK_STATUS = 185
    MAVLINK_MSG_ID_REMOTE_LOG_DATA_BLOCK = 184
    MAVLINK_MSG_ID_REQUEST_DATA_STREAM = 66
    MAVLINK_MSG_ID_RESOURCE_REQUEST = 142
    MAVLINK_MSG_ID_RPM = 226
    MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA = 55
    MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA = 54
    MAVLINK_MSG_ID_SCALED_IMU = 26
    MAVLINK_MSG_ID_SCALED_IMU2 = 116
    MAVLINK_MSG_ID_SCALED_IMU3 = 129
    MAVLINK_MSG_ID_SCALED_PRESSURE = 29
    MAVLINK_MSG_ID_SCALED_PRESSURE2 = 137
    MAVLINK_MSG_ID_SCALED_PRESSURE3 = 143
    MAVLINK_MSG_ID_SENSOR_OFFSETS = 150
    MAVLINK_MSG_ID_SERIAL_CONTROL = 126
    MAVLINK_MSG_ID_SERVO_OUTPUT_RAW = 36
    MAVLINK_MSG_ID_SET_ACTUATOR_CONTROL_TARGET = 139
    MAVLINK_MSG_ID_SET_ATTITUDE_TARGET = 82
    MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN = 48
    MAVLINK_MSG_ID_SET_HOME_POSITION = 243
    MAVLINK_MSG_ID_SET_MAG_OFFSETS = 151
    MAVLINK_MSG_ID_SET_MODE = 11
    MAVLINK_MSG_ID_SET_POSITION_TARGET_GLOBAL_INT = 86
    MAVLINK_MSG_ID_SET_POSITION_TARGET_LOCAL_NED = 84
    MAVLINK_MSG_ID_SIMSTATE = 164
    MAVLINK_MSG_ID_SIM_STATE = 108
    MAVLINK_MSG_ID_STATUSTEXT = 253
    MAVLINK_MSG_ID_SYSTEM_TIME = 2
    MAVLINK_MSG_ID_SYS_STATUS = 1
    MAVLINK_MSG_ID_TERRAIN_CHECK = 135
    MAVLINK_MSG_ID_TERRAIN_DATA = 134
    MAVLINK_MSG_ID_TERRAIN_REPORT = 136
    MAVLINK_MSG_ID_TERRAIN_REQUEST = 133
    MAVLINK_MSG_ID_TIMESYNC = 111
    MAVLINK_MSG_ID_V2_EXTENSION = 248
    MAVLINK_MSG_ID_VFR_HUD = 74
    MAVLINK_MSG_ID_VIBRATION = 241
    MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE = 104
    MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE = 102
    MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE = 103
    MAVLINK_MSG_ID_WIND = 168
    MAVLINK_MSG_ID_WIND_COV = 231
    MAVLINK_SIGNATURE_BLOCK_LEN = 13
    MAVLINK_TYPE_CHAR = 0
    MAVLINK_TYPE_DOUBLE = 10
    MAVLINK_TYPE_FLOAT = 9
    MAVLINK_TYPE_INT16_T = 4
    MAVLINK_TYPE_INT32_T = 6
    MAVLINK_TYPE_INT64_T = 8
    MAVLINK_TYPE_INT8_T = 2
    MAVLINK_TYPE_UINT16_T = 3
    MAVLINK_TYPE_UINT32_T = 5
    MAVLINK_TYPE_UINT64_T = 7
    MAVLINK_TYPE_UINT8_T = 1
    MAV_ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USE = 4
    MAV_ARM_AUTH_DENIED_REASON_BAD_WEATHER = 5
    MAV_ARM_AUTH_DENIED_REASON_ENUM_END = 6
    MAV_ARM_AUTH_DENIED_REASON_GENERIC = 0
    MAV_ARM_AUTH_DENIED_REASON_INVALID_WAYPOINT = 2
    MAV_ARM_AUTH_DENIED_REASON_NONE = 1
    MAV_ARM_AUTH_DENIED_REASON_TIMEOUT = 3
    MAV_AUTOPILOT_AEROB = 16
    MAV_AUTOPILOT_AIRRAILS = 19
    MAV_AUTOPILOT_ARDUPILOTMEGA = 3
    MAV_AUTOPILOT_ARMAZILA = 15
    MAV_AUTOPILOT_ASLUAV = 17
    MAV_AUTOPILOT_AUTOQUAD = 14
    MAV_AUTOPILOT_ENUM_END = 20
    MAV_AUTOPILOT_FP = 11
    MAV_AUTOPILOT_GENERIC = 0
    MAV_AUTOPILOT_GENERIC_MISSION_FULL = 7
    MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY = 6
    MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY = 5
    MAV_AUTOPILOT_INVALID = 8
    MAV_AUTOPILOT_OPENPILOT = 4
    MAV_AUTOPILOT_PPZ = 9
    MAV_AUTOPILOT_PX4 = 12
    MAV_AUTOPILOT_RESERVED = 1
    MAV_AUTOPILOT_SLUGS = 2
    MAV_AUTOPILOT_SMACCMPILOT = 13
    MAV_AUTOPILOT_SMARTAP = 18
    MAV_AUTOPILOT_UDB = 10
    MAV_BATTERY_CHARGE_STATE_CHARGING = 7
    MAV_BATTERY_CHARGE_STATE_CRITICAL = 3
    MAV_BATTERY_CHARGE_STATE_EMERGENCY = 4
    MAV_BATTERY_CHARGE_STATE_ENUM_END = 8
    MAV_BATTERY_CHARGE_STATE_FAILED = 5
    MAV_BATTERY_CHARGE_STATE_LOW = 2
    MAV_BATTERY_CHARGE_STATE_OK = 1
    MAV_BATTERY_CHARGE_STATE_UNDEFINED = 0
    MAV_BATTERY_CHARGE_STATE_UNHEALTHY = 6
    MAV_BATTERY_FUNCTION_ALL = 1
    MAV_BATTERY_FUNCTION_AVIONICS = 3
    MAV_BATTERY_FUNCTION_ENUM_END = 5
    MAV_BATTERY_FUNCTION_PROPULSION = 2
    MAV_BATTERY_FUNCTION_UNKNOWN = 0
    MAV_BATTERY_TYPE_ENUM_END = 5
    MAV_BATTERY_TYPE_LIFE = 2
    MAV_BATTERY_TYPE_LION = 3
    MAV_BATTERY_TYPE_LIPO = 1
    MAV_BATTERY_TYPE_NIMH = 4
    MAV_BATTERY_TYPE_PAYLOAD = 4
    MAV_BATTERY_TYPE_UNKNOWN = 0
    MAV_CMD_ACCELCAL_VEHICLE_POS = 42429
    MAV_CMD_ACK_ENUM_END = 10
    MAV_CMD_ACK_ERR_ACCESS_DENIED = 3
    MAV_CMD_ACK_ERR_COORDINATES_OUT_OF_RANGE = 6
    MAV_CMD_ACK_ERR_COORDINATE_FRAME_NOT_SUPPORTED = 5
    MAV_CMD_ACK_ERR_FAIL = 2
    MAV_CMD_ACK_ERR_NOT_SUPPORTED = 4
    MAV_CMD_ACK_ERR_X_LAT_OUT_OF_RANGE = 7
    MAV_CMD_ACK_ERR_Y_LON_OUT_OF_RANGE = 8
    MAV_CMD_ACK_ERR_Z_ALT_OUT_OF_RANGE = 9
    MAV_CMD_ACK_OK = 1
    MAV_CMD_AIRFRAME_CONFIGURATION = 2520
    MAV_CMD_ARM_AUTHORIZATION_REQUEST = 3001
    MAV_CMD_BATTERY_RESET = 42651
    MAV_CMD_COMPONENT_ARM_DISARM = 400
    MAV_CMD_CONDITION_CHANGE_ALT = 113
    MAV_CMD_CONDITION_DELAY = 112
    MAV_CMD_CONDITION_DISTANCE = 114
    MAV_CMD_CONDITION_LAST = 159
    MAV_CMD_CONDITION_YAW = 115
    MAV_CMD_CONTROL_HIGH_LATENCY = 2600
    MAV_CMD_DEBUG_TRAP = 42700
    MAV_CMD_DO_ACCEPT_MAG_CAL = 42425
    MAV_CMD_DO_AUTOTUNE_ENABLE = 212
    MAV_CMD_DO_CANCEL_MAG_CAL = 42426
    MAV_CMD_DO_CHANGE_ALTITUDE = 186
    MAV_CMD_DO_CHANGE_SPEED = 178
    MAV_CMD_DO_CONTROL_VIDEO = 200
    MAV_CMD_DO_DIGICAM_CONFIGURE = 202
    MAV_CMD_DO_DIGICAM_CONTROL = 203
    MAV_CMD_DO_ENGINE_CONTROL = 223
    MAV_CMD_DO_FENCE_ENABLE = 207
    MAV_CMD_DO_FLIGHTTERMINATION = 185
    MAV_CMD_DO_FOLLOW = 32
    MAV_CMD_DO_FOLLOW_REPOSITION = 33
    MAV_CMD_DO_GO_AROUND = 191
    MAV_CMD_DO_GRIPPER = 211
    MAV_CMD_DO_GUIDED_LIMITS = 222
    MAV_CMD_DO_GUIDED_MASTER = 221
    MAV_CMD_DO_INVERTED_FLIGHT = 210
    MAV_CMD_DO_JUMP = 177
    MAV_CMD_DO_JUMP_TAG = 601
    MAV_CMD_DO_LAND_START = 189
    MAV_CMD_DO_LAST = 240
    MAV_CMD_DO_MOTOR_TEST = 209
    MAV_CMD_DO_MOUNT_CONFIGURE = 204
    MAV_CMD_DO_MOUNT_CONTROL = 205
    MAV_CMD_DO_MOUNT_CONTROL_QUAT = 220
    MAV_CMD_DO_PARACHUTE = 208
    MAV_CMD_DO_PAUSE_CONTINUE = 193
    MAV_CMD_DO_RALLY_LAND = 190
    MAV_CMD_DO_REPEAT_RELAY = 182
    MAV_CMD_DO_REPEAT_SERVO = 184
    MAV_CMD_DO_REPOSITION = 192
    MAV_CMD_DO_SEND_BANNER = 42428
    MAV_CMD_DO_SET_CAM_TRIGG_DIST = 206
    MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL = 214
    MAV_CMD_DO_SET_HOME = 179
    MAV_CMD_DO_SET_MISSION_CURRENT = 224
    MAV_CMD_DO_SET_MODE = 176
    MAV_CMD_DO_SET_PARAMETER = 180
    MAV_CMD_DO_SET_RELAY = 181
    MAV_CMD_DO_SET_RESUME_REPEAT_DIST = 215
    MAV_CMD_DO_SET_REVERSE = 194
    MAV_CMD_DO_SET_ROI = 201
    MAV_CMD_DO_SET_ROI_LOCATION = 195
    MAV_CMD_DO_SET_ROI_NONE = 197
    MAV_CMD_DO_SET_ROI_SYSID = 198
    MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET = 196
    MAV_CMD_DO_SET_SERVO = 183
    MAV_CMD_DO_START_MAG_CAL = 42424
    MAV_CMD_DO_TRIGGER_CONTROL = 2003
    MAV_CMD_DO_VTOL_TRANSITION = 3000
    MAV_CMD_DO_WINCH = 42600
    MAV_CMD_ENUM_END = 42702
    MAV_CMD_FIXED_MAG_CAL = 42004
    MAV_CMD_FIXED_MAG_CAL_FIELD = 42005
    MAV_CMD_FIXED_MAG_CAL_YAW = 42006
    MAV_CMD_FLASH_BOOTLOADER = 42650
    MAV_CMD_GET_HOME_POSITION = 410
    MAV_CMD_GET_MESSAGE_INTERVAL = 510
    MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS = 42502
    MAV_CMD_GIMBAL_FULL_RESET = 42505
    MAV_CMD_GIMBAL_REQUEST_AXIS_CALIBRATION = 42503
    MAV_CMD_GIMBAL_RESET = 42501
    MAV_CMD_IMAGE_START_CAPTURE = 2000
    MAV_CMD_IMAGE_STOP_CAPTURE = 2001
    MAV_CMD_JUMP_TAG = 600
    MAV_CMD_LOGGING_START = 2510
    MAV_CMD_LOGGING_STOP = 2511
    MAV_CMD_MISSION_START = 300
    MAV_CMD_NAV_ALTITUDE_WAIT = 83
    MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT = 30
    MAV_CMD_NAV_DELAY = 93
    MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION = 5004
    MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION = 5003
    MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION = 5002
    MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION = 5001
    MAV_CMD_NAV_FENCE_RETURN_POINT = 5000
    MAV_CMD_NAV_FOLLOW = 25
    MAV_CMD_NAV_GUIDED_ENABLE = 92
    MAV_CMD_NAV_LAND = 21
    MAV_CMD_NAV_LAND_LOCAL = 23
    MAV_CMD_NAV_LAST = 95
    MAV_CMD_NAV_LOITER_TIME = 19
    MAV_CMD_NAV_LOITER_TO_ALT = 31
    MAV_CMD_NAV_LOITER_TURNS = 18
    MAV_CMD_NAV_LOITER_UNLIM = 17
    MAV_CMD_NAV_PATHPLANNING = 81
    MAV_CMD_NAV_PAYLOAD_PLACE = 94
    MAV_CMD_NAV_RALLY_POINT = 5100
    MAV_CMD_NAV_RETURN_TO_LAUNCH = 20
    MAV_CMD_NAV_ROI = 80
    MAV_CMD_NAV_SET_YAW_SPEED = 213
    MAV_CMD_NAV_SPLINE_WAYPOINT = 82
    MAV_CMD_NAV_TAKEOFF = 22
    MAV_CMD_NAV_TAKEOFF_LOCAL = 24
    MAV_CMD_NAV_VTOL_LAND = 85
    MAV_CMD_NAV_VTOL_TAKEOFF = 84
    MAV_CMD_NAV_WAYPOINT = 16
    MAV_CMD_OVERRIDE_GOTO = 252
    MAV_CMD_PANORAMA_CREATE = 2800
    MAV_CMD_PAYLOAD_CONTROL_DEPLOY = 30002
    MAV_CMD_PAYLOAD_PREPARE_DEPLOY = 30001
    MAV_CMD_POWER_OFF_INITIATED = 42000
    MAV_CMD_PREFLIGHT_CALIBRATION = 241
    MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN = 246
    MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS = 242
    MAV_CMD_PREFLIGHT_STORAGE = 245
    MAV_CMD_PREFLIGHT_UAVCAN = 243
    MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES = 520
    MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS = 527
    MAV_CMD_REQUEST_CAMERA_INFORMATION = 521
    MAV_CMD_REQUEST_CAMERA_SETTINGS = 522
    MAV_CMD_REQUEST_FLIGHT_INFORMATION = 528
    MAV_CMD_REQUEST_MESSAGE = 512
    MAV_CMD_REQUEST_STORAGE_INFORMATION = 525
    MAV_CMD_RESET_CAMERA_SETTINGS = 529
    MAV_CMD_SCRIPTING = 42701
    MAV_CMD_SET_CAMERA_MODE = 530
    MAV_CMD_SET_FACTORY_TEST_MODE = 42427
    MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE = 4001
    MAV_CMD_SET_GUIDED_SUBMODE_STANDARD = 4000
    MAV_CMD_SET_MESSAGE_INTERVAL = 511
    MAV_CMD_SOLO_BTN_FLY_CLICK = 42001
    MAV_CMD_SOLO_BTN_FLY_HOLD = 42002
    MAV_CMD_SOLO_BTN_PAUSE_CLICK = 42003
    MAV_CMD_SPATIAL_USER_1 = 31005
    MAV_CMD_SPATIAL_USER_2 = 31006
    MAV_CMD_SPATIAL_USER_3 = 31007
    MAV_CMD_SPATIAL_USER_4 = 31008
    MAV_CMD_SPATIAL_USER_5 = 31009
    MAV_CMD_START_RX_PAIR = 500
    MAV_CMD_STORAGE_FORMAT = 526
    MAV_CMD_UAVCAN_GET_NODE_INFO = 5200
    MAV_CMD_USER_1 = 31010
    MAV_CMD_USER_2 = 31011
    MAV_CMD_USER_3 = 31012
    MAV_CMD_USER_4 = 31013
    MAV_CMD_USER_5 = 31014
    MAV_CMD_VIDEO_START_CAPTURE = 2500
    MAV_CMD_VIDEO_STOP_CAPTURE = 2501
    MAV_CMD_WAYPOINT_USER_1 = 31000
    MAV_CMD_WAYPOINT_USER_2 = 31001
    MAV_CMD_WAYPOINT_USER_3 = 31002
    MAV_CMD_WAYPOINT_USER_4 = 31003
    MAV_CMD_WAYPOINT_USER_5 = 31004
    MAV_COLLISION_ACTION_ASCEND_OR_DESCEND = 2
    MAV_COLLISION_ACTION_ENUM_END = 7
    MAV_COLLISION_ACTION_HOVER = 6
    MAV_COLLISION_ACTION_MOVE_HORIZONTALLY = 3
    MAV_COLLISION_ACTION_MOVE_PERPENDICULAR = 4
    MAV_COLLISION_ACTION_NONE = 0
    MAV_COLLISION_ACTION_REPORT = 1
    MAV_COLLISION_ACTION_RTL = 5
    MAV_COLLISION_SRC_ADSB = 0
    MAV_COLLISION_SRC_ENUM_END = 2
    MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT = 1
    MAV_COLLISION_THREAT_LEVEL_ENUM_END = 3
    MAV_COLLISION_THREAT_LEVEL_HIGH = 2
    MAV_COLLISION_THREAT_LEVEL_LOW = 1
    MAV_COLLISION_THREAT_LEVEL_NONE = 0
    MAV_COMPONENT_ENUM_END = 251
    MAV_COMP_ID_ADSB = 156
    MAV_COMP_ID_ALL = 0
    MAV_COMP_ID_AUTOPILOT1 = 1
    MAV_COMP_ID_CAMERA = 100
    MAV_COMP_ID_CAMERA2 = 101
    MAV_COMP_ID_CAMERA3 = 102
    MAV_COMP_ID_CAMERA4 = 103
    MAV_COMP_ID_CAMERA5 = 104
    MAV_COMP_ID_CAMERA6 = 105
    MAV_COMP_ID_FLARM = 160
    MAV_COMP_ID_GIMBAL = 154
    MAV_COMP_ID_GIMBAL2 = 171
    MAV_COMP_ID_GIMBAL3 = 172
    MAV_COMP_ID_GIMBAL4 = 173
    MAV_COMP_ID_GIMBAL5 = 174
    MAV_COMP_ID_GIMBAL6 = 175
    MAV_COMP_ID_GPS = 220
    MAV_COMP_ID_GPS2 = 221
    MAV_COMP_ID_IMU = 200
    MAV_COMP_ID_IMU_2 = 201
    MAV_COMP_ID_IMU_3 = 202
    MAV_COMP_ID_LOG = 155
    MAV_COMP_ID_MISSIONPLANNER = 190
    MAV_COMP_ID_OBSTACLE_AVOIDANCE = 196
    MAV_COMP_ID_OSD = 157
    MAV_COMP_ID_PATHPLANNER = 195
    MAV_COMP_ID_PERIPHERAL = 158
    MAV_COMP_ID_QX1_GIMBAL = 159
    MAV_COMP_ID_SERVO1 = 140
    MAV_COMP_ID_SERVO10 = 149
    MAV_COMP_ID_SERVO11 = 150
    MAV_COMP_ID_SERVO12 = 151
    MAV_COMP_ID_SERVO13 = 152
    MAV_COMP_ID_SERVO14 = 153
    MAV_COMP_ID_SERVO2 = 141
    MAV_COMP_ID_SERVO3 = 142
    MAV_COMP_ID_SERVO4 = 143
    MAV_COMP_ID_SERVO5 = 144
    MAV_COMP_ID_SERVO6 = 145
    MAV_COMP_ID_SERVO7 = 146
    MAV_COMP_ID_SERVO8 = 147
    MAV_COMP_ID_SERVO9 = 148
    MAV_COMP_ID_SYSTEM_CONTROL = 250
    MAV_COMP_ID_UART_BRIDGE = 241
    MAV_COMP_ID_UDP_BRIDGE = 240
    MAV_COMP_ID_USE16 = 40
    MAV_COMP_ID_USER1 = 25
    MAV_COMP_ID_USER10 = 34
    MAV_COMP_ID_USER11 = 35
    MAV_COMP_ID_USER12 = 36
    MAV_COMP_ID_USER13 = 37
    MAV_COMP_ID_USER14 = 38
    MAV_COMP_ID_USER15 = 39
    MAV_COMP_ID_USER17 = 41
    MAV_COMP_ID_USER18 = 42
    MAV_COMP_ID_USER19 = 43
    MAV_COMP_ID_USER2 = 26
    MAV_COMP_ID_USER20 = 44
    MAV_COMP_ID_USER21 = 45
    MAV_COMP_ID_USER22 = 46
    MAV_COMP_ID_USER23 = 47
    MAV_COMP_ID_USER24 = 48
    MAV_COMP_ID_USER25 = 49
    MAV_COMP_ID_USER26 = 50
    MAV_COMP_ID_USER27 = 51
    MAV_COMP_ID_USER28 = 52
    MAV_COMP_ID_USER29 = 53
    MAV_COMP_ID_USER3 = 27
    MAV_COMP_ID_USER30 = 54
    MAV_COMP_ID_USER31 = 55
    MAV_COMP_ID_USER32 = 56
    MAV_COMP_ID_USER33 = 57
    MAV_COMP_ID_USER34 = 58
    MAV_COMP_ID_USER35 = 59
    MAV_COMP_ID_USER36 = 60
    MAV_COMP_ID_USER37 = 61
    MAV_COMP_ID_USER38 = 62
    MAV_COMP_ID_USER39 = 63
    MAV_COMP_ID_USER4 = 28
    MAV_COMP_ID_USER40 = 64
    MAV_COMP_ID_USER41 = 65
    MAV_COMP_ID_USER42 = 66
    MAV_COMP_ID_USER43 = 67
    MAV_COMP_ID_USER44 = 68
    MAV_COMP_ID_USER45 = 69
    MAV_COMP_ID_USER46 = 70
    MAV_COMP_ID_USER47 = 71
    MAV_COMP_ID_USER48 = 72
    MAV_COMP_ID_USER49 = 73
    MAV_COMP_ID_USER5 = 29
    MAV_COMP_ID_USER50 = 74
    MAV_COMP_ID_USER51 = 75
    MAV_COMP_ID_USER52 = 76
    MAV_COMP_ID_USER53 = 77
    MAV_COMP_ID_USER54 = 78
    MAV_COMP_ID_USER55 = 79
    MAV_COMP_ID_USER56 = 80
    MAV_COMP_ID_USER57 = 81
    MAV_COMP_ID_USER58 = 82
    MAV_COMP_ID_USER59 = 83
    MAV_COMP_ID_USER6 = 30
    MAV_COMP_ID_USER60 = 84
    MAV_COMP_ID_USER61 = 85
    MAV_COMP_ID_USER62 = 86
    MAV_COMP_ID_USER63 = 87
    MAV_COMP_ID_USER64 = 88
    MAV_COMP_ID_USER65 = 89
    MAV_COMP_ID_USER66 = 90
    MAV_COMP_ID_USER67 = 91
    MAV_COMP_ID_USER68 = 92
    MAV_COMP_ID_USER69 = 93
    MAV_COMP_ID_USER7 = 31
    MAV_COMP_ID_USER70 = 94
    MAV_COMP_ID_USER71 = 95
    MAV_COMP_ID_USER72 = 96
    MAV_COMP_ID_USER73 = 97
    MAV_COMP_ID_USER74 = 98
    MAV_COMP_ID_USER75 = 99
    MAV_COMP_ID_USER8 = 32
    MAV_COMP_ID_USER9 = 33
    MAV_COMP_ID_VISUAL_INERTIAL_ODOMETRY = 197
    MAV_DATA_STREAM_ALL = 0
    MAV_DATA_STREAM_ENUM_END = 13
    MAV_DATA_STREAM_EXTENDED_STATUS = 2
    MAV_DATA_STREAM_EXTRA1 = 10
    MAV_DATA_STREAM_EXTRA2 = 11
    MAV_DATA_STREAM_EXTRA3 = 12
    MAV_DATA_STREAM_POSITION = 6
    MAV_DATA_STREAM_RAW_CONTROLLER = 4
    MAV_DATA_STREAM_RAW_SENSORS = 1
    MAV_DATA_STREAM_RC_CHANNELS = 3
    MAV_DISTANCE_SENSOR_ENUM_END = 5
    MAV_DISTANCE_SENSOR_INFRARED = 2
    MAV_DISTANCE_SENSOR_LASER = 0
    MAV_DISTANCE_SENSOR_RADAR = 3
    MAV_DISTANCE_SENSOR_ULTRASOUND = 1
    MAV_DISTANCE_SENSOR_UNKNOWN = 4
    MAV_DO_REPOSITION_FLAGS_CHANGE_MODE = 1
    MAV_DO_REPOSITION_FLAGS_ENUM_END = 2
    MAV_ESTIMATOR_TYPE_AUTOPILOT = 8
    MAV_ESTIMATOR_TYPE_ENUM_END = 9
    MAV_ESTIMATOR_TYPE_GPS = 4
    MAV_ESTIMATOR_TYPE_GPS_INS = 5
    MAV_ESTIMATOR_TYPE_LIDAR = 7
    MAV_ESTIMATOR_TYPE_MOCAP = 6
    MAV_ESTIMATOR_TYPE_NAIVE = 1
    MAV_ESTIMATOR_TYPE_UNKNOWN = 0
    MAV_ESTIMATOR_TYPE_VIO = 3
    MAV_ESTIMATOR_TYPE_VISION = 2
    MAV_FRAME_BODY_FLU = 13
    MAV_FRAME_BODY_FRD = 12
    MAV_FRAME_BODY_NED = 8
    MAV_FRAME_BODY_OFFSET_NED = 9
    MAV_FRAME_ENUM_END = 22
    MAV_FRAME_ESTIM_ENU = 19
    MAV_FRAME_ESTIM_NED = 18
    MAV_FRAME_GLOBAL = 0
    MAV_FRAME_GLOBAL_INT = 5
    MAV_FRAME_GLOBAL_RELATIVE_ALT = 3
    MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6
    MAV_FRAME_GLOBAL_TERRAIN_ALT = 10
    MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11
    MAV_FRAME_LOCAL_ENU = 4
    MAV_FRAME_LOCAL_FLU = 21
    MAV_FRAME_LOCAL_FRD = 20
    MAV_FRAME_LOCAL_NED = 1
    MAV_FRAME_LOCAL_OFFSET_NED = 7
    MAV_FRAME_MISSION = 2
    MAV_FRAME_MOCAP_ENU = 15
    MAV_FRAME_MOCAP_NED = 14
    MAV_FRAME_VISION_ENU = 17
    MAV_FRAME_VISION_NED = 16
    MAV_GOTO_DO_CONTINUE = 1
    MAV_GOTO_DO_HOLD = 0
    MAV_GOTO_ENUM_END = 4
    MAV_GOTO_HOLD_AT_CURRENT_POSITION = 2
    MAV_GOTO_HOLD_AT_SPECIFIED_POSITION = 3
    MAV_LANDED_STATE_ENUM_END = 5
    MAV_LANDED_STATE_IN_AIR = 2
    MAV_LANDED_STATE_LANDING = 4
    MAV_LANDED_STATE_ON_GROUND = 1
    MAV_LANDED_STATE_TAKEOFF = 3
    MAV_LANDED_STATE_UNDEFINED = 0
    MAV_MISSION_ACCEPTED = 0
    MAV_MISSION_DENIED = 14
    MAV_MISSION_ERROR = 1
    MAV_MISSION_INVALID = 5
    MAV_MISSION_INVALID_PARAM1 = 6
    MAV_MISSION_INVALID_PARAM2 = 7
    MAV_MISSION_INVALID_PARAM3 = 8
    MAV_MISSION_INVALID_PARAM4 = 9
    MAV_MISSION_INVALID_PARAM5_X = 10
    MAV_MISSION_INVALID_PARAM6_Y = 11
    MAV_MISSION_INVALID_PARAM7 = 12
    MAV_MISSION_INVALID_SEQUENCE = 13
    MAV_MISSION_NO_SPACE = 4
    MAV_MISSION_OPERATION_CANCELLED = 15
    MAV_MISSION_RESULT_ENUM_END = 16
    MAV_MISSION_TYPE_ALL = 255
    MAV_MISSION_TYPE_ENUM_END = 256
    MAV_MISSION_TYPE_FENCE = 1
    MAV_MISSION_TYPE_MISSION = 0
    MAV_MISSION_TYPE_RALLY = 2
    MAV_MISSION_UNSUPPORTED = 3
    MAV_MISSION_UNSUPPORTED_FRAME = 2
    MAV_MODE_AUTO_ARMED = 220
    MAV_MODE_AUTO_DISARMED = 92
    MAV_MODE_ENUM_END = 221
    MAV_MODE_FLAG_AUTO_ENABLED = 4
    MAV_MODE_FLAG_CUSTOM_MODE_ENABLED = 1
    MAV_MODE_FLAG_DECODE_POSITION_AUTO = 4
    MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE = 1
    MAV_MODE_FLAG_DECODE_POSITION_ENUM_END = 129
    MAV_MODE_FLAG_DECODE_POSITION_GUIDED = 8
    MAV_MODE_FLAG_DECODE_POSITION_HIL = 32
    MAV_MODE_FLAG_DECODE_POSITION_MANUAL = 64
    MAV_MODE_FLAG_DECODE_POSITION_SAFETY = 128
    MAV_MODE_FLAG_DECODE_POSITION_STABILIZE = 16
    MAV_MODE_FLAG_DECODE_POSITION_TEST = 2
    MAV_MODE_FLAG_ENUM_END = 129
    MAV_MODE_FLAG_GUIDED_ENABLED = 8
    MAV_MODE_FLAG_HIL_ENABLED = 32
    MAV_MODE_FLAG_MANUAL_INPUT_ENABLED = 64
    MAV_MODE_FLAG_SAFETY_ARMED = 128
    MAV_MODE_FLAG_STABILIZE_ENABLED = 16
    MAV_MODE_FLAG_TEST_ENABLED = 2
    MAV_MODE_GIMBAL_ACTIVE = 5
    MAV_MODE_GIMBAL_CALIBRATING_PITCH = 1
    MAV_MODE_GIMBAL_CALIBRATING_ROLL = 2
    MAV_MODE_GIMBAL_CALIBRATING_YAW = 3
    MAV_MODE_GIMBAL_ENUM_END = 7
    MAV_MODE_GIMBAL_INITIALIZED = 4
    MAV_MODE_GIMBAL_RATE_CMD_TIMEOUT = 6
    MAV_MODE_GIMBAL_UNINITIALIZED = 0
    MAV_MODE_GUIDED_ARMED = 216
    MAV_MODE_GUIDED_DISARMED = 88
    MAV_MODE_MANUAL_ARMED = 192
    MAV_MODE_MANUAL_DISARMED = 64
    MAV_MODE_PREFLIGHT = 0
    MAV_MODE_STABILIZE_ARMED = 208
    MAV_MODE_STABILIZE_DISARMED = 80
    MAV_MODE_TEST_ARMED = 194
    MAV_MODE_TEST_DISARMED = 66
    MAV_MOUNT_MODE_ENUM_END = 6
    MAV_MOUNT_MODE_GPS_POINT = 4
    MAV_MOUNT_MODE_MAVLINK_TARGETING = 2
    MAV_MOUNT_MODE_NEUTRAL = 1
    MAV_MOUNT_MODE_RC_TARGETING = 3
    MAV_MOUNT_MODE_RETRACT = 0
    MAV_MOUNT_MODE_SYSID_TARGET = 5
    MAV_PARAM_TYPE_ENUM_END = 11
    MAV_PARAM_TYPE_INT16 = 4
    MAV_PARAM_TYPE_INT32 = 6
    MAV_PARAM_TYPE_INT64 = 8
    MAV_PARAM_TYPE_INT8 = 2
    MAV_PARAM_TYPE_REAL32 = 9
    MAV_PARAM_TYPE_REAL64 = 10
    MAV_PARAM_TYPE_UINT16 = 3
    MAV_PARAM_TYPE_UINT32 = 5
    MAV_PARAM_TYPE_UINT64 = 7
    MAV_PARAM_TYPE_UINT8 = 1
    MAV_POWER_STATUS_BRICK_VALID = 1
    MAV_POWER_STATUS_CHANGED = 32
    MAV_POWER_STATUS_ENUM_END = 33
    MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT = 16
    MAV_POWER_STATUS_PERIPH_OVERCURRENT = 8
    MAV_POWER_STATUS_SERVO_VALID = 2
    MAV_POWER_STATUS_USB_CONNECTED = 4
    MAV_PROTOCOL_CAPABILITY_COMMAND_INT = 8
    MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION = 4096
    MAV_PROTOCOL_CAPABILITY_ENUM_END = 65537
    MAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION = 65536
    MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION = 2048
    MAV_PROTOCOL_CAPABILITY_FTP = 32
    MAV_PROTOCOL_CAPABILITY_MAVLINK2 = 8192
    MAV_PROTOCOL_CAPABILITY_MISSION_FENCE = 16384
    MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT = 1
    MAV_PROTOCOL_CAPABILITY_MISSION_INT = 4
    MAV_PROTOCOL_CAPABILITY_MISSION_RALLY = 32768
    MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT = 2
    MAV_PROTOCOL_CAPABILITY_PARAM_UNION = 16
    MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET = 1024
    MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET = 64
    MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT = 256
    MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED = 128
    MAV_PROTOCOL_CAPABILITY_TERRAIN = 512
    MAV_REMOTE_LOG_DATA_BLOCK_ACK = 1
    MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS_ENUM_END = 2147483647
    MAV_REMOTE_LOG_DATA_BLOCK_NACK = 0
    MAV_REMOTE_LOG_DATA_BLOCK_START = 2147483646
    MAV_REMOTE_LOG_DATA_BLOCK_STATUSES_ENUM_END = 2
    MAV_REMOTE_LOG_DATA_BLOCK_STOP = 2147483645
    MAV_RESULT_ACCEPTED = 0
    MAV_RESULT_DENIED = 2
    MAV_RESULT_ENUM_END = 6
    MAV_RESULT_FAILED = 4
    MAV_RESULT_IN_PROGRESS = 5
    MAV_RESULT_TEMPORARILY_REJECTED = 1
    MAV_RESULT_UNSUPPORTED = 3
    MAV_ROI_ENUM_END = 5
    MAV_ROI_LOCATION = 3
    MAV_ROI_NONE = 0
    MAV_ROI_TARGET = 4
    MAV_ROI_WPINDEX = 2
    MAV_ROI_WPNEXT = 1
    MAV_SENSOR_ORIENTATION_ENUM_END = 101
    MAV_SENSOR_ROTATION_CUSTOM = 100
    MAV_SENSOR_ROTATION_NONE = 0
    MAV_SENSOR_ROTATION_PITCH_180 = 12
    MAV_SENSOR_ROTATION_PITCH_180_YAW_270 = 27
    MAV_SENSOR_ROTATION_PITCH_180_YAW_90 = 26
    MAV_SENSOR_ROTATION_PITCH_270 = 25
    MAV_SENSOR_ROTATION_PITCH_315 = 39
    MAV_SENSOR_ROTATION_PITCH_90 = 24
    MAV_SENSOR_ROTATION_ROLL_180 = 8
    MAV_SENSOR_ROTATION_ROLL_180_PITCH_270 = 34
    MAV_SENSOR_ROTATION_ROLL_180_PITCH_90 = 29
    MAV_SENSOR_ROTATION_ROLL_180_YAW_135 = 11
    MAV_SENSOR_ROTATION_ROLL_180_YAW_225 = 13
    MAV_SENSOR_ROTATION_ROLL_180_YAW_270 = 14
    MAV_SENSOR_ROTATION_ROLL_180_YAW_315 = 15
    MAV_SENSOR_ROTATION_ROLL_180_YAW_45 = 9
    MAV_SENSOR_ROTATION_ROLL_180_YAW_90 = 10
    MAV_SENSOR_ROTATION_ROLL_270 = 20
    MAV_SENSOR_ROTATION_ROLL_270_PITCH_180 = 32
    MAV_SENSOR_ROTATION_ROLL_270_PITCH_270 = 35
    MAV_SENSOR_ROTATION_ROLL_270_PITCH_90 = 30
    MAV_SENSOR_ROTATION_ROLL_270_YAW_135 = 23
    MAV_SENSOR_ROTATION_ROLL_270_YAW_45 = 21
    MAV_SENSOR_ROTATION_ROLL_270_YAW_90 = 22
    MAV_SENSOR_ROTATION_ROLL_90 = 16
    MAV_SENSOR_ROTATION_ROLL_90_PITCH_180 = 31
    MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90 = 36
    MAV_SENSOR_ROTATION_ROLL_90_PITCH_270 = 33
    MAV_SENSOR_ROTATION_ROLL_90_PITCH_315 = 40
    MAV_SENSOR_ROTATION_ROLL_90_PITCH_68_YAW_293 = 38
    MAV_SENSOR_ROTATION_ROLL_90_PITCH_90 = 28
    MAV_SENSOR_ROTATION_ROLL_90_YAW_135 = 19
    MAV_SENSOR_ROTATION_ROLL_90_YAW_270 = 37
    MAV_SENSOR_ROTATION_ROLL_90_YAW_45 = 17
    MAV_SENSOR_ROTATION_ROLL_90_YAW_90 = 18
    MAV_SENSOR_ROTATION_YAW_135 = 3
    MAV_SENSOR_ROTATION_YAW_180 = 4
    MAV_SENSOR_ROTATION_YAW_225 = 5
    MAV_SENSOR_ROTATION_YAW_270 = 6
    MAV_SENSOR_ROTATION_YAW_315 = 7
    MAV_SENSOR_ROTATION_YAW_45 = 1
    MAV_SENSOR_ROTATION_YAW_90 = 2
    MAV_SEVERITY_ALERT = 1
    MAV_SEVERITY_CRITICAL = 2
    MAV_SEVERITY_DEBUG = 7
    MAV_SEVERITY_EMERGENCY = 0
    MAV_SEVERITY_ENUM_END = 8
    MAV_SEVERITY_ERROR = 3
    MAV_SEVERITY_INFO = 6
    MAV_SEVERITY_NOTICE = 5
    MAV_SEVERITY_WARNING = 4
    MAV_STATE_ACTIVE = 4
    MAV_STATE_BOOT = 1
    MAV_STATE_CALIBRATING = 2
    MAV_STATE_CRITICAL = 5
    MAV_STATE_EMERGENCY = 6
    MAV_STATE_ENUM_END = 9
    MAV_STATE_FLIGHT_TERMINATION = 8
    MAV_STATE_POWEROFF = 7
    MAV_STATE_STANDBY = 3
    MAV_STATE_UNINIT = 0
    MAV_SYS_STATUS_AHRS = 2097152
    MAV_SYS_STATUS_GEOFENCE = 1048576
    MAV_SYS_STATUS_LOGGING = 16777216
    MAV_SYS_STATUS_PREARM_CHECK = 268435456
    MAV_SYS_STATUS_REVERSE_MOTOR = 8388608
    MAV_SYS_STATUS_SENSOR_3D_ACCEL = 2
    MAV_SYS_STATUS_SENSOR_3D_ACCEL2 = 262144
    MAV_SYS_STATUS_SENSOR_3D_GYRO = 1
    MAV_SYS_STATUS_SENSOR_3D_GYRO2 = 131072
    MAV_SYS_STATUS_SENSOR_3D_MAG = 4
    MAV_SYS_STATUS_SENSOR_3D_MAG2 = 524288
    MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE = 8
    MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL = 1024
    MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION = 2048
    MAV_SYS_STATUS_SENSOR_BATTERY = 33554432
    MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE = 16
    MAV_SYS_STATUS_SENSOR_ENUM_END = 268435457
    MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH = 512
    MAV_SYS_STATUS_SENSOR_GPS = 32
    MAV_SYS_STATUS_SENSOR_LASER_POSITION = 256
    MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS = 32768
    MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW = 64
    MAV_SYS_STATUS_SENSOR_PROXIMITY = 67108864
    MAV_SYS_STATUS_SENSOR_RC_RECEIVER = 65536
    MAV_SYS_STATUS_SENSOR_SATCOM = 134217728
    MAV_SYS_STATUS_SENSOR_VISION_POSITION = 128
    MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL = 16384
    MAV_SYS_STATUS_SENSOR_YAW_POSITION = 4096
    MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL = 8192
    MAV_SYS_STATUS_TERRAIN = 4194304
    MAV_TYPE_ADSB = 27
    MAV_TYPE_AIRSHIP = 7
    MAV_TYPE_ANTENNA_TRACKER = 5
    MAV_TYPE_CAMERA = 30
    MAV_TYPE_CHARGING_STATION = 31
    MAV_TYPE_COAXIAL = 3
    MAV_TYPE_DODECAROTOR = 29
    MAV_TYPE_ENUM_END = 34
    MAV_TYPE_FIXED_WING = 1
    MAV_TYPE_FLAPPING_WING = 16
    MAV_TYPE_FLARM = 32
    MAV_TYPE_FREE_BALLOON = 8
    MAV_TYPE_GCS = 6
    MAV_TYPE_GENERIC = 0
    MAV_TYPE_GIMBAL = 26
    MAV_TYPE_GROUND_ROVER = 10
    MAV_TYPE_HELICOPTER = 4
    MAV_TYPE_HEXAROTOR = 13
    MAV_TYPE_KITE = 17
    MAV_TYPE_OCTOROTOR = 14
    MAV_TYPE_ONBOARD_CONTROLLER = 18
    MAV_TYPE_PARAFOIL = 28
    MAV_TYPE_QUADROTOR = 2
    MAV_TYPE_ROCKET = 9
    MAV_TYPE_SERVO = 33
    MAV_TYPE_SUBMARINE = 12
    MAV_TYPE_SURFACE_BOAT = 11
    MAV_TYPE_TRICOPTER = 15
    MAV_TYPE_VTOL_DUOROTOR = 19
    MAV_TYPE_VTOL_QUADROTOR = 20
    MAV_TYPE_VTOL_RESERVED2 = 22
    MAV_TYPE_VTOL_RESERVED3 = 23
    MAV_TYPE_VTOL_RESERVED4 = 24
    MAV_TYPE_VTOL_RESERVED5 = 25
    MAV_TYPE_VTOL_TILTROTOR = 21
    MAV_VTOL_STATE_ENUM_END = 5
    MAV_VTOL_STATE_FW = 4
    MAV_VTOL_STATE_MC = 3
    MAV_VTOL_STATE_TRANSITION_TO_FW = 1
    MAV_VTOL_STATE_TRANSITION_TO_MC = 2
    MAV_VTOL_STATE_UNDEFINED = 0
    MOTOR_TEST_COMPASS_CAL = 3
    MOTOR_TEST_ORDER_BOARD = 2
    MOTOR_TEST_ORDER_DEFAULT = 0
    MOTOR_TEST_ORDER_ENUM_END = 3
    MOTOR_TEST_ORDER_SEQUENCE = 1
    MOTOR_TEST_THROTTLE_PERCENT = 0
    MOTOR_TEST_THROTTLE_PILOT = 2
    MOTOR_TEST_THROTTLE_PWM = 1
    MOTOR_TEST_THROTTLE_TYPE_ENUM_END = 4
    PARACHUTE_ACTION_ENUM_END = 3
    PARACHUTE_DISABLE = 0
    PARACHUTE_ENABLE = 1
    PARACHUTE_RELEASE = 2
    PID_TUNING_ACCZ = 4
    PID_TUNING_AXIS_ENUM_END = 7
    PID_TUNING_LANDING = 6
    PID_TUNING_PITCH = 2
    PID_TUNING_ROLL = 1
    PID_TUNING_STEER = 5
    PID_TUNING_YAW = 3
    PLANE_MODE_ACRO = 4
    PLANE_MODE_AUTO = 10
    PLANE_MODE_AUTOTUNE = 8
    PLANE_MODE_AVOID_ADSB = 14
    PLANE_MODE_CIRCLE = 1
    PLANE_MODE_CRUISE = 7
    PLANE_MODE_ENUM_END = 23
    PLANE_MODE_FLY_BY_WIRE_A = 5
    PLANE_MODE_FLY_BY_WIRE_B = 6
    PLANE_MODE_GUIDED = 15
    PLANE_MODE_INITIALIZING = 16
    PLANE_MODE_LOITER = 12
    PLANE_MODE_MANUAL = 0
    PLANE_MODE_QAUTOTUNE = 22
    PLANE_MODE_QHOVER = 18
    PLANE_MODE_QLAND = 20
    PLANE_MODE_QLOITER = 19
    PLANE_MODE_QRTL = 21
    PLANE_MODE_QSTABILIZE = 17
    PLANE_MODE_RTL = 11
    PLANE_MODE_STABILIZE = 2
    PLANE_MODE_TAKEOFF = 13
    PLANE_MODE_TRAINING = 3
    POSITION_TARGET_TYPEMASK_AX_IGNORE = 64
    POSITION_TARGET_TYPEMASK_AY_IGNORE = 128
    POSITION_TARGET_TYPEMASK_AZ_IGNORE = 256
    POSITION_TARGET_TYPEMASK_ENUM_END = 2049
    POSITION_TARGET_TYPEMASK_FORCE_SET = 512
    POSITION_TARGET_TYPEMASK_VX_IGNORE = 8
    POSITION_TARGET_TYPEMASK_VY_IGNORE = 16
    POSITION_TARGET_TYPEMASK_VZ_IGNORE = 32
    POSITION_TARGET_TYPEMASK_X_IGNORE = 1
    POSITION_TARGET_TYPEMASK_YAW_IGNORE = 1024
    POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE = 2048
    POSITION_TARGET_TYPEMASK_Y_IGNORE = 2
    POSITION_TARGET_TYPEMASK_Z_IGNORE = 4
    PRECISION_LAND_MODE_DISABLED = 0
    PRECISION_LAND_MODE_ENUM_END = 3
    PRECISION_LAND_MODE_OPPORTUNISTIC = 1
    PRECISION_LAND_MODE_REQUIRED = 2
    PROTOCOL_MARKER_V1 = 254
    PROTOCOL_MARKER_V2 = 253
    RALLY_FLAGS_ENUM_END = 3
    RC_TYPE_ENUM_END = 2
    RC_TYPE_SPEKTRUM_DSM2 = 0
    RC_TYPE_SPEKTRUM_DSMX = 1
    ROVER_MODE_ACRO = 1
    ROVER_MODE_AUTO = 10
    ROVER_MODE_ENUM_END = 17
    ROVER_MODE_GUIDED = 15
    ROVER_MODE_HOLD = 4
    ROVER_MODE_INITIALIZING = 16
    ROVER_MODE_LOITER = 5
    ROVER_MODE_MANUAL = 0
    ROVER_MODE_RTL = 11
    ROVER_MODE_SMART_RTL = 12
    ROVER_MODE_STEERING = 3
    RTK_BASELINE_COORDINATE_SYSTEM_ECEF = 0
    RTK_BASELINE_COORDINATE_SYSTEM_ENUM_END = 2
    RTK_BASELINE_COORDINATE_SYSTEM_NED = 1
    SCRIPTING_CMD_ENUM_END = 2
    SCRIPTING_CMD_REPL_START = 0
    SCRIPTING_CMD_REPL_STOP = 1
    SERIAL_CONTROL_DEV_ENUM_END = 110
    SERIAL_CONTROL_DEV_GPS1 = 2
    SERIAL_CONTROL_DEV_GPS2 = 3
    SERIAL_CONTROL_DEV_SHELL = 10
    SERIAL_CONTROL_DEV_TELEM1 = 0
    SERIAL_CONTROL_DEV_TELEM2 = 1
    SERIAL_CONTROL_FLAG_BLOCKING = 8
    SERIAL_CONTROL_FLAG_ENUM_END = 17
    SERIAL_CONTROL_FLAG_EXCLUSIVE = 4
    SERIAL_CONTROL_FLAG_MULTI = 16
    SERIAL_CONTROL_FLAG_REPLY = 1
    SERIAL_CONTROL_FLAG_RESPOND = 2
    SERIAL_CONTROL_SERIAL0 = 100
    SERIAL_CONTROL_SERIAL1 = 101
    SERIAL_CONTROL_SERIAL2 = 102
    SERIAL_CONTROL_SERIAL3 = 103
    SERIAL_CONTROL_SERIAL4 = 104
    SERIAL_CONTROL_SERIAL5 = 105
    SERIAL_CONTROL_SERIAL6 = 106
    SERIAL_CONTROL_SERIAL7 = 107
    SERIAL_CONTROL_SERIAL8 = 108
    SERIAL_CONTROL_SERIAL9 = 109
    STORAGE_STATUS_EMPTY = 0
    STORAGE_STATUS_ENUM_END = 4
    STORAGE_STATUS_NOT_SUPPORTED = 3
    STORAGE_STATUS_READY = 2
    STORAGE_STATUS_UNFORMATTED = 1
    SUB_MODE_ACRO = 1
    SUB_MODE_ALT_HOLD = 2
    SUB_MODE_AUTO = 3
    SUB_MODE_CIRCLE = 7
    SUB_MODE_ENUM_END = 20
    SUB_MODE_GUIDED = 4
    SUB_MODE_MANUAL = 19
    SUB_MODE_POSHOLD = 16
    SUB_MODE_STABILIZE = 0
    SUB_MODE_SURFACE = 9
    TRACKER_MODE_AUTO = 10
    TRACKER_MODE_ENUM_END = 17
    TRACKER_MODE_INITIALIZING = 16
    TRACKER_MODE_MANUAL = 0
    TRACKER_MODE_SCAN = 2
    TRACKER_MODE_SERVO_TEST = 3
    TRACKER_MODE_STOP = 1
    UAVCAN_NODE_HEALTH_CRITICAL = 3
    UAVCAN_NODE_HEALTH_ENUM_END = 4
    UAVCAN_NODE_HEALTH_ERROR = 2
    UAVCAN_NODE_HEALTH_OK = 0
    UAVCAN_NODE_HEALTH_WARNING = 1
    UAVCAN_NODE_MODE_ENUM_END = 8
    UAVCAN_NODE_MODE_INITIALIZATION = 1
    UAVCAN_NODE_MODE_MAINTENANCE = 2
    UAVCAN_NODE_MODE_OFFLINE = 7
    UAVCAN_NODE_MODE_OPERATIONAL = 0
    UAVCAN_NODE_MODE_SOFTWARE_UPDATE = 3
    UAVIONIX_ADSB_EMERGENCY_STATUS_ENUM_END = 8
    UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_ENUM_END = 16
    UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L15M_W23M = 1
    UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L25M_W28P5M = 2
    UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L25_34M = 3
    UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L35_33M = 4
    UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L35_38M = 5
    UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L45_39P5M = 6
    UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L45_45M = 7
    UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L55_45M = 8
    UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L55_52M = 9
    UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L65_59P5M = 10
    UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L65_67M = 11
    UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L75_W72P5M = 12
    UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L75_W80M = 13
    UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L85_W80M = 14
    UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L85_W90M = 15
    UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_NO_DATA = 0
    UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_ENUM_END = 8
    UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_2M = 1
    UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_4M = 2
    UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_6M = 3
    UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_NO_DATA = 0
    UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_0M = 4
    UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_2M = 5
    UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_4M = 6
    UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_6M = 7
    UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_APPLIED_BY_SENSOR = 1
    UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_ENUM_END = 2
    UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_NO_DATA = 0
    UAVIONIX_ADSB_OUT_DOWNED_AIRCRAFT_EMERGENCY = 6
    UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_2D = 2
    UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_3D = 3
    UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_DGPS = 4
    UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_ENUM_END = 6
    UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_NONE_0 = 0
    UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_NONE_1 = 1
    UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_RTK = 5
    UAVIONIX_ADSB_OUT_DYNAMIC_STATE_AUTOPILOT_ENABLED = 2
    UAVIONIX_ADSB_OUT_DYNAMIC_STATE_ENUM_END = 17
    UAVIONIX_ADSB_OUT_DYNAMIC_STATE_IDENT = 16
    UAVIONIX_ADSB_OUT_DYNAMIC_STATE_INTENT_CHANGE = 1
    UAVIONIX_ADSB_OUT_DYNAMIC_STATE_NICBARO_CROSSCHECKED = 4
    UAVIONIX_ADSB_OUT_DYNAMIC_STATE_ON_GROUND = 8
    UAVIONIX_ADSB_OUT_GENERAL_EMERGENCY = 1
    UAVIONIX_ADSB_OUT_LIFEGUARD_EMERGENCY = 2
    UAVIONIX_ADSB_OUT_MINIMUM_FUEL_EMERGENCY = 3
    UAVIONIX_ADSB_OUT_NO_COMM_EMERGENCY = 4
    UAVIONIX_ADSB_OUT_NO_EMERGENCY = 0
    UAVIONIX_ADSB_OUT_RESERVED = 7
    UAVIONIX_ADSB_OUT_RF_SELECT_ENUM_END = 3
    UAVIONIX_ADSB_OUT_RF_SELECT_RX_ENABLED = 1
    UAVIONIX_ADSB_OUT_RF_SELECT_STANDBY = 0
    UAVIONIX_ADSB_OUT_RF_SELECT_TX_ENABLED = 2
    UAVIONIX_ADSB_OUT_UNLAWFUL_INTERFERANCE_EMERGENCY = 5
    UAVIONIX_ADSB_RF_HEALTH_ENUM_END = 17
    UAVIONIX_ADSB_RF_HEALTH_FAIL_RX = 16
    UAVIONIX_ADSB_RF_HEALTH_FAIL_TX = 2
    UAVIONIX_ADSB_RF_HEALTH_INITIALIZING = 0
    UAVIONIX_ADSB_RF_HEALTH_OK = 1
    VTOL_TRANSITION_HEADING_ANY = 4
    VTOL_TRANSITION_HEADING_ENUM_END = 5
    VTOL_TRANSITION_HEADING_NEXT_WAYPOINT = 1
    VTOL_TRANSITION_HEADING_SPECIFIED = 3
    VTOL_TRANSITION_HEADING_TAKEOFF = 2
    VTOL_TRANSITION_HEADING_VEHICLE_DEFAULT = 0
    WINCH_ACTIONS_ENUM_END = 3
    WINCH_RATE_CONTROL = 2
    WINCH_RELATIVE_LENGTH_CONTROL = 1
    WINCH_RELAXED = 0
    WIRE_PROTOCOL_VERSION = '1.0'
    enums = {'ACCELCAL_VEHICLE_POS': {1: <pymavlink.dialects.v10.ardupilot...
    mavlink_map = {0: <class 'pymavlink.dialects.v10.ardupilotmega.MAVLink...
    native_force = False
    native_supported = True
    native_testing = False
    print_function = _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0)...

FILE
    /home/yanhwee/.local/lib/python3.6/site-packages/pymavlink/dialects/v10/ardupilotmega.py


